!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";var f="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,ee="undefined"==typeof window?{document:f,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window,l=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function I(e,t){var a=[],i=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var s,r,n=e.trim();if(0<=n.indexOf("<")&&0<=n.indexOf(">")){var o="div";for(0===n.indexOf("<li")&&(o="ul"),0===n.indexOf("<tr")&&(o="tbody"),0!==n.indexOf("<td")&&0!==n.indexOf("<th")||(o="tr"),0===n.indexOf("<tbody")&&(o="table"),0===n.indexOf("<option")&&(o="select"),(r=f.createElement(o)).innerHTML=n,i=0;i<r.childNodes.length;i+=1)a.push(r.childNodes[i])}else for(s=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||f).querySelectorAll(e.trim()):[f.getElementById(e.trim().split("#")[1])],i=0;i<s.length;i+=1)s[i]&&a.push(s[i])}else if(e.nodeType||e===ee||e===f)a.push(e);else if(0<e.length&&e[0].nodeType)for(i=0;i<e.length;i+=1)a.push(e[i]);return new l(a)}function r(e){for(var t=[],a=0;a<e.length;a+=1)-1===t.indexOf(e[a])&&t.push(e[a]);return t}I.fn=l.prototype,I.Class=l,I.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),a=0;a<t.length;a+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.add(t[a]);return this},removeClass:function(e){for(var t=e.split(" "),a=0;a<t.length;a+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.remove(t[a]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),a=0;a<t.length;a+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.toggle(t[a]);return this},attr:function(e,t){var a=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var i=0;i<this.length;i+=1)if(2===a.length)this[i].setAttribute(e,t);else for(var s in e)this[i][s]=e[s],this[i].setAttribute(s,e[s]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var a;if(void 0!==t){for(var i=0;i<this.length;i+=1)(a=this[i]).dom7ElementDataStorage||(a.dom7ElementDataStorage={}),a.dom7ElementDataStorage[e]=t;return this}if(a=this[0]){if(a.dom7ElementDataStorage&&e in a.dom7ElementDataStorage)return a.dom7ElementDataStorage[e];var s=a.getAttribute("data-"+e);return s?s:void 0}},transform:function(e){for(var t=0;t<this.length;t+=1){var a=this[t].style;a.webkitTransform=e,a.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var a=this[t].style;a.webkitTransitionDuration=e,a.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var a=e[0],r=e[1],n=e[2],i=e[3];function s(e){var t=e.target;if(t){var a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),I(t).is(r))n.apply(t,a);else for(var i=I(t).parents(),s=0;s<i.length;s+=1)I(i[s]).is(r)&&n.apply(i[s],a)}}function o(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),n.apply(this,t)}"function"==typeof e[1]&&(a=e[0],n=e[1],i=e[2],r=void 0),i=i||!1;for(var l,d=a.split(" "),p=0;p<this.length;p+=1){var c=this[p];if(r)for(l=0;l<d.length;l+=1){var u=d[l];c.dom7LiveListeners||(c.dom7LiveListeners={}),c.dom7LiveListeners[u]||(c.dom7LiveListeners[u]=[]),c.dom7LiveListeners[u].push({listener:n,proxyListener:s}),c.addEventListener(u,s,i)}else for(l=0;l<d.length;l+=1){var h=d[l];c.dom7Listeners||(c.dom7Listeners={}),c.dom7Listeners[h]||(c.dom7Listeners[h]=[]),c.dom7Listeners[h].push({listener:n,proxyListener:o}),c.addEventListener(h,o,i)}}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var a=e[0],i=e[1],s=e[2],r=e[3];"function"==typeof e[1]&&(a=e[0],s=e[1],r=e[2],i=void 0),r=r||!1;for(var n=a.split(" "),o=0;o<n.length;o+=1)for(var l=n[o],d=0;d<this.length;d+=1){var p=this[d],c=void 0;if(!i&&p.dom7Listeners?c=p.dom7Listeners[l]:i&&p.dom7LiveListeners&&(c=p.dom7LiveListeners[l]),c&&c.length)for(var u=c.length-1;0<=u;--u){var h=c[u];(!s||h.listener!==s)&&!(s&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===s)&&s||(p.removeEventListener(l,h.proxyListener,r),c.splice(u,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=e[0].split(" "),i=e[1],s=0;s<a.length;s+=1)for(var r=a[s],n=0;n<this.length;n+=1){var o=this[n],l=void 0;try{l=new ee.CustomEvent(r,{detail:i,bubbles:!0,cancelable:!0})}catch(e){(l=f.createEvent("Event")).initEvent(r,!0,!0),l.detail=i}o.dom7EventData=e.filter(function(e,t){return 0<t}),o.dispatchEvent(l),o.dom7EventData=[],delete o.dom7EventData}return this},transitionEnd:function(t){var a,i=["webkitTransitionEnd","transitionend"],s=this;function r(e){if(e.target===this)for(t.call(this,e),a=0;a<i.length;a+=1)s.off(i[a],r)}if(t)for(a=0;a<i.length;a+=1)s.on(i[a],r);return this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),a=f.body,i=e.clientTop||a.clientTop||0,s=e.clientLeft||a.clientLeft||0,r=e===ee?ee.scrollY:e.scrollTop,n=e===ee?ee.scrollX:e.scrollLeft;return{top:t.top+r-i,left:t.left+n-s}}return null},css:function(e,t){var a;if(1===arguments.length){if("string"!=typeof e){for(a=0;a<this.length;a+=1)for(var i in e)this[a].style[i]=e[i];return this}if(this[0])return ee.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(a=0;a<this.length;a+=1)this[a].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,a,i=this[0];if(!i||void 0===e)return!1;if("string"==typeof e){if(i.matches)return i.matches(e);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(e);if(i.msMatchesSelector)return i.msMatchesSelector(e);for(t=I(e),a=0;a<t.length;a+=1)if(t[a]===i)return!0;return!1}if(e===f)return i===f;if(e===ee)return i===ee;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,a=0;a<t.length;a+=1)if(t[a]===i)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,a=this.length;return new l(a-1<e?[]:e<0?(t=a+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var e,t=[],a=arguments.length;a--;)t[a]=arguments[a];for(var i=0;i<t.length;i+=1){e=t[i];for(var s=0;s<this.length;s+=1)if("string"==typeof e){var r=f.createElement("div");for(r.innerHTML=e;r.firstChild;)this[s].appendChild(r.firstChild)}else if(e instanceof l)for(var n=0;n<e.length;n+=1)this[s].appendChild(e[n]);else this[s].appendChild(e)}return this},prepend:function(e){for(var t,a=0;a<this.length;a+=1)if("string"==typeof e){var i=f.createElement("div");for(i.innerHTML=e,t=i.childNodes.length-1;0<=t;--t)this[a].insertBefore(i.childNodes[t],this[a].childNodes[0])}else if(e instanceof l)for(t=0;t<e.length;t+=1)this[a].insertBefore(e[t],this[a].childNodes[0]);else this[a].insertBefore(e,this[a].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&I(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],a=this[0];if(!a)return new l([]);for(;a.nextElementSibling;){var i=a.nextElementSibling;(!e||I(i).is(e))&&t.push(i),a=i}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&I(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],a=this[0];if(!a)return new l([]);for(;a.previousElementSibling;){var i=a.previousElementSibling;(!e||I(i).is(e))&&t.push(i),a=i}return new l(t)},parent:function(e){for(var t=[],a=0;a<this.length;a+=1)null===this[a].parentNode||e&&!I(this[a].parentNode).is(e)||t.push(this[a].parentNode);return I(r(t))},parents:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].parentNode;i;)e&&!I(i).is(e)||t.push(i),i=i.parentNode;return I(r(t))},closest:function(e){var t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].querySelectorAll(e),s=0;s<i.length;s+=1)t.push(i[s]);return new l(t)},children:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].childNodes,s=0;s<i.length;s+=1)e?1===i[s].nodeType&&I(i[s]).is(e)&&t.push(i[s]):1===i[s].nodeType&&t.push(i[s]);return new l(r(t))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=0;a<e.length;a+=1)for(var i=I(e[a]),s=0;s<i.length;s+=1)this[this.length]=i[s],this.length+=1;return this},styles:function(){return this[0]?ee.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){I.fn[e]=I.fn[e]||t[e]});function e(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var a,i,s,n,te={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var a,i,s;void 0===t&&(t="x");var r=ee.getComputedStyle(e,null);return ee.WebKitCSSMatrix?(6<(i=r.transform||r.webkitTransform).split(",").length&&(i=i.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),s=new ee.WebKitCSSMatrix("none"===i?"":i)):a=(s=r.MozTransform||r.OTransform||r.MsTransform||r.msTransform||r.transform||r.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=ee.WebKitCSSMatrix?s.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),"y"===t&&(i=ee.WebKitCSSMatrix?s.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),i||0},parseUrlQuery:function(e){var t,a,i,s,r={},n=e||ee.location.href;if("string"==typeof n&&n.length)for(s=(a=(n=-1<n.indexOf("?")?n.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<s;t+=1)i=a[t].replace(/#\S+/g,"").split("="),r[decodeURIComponent(i[0])]=void 0===i[1]?void 0:decodeURIComponent(i[1])||"";return r},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=Object(e[0]),i=1;i<e.length;i+=1){var s=e[i];if(null!=s)for(var r=Object.keys(Object(s)),n=0,o=r.length;n<o;n+=1){var l=r[n],d=Object.getOwnPropertyDescriptor(s,l);void 0!==d&&d.enumerable&&(te.isObject(a[l])&&te.isObject(s[l])?te.extend(a[l],s[l]):!te.isObject(a[l])&&te.isObject(s[l])?(a[l]={},te.extend(a[l],s[l])):a[l]=s[l])}}return a}},ae=(s=f.createElement("div"),{touch:ee.Modernizr&&!0===ee.Modernizr.touch||!!(0<ee.navigator.maxTouchPoints||"ontouchstart"in ee||ee.DocumentTouch&&f instanceof ee.DocumentTouch),pointerEvents:!!(ee.navigator.pointerEnabled||ee.PointerEvent||"maxTouchPoints"in ee.navigator&&0<ee.navigator.maxTouchPoints),prefixedPointerEvents:!!ee.navigator.msPointerEnabled,transition:"transition"in(i=s.style)||"webkitTransition"in i||"MozTransition"in i,transforms3d:ee.Modernizr&&!0===ee.Modernizr.csstransforms3d||"webkitPerspective"in(a=s.style)||"MozPerspective"in a||"OPerspective"in a||"MsPerspective"in a||"perspective"in a,flexbox:function(){for(var e=s.style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),a=0;a<t.length;a+=1)if(t[a]in e)return!0;return!1}(),observer:"MutationObserver"in ee||"WebkitMutationObserver"in ee,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});ee.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in ee}),ie={isIE:!!ee.navigator.userAgent.match(/Trident/g)||!!ee.navigator.userAgent.match(/MSIE/g),isEdge:!!ee.navigator.userAgent.match(/Edge/g),isSafari:0<=(n=ee.navigator.userAgent.toLowerCase()).indexOf("safari")&&n.indexOf("chrome")<0&&n.indexOf("android")<0,isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(ee.navigator.userAgent)},o={components:{configurable:!0}};e.prototype.on=function(e,t,a){var i=this;if("function"!=typeof t)return i;var s=a?"unshift":"push";return e.split(" ").forEach(function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][s](t)}),i},e.prototype.once=function(a,i,e){var s=this;if("function"!=typeof i)return s;function r(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];i.apply(s,e),s.off(a,r),r.f7proxy&&delete r.f7proxy}return r.f7proxy=i,s.on(a,r,e)},e.prototype.off=function(e,i){var s=this;return s.eventsListeners&&e.split(" ").forEach(function(a){void 0===i?s.eventsListeners[a]=[]:s.eventsListeners[a]&&s.eventsListeners[a].length&&s.eventsListeners[a].forEach(function(e,t){(e===i||e.f7proxy&&e.f7proxy===i)&&s.eventsListeners[a].splice(t,1)})}),s},e.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var a,i,s,r=this;return r.eventsListeners&&(s="string"==typeof e[0]||Array.isArray(e[0])?(a=e[0],i=e.slice(1,e.length),r):(a=e[0].events,i=e[0].data,e[0].context||r),(Array.isArray(a)?a:a.split(" ")).forEach(function(e){var t;r.eventsListeners&&r.eventsListeners[e]&&(t=[],r.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(s,i)}))})),r},e.prototype.useModulesParams=function(a){var i=this;i.modules&&Object.keys(i.modules).forEach(function(e){var t=i.modules[e];t.params&&te.extend(a,t.params)})},e.prototype.useModules=function(i){void 0===i&&(i={});var s=this;s.modules&&Object.keys(s.modules).forEach(function(e){var a=s.modules[e],t=i[e]||{};a.instance&&Object.keys(a.instance).forEach(function(e){var t=a.instance[e];s[e]="function"==typeof t?t.bind(s):t}),a.on&&s.on&&Object.keys(a.on).forEach(function(e){s.on(e,a.on[e])}),a.create&&a.create.bind(s)(t)})},o.components.set=function(e){this.use&&this.use(e)},e.installModule=function(t){for(var e=[],a=arguments.length-1;0<a--;)e[a]=arguments[a+1];var i=this;i.prototype.modules||(i.prototype.modules={});var s=t.name||Object.keys(i.prototype.modules).length+"_"+te.now();return(i.prototype.modules[s]=t).proto&&Object.keys(t.proto).forEach(function(e){i.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){i[e]=t.static[e]}),t.install&&t.install.apply(i,e),i},e.use=function(e){for(var t=[],a=arguments.length-1;0<a--;)t[a]=arguments[a+1];var i=this;return Array.isArray(e)?(e.forEach(function(e){return i.installModule(e)}),i):i.installModule.apply(i,[e].concat(t))},Object.defineProperties(e,o);var d={updateSize:function(){var e=this,t=e.$el,a=void 0!==e.params.width?e.params.width:t[0].clientWidth,i=void 0!==e.params.height?e.params.height:t[0].clientHeight;0===a&&e.isHorizontal()||0===i&&e.isVertical()||(a=a-parseInt(t.css("padding-left"),10)-parseInt(t.css("padding-right"),10),i=i-parseInt(t.css("padding-top"),10)-parseInt(t.css("padding-bottom"),10),te.extend(e,{width:a,height:i,size:e.isHorizontal()?a:i}))},updateSlides:function(){var e=this,t=e.params,a=e.$wrapperEl,i=e.size,s=e.rtlTranslate,r=e.wrongRTL,n=e.virtual&&t.virtual.enabled,o=n?e.virtual.slides.length:e.slides.length,l=a.children("."+e.params.slideClass),d=n?e.virtual.slides.length:l.length,p=[],c=[],u=[],h=t.slidesOffsetBefore;"function"==typeof h&&(h=t.slidesOffsetBefore.call(e));var v=t.slidesOffsetAfter;"function"==typeof v&&(v=t.slidesOffsetAfter.call(e));var f,m=e.snapGrid.length,g=e.snapGrid.length,b=t.spaceBetween,w=-h,y=0,x=0;if(void 0!==i){"string"==typeof b&&0<=b.indexOf("%")&&(b=parseFloat(b.replace("%",""))/100*i),e.virtualSize=-b,s?l.css({marginLeft:"",marginTop:""}):l.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(f=Math.floor(d/t.slidesPerColumn)===d/e.params.slidesPerColumn?d:Math.ceil(d/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(f=Math.max(f,t.slidesPerView*t.slidesPerColumn)));for(var T,E,S,C=t.slidesPerColumn,M=f/C,P=Math.floor(d/t.slidesPerColumn),k=0;k<d;k+=1){Y=0;var z,$,I,L,D,O,A,H,G,N,B,X,V,Y,F,R,q,W,j,U,K=l.eq(k);1<t.slidesPerColumn&&(I=L=z=void 0,"column"===t.slidesPerColumnFill||"row"===t.slidesPerColumnFill&&1<t.slidesPerGroup?("column"===t.slidesPerColumnFill?(I=k-(L=Math.floor(k/C))*C,(P<L||L===P&&I===C-1)&&C<=(I+=1)&&(I=0,L+=1)):($=Math.floor(k/t.slidesPerGroup),L=k-(I=Math.floor(k/t.slidesPerView)-$*t.slidesPerColumn)*t.slidesPerView-$*t.slidesPerView),z=L+I*f/C,K.css({"-webkit-box-ordinal-group":z,"-moz-box-ordinal-group":z,"-ms-flex-order":z,"-webkit-order":z,order:z})):L=k-(I=Math.floor(k/M))*M,K.css("margin-"+(e.isHorizontal()?"top":"left"),0!==I&&t.spaceBetween&&t.spaceBetween+"px").attr("data-swiper-column",L).attr("data-swiper-row",I)),"none"!==K.css("display")&&("auto"===t.slidesPerView?(D=ee.getComputedStyle(K[0],null),O=K[0].style.transform,A=K[0].style.webkitTransform,O&&(K[0].style.transform="none"),A&&(K[0].style.webkitTransform="none"),Y=t.roundLengths?e.isHorizontal()?K.outerWidth(!0):K.outerHeight(!0):e.isHorizontal()?(H=parseFloat(D.getPropertyValue("width")),G=parseFloat(D.getPropertyValue("padding-left")),N=parseFloat(D.getPropertyValue("padding-right")),B=parseFloat(D.getPropertyValue("margin-left")),X=parseFloat(D.getPropertyValue("margin-right")),(V=D.getPropertyValue("box-sizing"))&&"border-box"===V&&!ie.isIE?H+B+X:H+G+N+B+X):(F=parseFloat(D.getPropertyValue("height")),R=parseFloat(D.getPropertyValue("padding-top")),q=parseFloat(D.getPropertyValue("padding-bottom")),W=parseFloat(D.getPropertyValue("margin-top")),j=parseFloat(D.getPropertyValue("margin-bottom")),(U=D.getPropertyValue("box-sizing"))&&"border-box"===U&&!ie.isIE?F+W+j:F+R+q+W+j),O&&(K[0].style.transform=O),A&&(K[0].style.webkitTransform=A),t.roundLengths&&(Y=Math.floor(Y))):(Y=(i-(t.slidesPerView-1)*b)/t.slidesPerView,t.roundLengths&&(Y=Math.floor(Y)),l[k]&&(e.isHorizontal()?l[k].style.width=Y+"px":l[k].style.height=Y+"px")),l[k]&&(l[k].swiperSlideSize=Y),u.push(Y),t.centeredSlides?(w=w+Y/2+y/2+b,0===y&&0!==k&&(w=w-i/2-b),0===k&&(w=w-i/2-b),Math.abs(w)<.001&&(w=0),t.roundLengths&&(w=Math.floor(w)),x%t.slidesPerGroup==0&&p.push(w),c.push(w)):(t.roundLengths&&(w=Math.floor(w)),x%t.slidesPerGroup==0&&p.push(w),c.push(w),w=w+Y+b),e.virtualSize+=Y+b,y=Y,x+=1)}if(e.virtualSize=Math.max(e.virtualSize,i)+v,s&&r&&("slide"===t.effect||"coverflow"===t.effect)&&a.css({width:e.virtualSize+t.spaceBetween+"px"}),ae.flexbox&&!t.setWrapperSize||(e.isHorizontal()?a.css({width:e.virtualSize+t.spaceBetween+"px"}):a.css({height:e.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(e.virtualSize=(Y+t.spaceBetween)*f,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?a.css({width:e.virtualSize+t.spaceBetween+"px"}):a.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){T=[];for(var _=0;_<p.length;_+=1){var Z=p[_];t.roundLengths&&(Z=Math.floor(Z)),p[_]<e.virtualSize+p[0]&&T.push(Z)}p=T}if(!t.centeredSlides){T=[];for(var Q=0;Q<p.length;Q+=1){var J=p[Q];t.roundLengths&&(J=Math.floor(J)),p[Q]<=e.virtualSize-i&&T.push(J)}p=T,1<Math.floor(e.virtualSize-i)-Math.floor(p[p.length-1])&&p.push(e.virtualSize-i)}0===p.length&&(p=[0]),0!==t.spaceBetween&&(e.isHorizontal()?s?l.css({marginLeft:b+"px"}):l.css({marginRight:b+"px"}):l.css({marginBottom:b+"px"})),t.centerInsufficientSlides&&(E=0,u.forEach(function(e){E+=e+(t.spaceBetween?t.spaceBetween:0)}),(E-=t.spaceBetween)<i&&(S=(i-E)/2,p.forEach(function(e,t){p[t]=e-S}),c.forEach(function(e,t){c[t]=e+S}))),te.extend(e,{slides:l,snapGrid:p,slidesGrid:c,slidesSizesGrid:u}),d!==o&&e.emit("slidesLengthChange"),p.length!==m&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),c.length!==g&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,a,i=this,s=[],r=0;if("number"==typeof e?i.setTransition(e):!0===e&&i.setTransition(i.params.speed),"auto"!==i.params.slidesPerView&&1<i.params.slidesPerView)for(t=0;t<Math.ceil(i.params.slidesPerView);t+=1){var n=i.activeIndex+t;if(n>i.slides.length)break;s.push(i.slides.eq(n)[0])}else s.push(i.slides.eq(i.activeIndex)[0]);for(t=0;t<s.length;t+=1){void 0!==s[t]&&(r=r<(a=s[t].offsetHeight)?a:r)}r&&i.$wrapperEl.css("height",r+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,i=t.slides,s=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var r=s?e:-e;i.removeClass(a.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var n=0;n<i.length;n+=1){var o,l,d=i[n],p=(r+(a.centeredSlides?t.minTranslate():0)-d.swiperSlideOffset)/(d.swiperSlideSize+a.spaceBetween);a.watchSlidesVisibility&&(l=(o=-(r-d.swiperSlideOffset))+t.slidesSizesGrid[n],(0<=o&&o<t.size-1||1<l&&l<=t.size||o<=0&&l>=t.size)&&(t.visibleSlides.push(d),t.visibleSlidesIndexes.push(n),i.eq(n).addClass(a.slideVisibleClass))),d.progress=s?-p:p}t.visibleSlides=I(t.visibleSlides)}},updateProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,i=t.maxTranslate()-t.minTranslate(),s=t.progress,r=t.isBeginning,n=r,o=l=t.isEnd,l=0==i?r=!(s=0):(r=(s=(e-t.minTranslate())/i)<=0,1<=s);te.extend(t,{progress:s,isBeginning:r,isEnd:l}),(a.watchSlidesProgress||a.watchSlidesVisibility)&&t.updateSlidesProgress(e),r&&!n&&t.emit("reachBeginning toEdge"),l&&!o&&t.emit("reachEnd toEdge"),(n&&!r||o&&!l)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){var e,t=this,a=t.slides,i=t.params,s=t.$wrapperEl,r=t.activeIndex,n=t.realIndex,o=t.virtual&&i.virtual.enabled;a.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+r+'"]'):a.eq(r)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+n+'"]').addClass(i.slideDuplicateActiveClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+n+'"]').addClass(i.slideDuplicateActiveClass));var l=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=a.eq(0)).addClass(i.slideNextClass);var d=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=a.eq(-1)).addClass(i.slidePrevClass),i.loop&&(l.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,a,i=this,s=i.rtlTranslate?i.translate:-i.translate,r=i.slidesGrid,n=i.snapGrid,o=i.params,l=i.activeIndex,d=i.realIndex,p=i.snapIndex,c=e;if(void 0===c){for(var u=0;u<r.length;u+=1)void 0!==r[u+1]?s>=r[u]&&s<r[u+1]-(r[u+1]-r[u])/2?c=u:s>=r[u]&&s<r[u+1]&&(c=u+1):s>=r[u]&&(c=u);o.normalizeSlideIndex&&(c<0||void 0===c)&&(c=0)}(t=0<=n.indexOf(s)?n.indexOf(s):Math.floor(c/o.slidesPerGroup))>=n.length&&(t=n.length-1),c!==l?(a=parseInt(i.slides.eq(c).attr("data-swiper-slide-index")||c,10),te.extend(i,{snapIndex:t,realIndex:a,previousIndex:l,activeIndex:c}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),d!==a&&i.emit("realIndexChange"),(i.initialized||i.runCallbacksOnInit)&&i.emit("slideChange")):t!==p&&(i.snapIndex=t,i.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,a=t.params,i=I(e.target).closest("."+a.slideClass)[0],s=!1;if(i)for(var r=0;r<t.slides.length;r+=1)t.slides[r]===i&&(s=!0);if(!i||!s)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(I(i).attr("data-swiper-slide-index"),10):t.clickedIndex=I(i).index(),a.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var p={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,a=this.rtlTranslate,i=this.translate,s=this.$wrapperEl;if(t.virtualTranslate)return a?-i:i;var r=te.getTranslate(s[0],e);return a&&(r=-r),r||0},setTranslate:function(e,t){var a=this,i=a.rtlTranslate,s=a.params,r=a.$wrapperEl,n=a.progress,o=0,l=0;a.isHorizontal()?o=i?-e:e:l=e,s.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),s.virtualTranslate||(ae.transforms3d?r.transform("translate3d("+o+"px, "+l+"px, 0px)"):r.transform("translate("+o+"px, "+l+"px)")),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?o:l;var d=a.maxTranslate()-a.minTranslate();(0==d?0:(e-a.minTranslate())/d)!==n&&a.updateProgress(e),a.emit("setTranslate",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}};var c={setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.params,r=a.previousIndex;s.autoHeight&&a.updateAutoHeight();var n=(n=t)||(r<i?"next":i<r?"prev":"reset");if(a.emit("transitionStart"),e&&i!==r){if("reset"===n)return void a.emit("slideResetTransitionStart");a.emit("slideChangeTransitionStart"),"next"===n?a.emit("slideNextTransitionStart"):a.emit("slidePrevTransitionStart")}},transitionEnd:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.previousIndex;a.animating=!1,a.setTransition(0);var r=(r=t)||(s<i?"next":i<s?"prev":"reset");if(a.emit("transitionEnd"),e&&i!==s){if("reset"===r)return void a.emit("slideResetTransitionEnd");a.emit("slideChangeTransitionEnd"),"next"===r?a.emit("slideNextTransitionEnd"):a.emit("slidePrevTransitionEnd")}}};var u={slideTo:function(e,t,a,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);var s=this,r=e;r<0&&(r=0);var n=s.params,o=s.snapGrid,l=s.slidesGrid,d=s.previousIndex,p=s.activeIndex,c=s.rtlTranslate;if(s.animating&&n.preventInteractionOnTransition)return!1;var u=Math.floor(r/n.slidesPerGroup);u>=o.length&&(u=o.length-1),(p||n.initialSlide||0)===(d||0)&&a&&s.emit("beforeSlideChangeStart");var h,v=-o[u];if(s.updateProgress(v),n.normalizeSlideIndex)for(var f=0;f<l.length;f+=1)-Math.floor(100*v)>=Math.floor(100*l[f])&&(r=f);if(s.initialized&&r!==p){if(!s.allowSlideNext&&v<s.translate&&v<s.minTranslate())return!1;if(!s.allowSlidePrev&&v>s.translate&&v>s.maxTranslate()&&(p||0)!==r)return!1}return h=p<r?"next":r<p?"prev":"reset",c&&-v===s.translate||!c&&v===s.translate?(s.updateActiveIndex(r),n.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==n.effect&&s.setTranslate(v),"reset"!==h&&(s.transitionStart(a,h),s.transitionEnd(a,h)),!1):(0!==t&&ae.transition?(s.setTransition(t),s.setTranslate(v),s.updateActiveIndex(r),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,i),s.transitionStart(a,h),s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(a,h))}),s.$wrapperEl[0].addEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd))):(s.setTransition(0),s.setTranslate(v),s.updateActiveIndex(r),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,i),s.transitionStart(a,h),s.transitionEnd(a,h)),!0)},slideToLoop:function(e,t,a,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);var s=e;return this.params.loop&&(s+=this.loopedSlides),this.slideTo(s,t,a,i)},slideNext:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,r=i.animating;return s.loop?!r&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,i.slideTo(i.activeIndex+s.slidesPerGroup,e,t,a)):i.slideTo(i.activeIndex+s.slidesPerGroup,e,t,a)},slidePrev:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,r=i.animating,n=i.snapGrid,o=i.slidesGrid,l=i.rtlTranslate;if(s.loop){if(r)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var p,c=d(l?i.translate:-i.translate),u=n.map(d),h=(o.map(d),n[u.indexOf(c)],n[u.indexOf(c)-1]);return void 0!==h&&(p=o.indexOf(h))<0&&(p=i.activeIndex-1),i.slideTo(p,e,t,a)},slideReset:function(e,t,a){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,a)},slideToClosest:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i,s,r=this,n=r.activeIndex,o=Math.floor(n/r.params.slidesPerGroup);return o<r.snapGrid.length-1&&(i=r.rtlTranslate?r.translate:-r.translate,s=r.snapGrid[o],(r.snapGrid[o+1]-s)/2<i-s&&(n=r.params.slidesPerGroup)),r.slideTo(n,e,t,a)},slideToClickedSlide:function(){var e,t=this,a=t.params,i=t.$wrapperEl,s="auto"===a.slidesPerView?t.slidesPerViewDynamic():a.slidesPerView,r=t.clickedIndex;if(a.loop){if(t.animating)return;e=parseInt(I(t.clickedSlide).attr("data-swiper-slide-index"),10),a.centeredSlides?r<t.loopedSlides-s/2||r>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),r=i.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+a.slideDuplicateClass+")").eq(0).index(),te.nextTick(function(){t.slideTo(r)})):t.slideTo(r):r>t.slides.length-s?(t.loopFix(),r=i.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+a.slideDuplicateClass+")").eq(0).index(),te.nextTick(function(){t.slideTo(r)})):t.slideTo(r)}else t.slideTo(r)}};var h={loopCreate:function(){var i=this,e=i.params,t=i.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var s=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var a=e.slidesPerGroup-s.length%e.slidesPerGroup;if(a!==e.slidesPerGroup){for(var r=0;r<a;r+=1){var n=I(f.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(n)}s=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=s.length),i.loopedSlides=parseInt(e.loopedSlides||e.slidesPerView,10),i.loopedSlides+=e.loopAdditionalSlides,i.loopedSlides>s.length&&(i.loopedSlides=s.length);var o=[],l=[];s.each(function(e,t){var a=I(t);e<i.loopedSlides&&l.push(t),e<s.length&&e>=s.length-i.loopedSlides&&o.push(t),a.attr("data-swiper-slide-index",e)});for(var d=0;d<l.length;d+=1)t.append(I(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var p=o.length-1;0<=p;--p)t.prepend(I(o[p].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){var e=this,t=e.params,a=e.activeIndex,i=e.slides,s=e.loopedSlides,r=e.allowSlidePrev,n=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d,p=-o[a]-e.getTranslate();a<s?(d=i.length-3*s+a,d+=s,e.slideTo(d,0,!1,!0)&&0!=p&&e.setTranslate((l?-e.translate:e.translate)-p)):("auto"===t.slidesPerView&&2*s<=a||a>=i.length-s)&&(d=-i.length+a+s,d+=s,e.slideTo(d,0,!1,!0)&&0!=p&&e.setTranslate((l?-e.translate:e.translate)-p)),e.allowSlidePrev=r,e.allowSlideNext=n},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,a=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),a.removeAttr("data-swiper-slide-index")}};var v={setGrabCursor:function(e){var t;ae.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||((t=this.el).style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab")},unsetGrabCursor:function(){ae.touch||this.params.watchOverflow&&this.isLocked||(this.el.style.cursor="")}};var m,g,b,w,y,x,T,E,S,C={appendSlide:function(e){var t=this,a=t.$wrapperEl,i=t.params;if(i.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&a.append(e[s]);else a.append(e);i.loop&&t.loopCreate(),i.observer&&ae.observer||t.update()},prependSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&t.loopDestroy();var r=s+1;if("object"==typeof e&&"length"in e){for(var n=0;n<e.length;n+=1)e[n]&&i.prepend(e[n]);r=s+e.length}else i.prepend(e);a.loop&&t.loopCreate(),a.observer&&ae.observer||t.update(),t.slideTo(r,0,!1)},addSlide:function(e,t){var a=this,i=a.$wrapperEl,s=a.params,r=a.activeIndex;s.loop&&(r-=a.loopedSlides,a.loopDestroy(),a.slides=i.children("."+s.slideClass));var n=a.slides.length;if(e<=0)a.prependSlide(t);else if(n<=e)a.appendSlide(t);else{for(var o=e<r?r+1:r,l=[],d=n-1;e<=d;--d){var p=a.slides.eq(d);p.remove(),l.unshift(p)}if("object"==typeof t&&"length"in t){for(var c=0;c<t.length;c+=1)t[c]&&i.append(t[c]);o=e<r?r+t.length:r}else i.append(t);for(var u=0;u<l.length;u+=1)i.append(l[u]);s.loop&&a.loopCreate(),s.observer&&ae.observer||a.update(),s.loop?a.slideTo(o+a.loopedSlides,0,!1):a.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=i.children("."+a.slideClass));var r,n=s;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)r=e[o],t.slides[r]&&t.slides.eq(r).remove(),r<n&&--n;n=Math.max(n,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<n&&--n,n=Math.max(n,0);a.loop&&t.loopCreate(),a.observer&&ae.observer||t.update(),a.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},M=(b=ee.navigator.userAgent,w={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:ee.cordova||ee.phonegap,phonegap:ee.cordova||ee.phonegap},y=b.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),x=b.match(/(Android);?[\s\/]+([\d.]+)?/),T=b.match(/(iPad).*OS\s([\d_]+)/),E=b.match(/(iPod)(.*OS\s([\d_]+))?/),S=!T&&b.match(/(iPhone\sOS|iOS)\s([\d_]+)/),y&&(w.os="windows",w.osVersion=y[2],w.windows=!0),x&&!y&&(w.os="android",w.osVersion=x[2],w.android=!0,w.androidChrome=0<=b.toLowerCase().indexOf("chrome")),(T||S||E)&&(w.os="ios",w.ios=!0),S&&!E&&(w.osVersion=S[2].replace(/_/g,"."),w.iphone=!0),T&&(w.osVersion=T[2].replace(/_/g,"."),w.ipad=!0),E&&(w.osVersion=E[3]?E[3].replace(/_/g,"."):null,w.iphone=!0),w.ios&&w.osVersion&&0<=b.indexOf("Version/")&&"10"===w.osVersion.split(".")[0]&&(w.osVersion=b.toLowerCase().split("version/")[1].split(" ")[0]),w.desktop=!(w.os||w.android||w.webView),w.webView=(S||T||E)&&b.match(/.*AppleWebKit(?!.*Safari)/i),w.os&&"ios"===w.os&&(m=w.osVersion.split("."),g=f.querySelector('meta[name="viewport"]'),w.minimalUi=!w.webView&&(E||S)&&(7==+m[0]?1<=+m[1]:7<+m[0])&&g&&0<=g.getAttribute("content").indexOf("minimal-ui")),w.pixelRatio=ee.devicePixelRatio||1,w);function P(){var e,t,a,i,s=this,r=s.params,n=s.el;n&&0===n.offsetWidth||(r.breakpoints&&s.setBreakpoint(),e=s.allowSlideNext,t=s.allowSlidePrev,a=s.snapGrid,s.allowSlideNext=!0,s.allowSlidePrev=!0,s.updateSize(),s.updateSlides(),r.freeMode?(i=Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate()),s.setTranslate(i),s.updateActiveIndex(),s.updateSlidesClasses(),r.autoHeight&&s.updateAutoHeight()):(s.updateSlidesClasses(),("auto"===r.slidesPerView||1<r.slidesPerView)&&s.isEnd&&!s.params.centeredSlides?s.slideTo(s.slides.length-1,0,!1,!0):s.slideTo(s.activeIndex,0,!1,!0)),s.autoplay&&s.autoplay.running&&s.autoplay.paused&&s.autoplay.run(),s.allowSlidePrev=t,s.allowSlideNext=e,s.params.watchOverflow&&a!==s.snapGrid&&s.checkOverflow())}var k={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsInverse:!1,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},z={update:d,translate:p,transition:c,slide:u,loop:h,grabCursor:v,manipulation:C,events:{attachEvents:function(){var e=this,t=e.params,a=e.touchEvents,i=e.el,s=e.wrapperEl;e.onTouchStart=function(e){var t,a,i,s,r,n,o,l=this,d=l.touchEventsData,p=l.params,c=l.touches;l.animating&&p.preventInteractionOnTransition||((t=e).originalEvent&&(t=t.originalEvent),d.isTouchEvent="touchstart"===t.type,!d.isTouchEvent&&"which"in t&&3===t.which||!d.isTouchEvent&&"button"in t&&0<t.button||d.isTouched&&d.isMoved||(p.noSwiping&&I(t.target).closest(p.noSwipingSelector?p.noSwipingSelector:"."+p.noSwipingClass)[0]?l.allowClick=!0:p.swipeHandler&&!I(t).closest(p.swipeHandler)[0]||(c.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,c.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY,a=c.currentX,i=c.currentY,s=p.edgeSwipeDetection||p.iOSEdgeSwipeDetection,r=p.edgeSwipeThreshold||p.iOSEdgeSwipeThreshold,s&&(a<=r||a>=ee.screen.width-r)||(te.extend(d,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),c.startX=a,c.startY=i,d.touchStartTime=te.now(),l.allowClick=!0,l.updateSize(),l.swipeDirection=void 0,0<p.threshold&&(d.allowThresholdMove=!1),"touchstart"!==t.type&&(n=!0,I(t.target).is(d.formElements)&&(n=!1),f.activeElement&&I(f.activeElement).is(d.formElements)&&f.activeElement!==t.target&&f.activeElement.blur(),o=n&&l.allowTouchMove&&p.touchStartPreventDefault,(p.touchStartForcePreventDefault||o)&&t.preventDefault()),l.emit("touchStart",t)))))}.bind(e),e.onTouchMove=function(e){var t=this,a=t.touchEventsData,i=t.params,s=t.touches,r=t.rtlTranslate,n=e;if(n.originalEvent&&(n=n.originalEvent),a.isTouched){if(!a.isTouchEvent||"mousemove"!==n.type){var o="touchmove"===n.type?n.targetTouches[0].pageX:n.pageX,l="touchmove"===n.type?n.targetTouches[0].pageY:n.pageY;if(n.preventedByNestedSwiper)return s.startX=o,void(s.startY=l);if(!t.allowTouchMove)return t.allowClick=!1,void(a.isTouched&&(te.extend(s,{startX:o,startY:l,currentX:o,currentY:l}),a.touchStartTime=te.now()));if(a.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(t.isVertical()){if(l<s.startY&&t.translate<=t.maxTranslate()||l>s.startY&&t.translate>=t.minTranslate())return a.isTouched=!1,void(a.isMoved=!1)}else if(o<s.startX&&t.translate<=t.maxTranslate()||o>s.startX&&t.translate>=t.minTranslate())return;if(a.isTouchEvent&&f.activeElement&&n.target===f.activeElement&&I(n.target).is(a.formElements))return a.isMoved=!0,void(t.allowClick=!1);if(a.allowTouchCallbacks&&t.emit("touchMove",n),!(n.targetTouches&&1<n.targetTouches.length)){s.currentX=o,s.currentY=l;var d,p=s.currentX-s.startX,c=s.currentY-s.startY;if(!(t.params.threshold&&Math.sqrt(Math.pow(p,2)+Math.pow(c,2))<t.params.threshold))if(void 0===a.isScrolling&&(t.isHorizontal()&&s.currentY===s.startY||t.isVertical()&&s.currentX===s.startX?a.isScrolling=!1:25<=p*p+c*c&&(d=180*Math.atan2(Math.abs(c),Math.abs(p))/Math.PI,a.isScrolling=t.isHorizontal()?d>i.touchAngle:90-d>i.touchAngle)),a.isScrolling&&t.emit("touchMoveOpposite",n),void 0===a.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(a.startMoving=!0)),a.isScrolling)a.isTouched=!1;else if(a.startMoving){t.allowClick=!1,n.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&n.stopPropagation(),a.isMoved||(i.loop&&t.loopFix(),a.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),a.allowMomentumBounce=!1,!i.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",n)),t.emit("sliderMove",n),a.isMoved=!0;var u=t.isHorizontal()?p:c;s.diff=u,u*=i.touchRatio,r&&(u=-u),t.swipeDirection=0<u?"prev":"next",a.currentTranslate=u+a.startTranslate;var h=!0,v=i.resistanceRatio;if(i.touchReleaseOnEdges&&(v=0),0<u&&a.currentTranslate>t.minTranslate()?(h=!1,i.resistance&&(a.currentTranslate=t.minTranslate()-1+Math.pow(-t.minTranslate()+a.startTranslate+u,v))):u<0&&a.currentTranslate<t.maxTranslate()&&(h=!1,i.resistance&&(a.currentTranslate=t.maxTranslate()+1-Math.pow(t.maxTranslate()-a.startTranslate-u,v))),h&&(n.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&a.currentTranslate<a.startTranslate&&(a.currentTranslate=a.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&a.currentTranslate>a.startTranslate&&(a.currentTranslate=a.startTranslate),0<i.threshold){if(!(Math.abs(u)>i.threshold||a.allowThresholdMove))return void(a.currentTranslate=a.startTranslate);if(!a.allowThresholdMove)return a.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,a.currentTranslate=a.startTranslate,void(s.diff=t.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}i.followFinger&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),i.freeMode&&(0===a.velocities.length&&a.velocities.push({position:s[t.isHorizontal()?"startX":"startY"],time:a.touchStartTime}),a.velocities.push({position:s[t.isHorizontal()?"currentX":"currentY"],time:te.now()})),t.updateProgress(a.currentTranslate),t.setTranslate(a.currentTranslate))}}}}else a.startMoving&&a.isScrolling&&t.emit("touchMoveOpposite",n)}.bind(e),e.onTouchEnd=function(e){var t=this,a=t.touchEventsData,i=t.params,s=t.touches,r=t.rtlTranslate,n=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),a.allowTouchCallbacks&&t.emit("touchEnd",d),a.allowTouchCallbacks=!1,!a.isTouched)return a.isMoved&&i.grabCursor&&t.setGrabCursor(!1),a.isMoved=!1,void(a.startMoving=!1);i.grabCursor&&a.isMoved&&a.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var p,c,u,h,v,f=te.now(),m=f-a.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap",d),m<300&&300<f-a.lastClickTime&&(a.clickTimeout&&clearTimeout(a.clickTimeout),a.clickTimeout=te.nextTick(function(){t&&!t.destroyed&&t.emit("click",d)},300)),m<300&&f-a.lastClickTime<300&&(a.clickTimeout&&clearTimeout(a.clickTimeout),t.emit("doubleTap",d))),a.lastClickTime=te.now(),te.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!a.isTouched||!a.isMoved||!t.swipeDirection||0===s.diff||a.currentTranslate===a.startTranslate)return a.isTouched=!1,a.isMoved=!1,void(a.startMoving=!1);if(a.isTouched=!1,a.isMoved=!1,a.startMoving=!1,p=i.followFinger?r?t.translate:-t.translate:-a.currentTranslate,i.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){1<a.velocities.length?(c=a.velocities.pop(),u=a.velocities.pop(),h=c.position-u.position,v=c.time-u.time,t.velocity=h/v,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(150<v||300<te.now()-c.time)&&(t.velocity=0)):t.velocity=0,t.velocity*=i.freeModeMomentumVelocityRatio,a.velocities.length=0;var g=1e3*i.freeModeMomentumRatio,b=t.velocity*g,w=t.translate+b;r&&(w=-w);var y,x,T=!1,E=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;if(w<t.maxTranslate())i.freeModeMomentumBounce?(w+t.maxTranslate()<-E&&(w=t.maxTranslate()-E),y=t.maxTranslate(),T=!0,a.allowMomentumBounce=!0):w=t.maxTranslate(),i.loop&&i.centeredSlides&&(x=!0);else if(w>t.minTranslate())i.freeModeMomentumBounce?(w-t.minTranslate()>E&&(w=t.minTranslate()+E),y=t.minTranslate(),T=!0,a.allowMomentumBounce=!0):w=t.minTranslate(),i.loop&&i.centeredSlides&&(x=!0);else if(i.freeModeSticky){for(var S,C=0;C<l.length;C+=1)if(l[C]>-w){S=C;break}w=-(w=Math.abs(l[S]-w)<Math.abs(l[S-1]-w)||"next"===t.swipeDirection?l[S]:l[S-1])}if(x&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)g=r?Math.abs((-w-t.translate)/t.velocity):Math.abs((w-t.translate)/t.velocity);else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&T?(t.updateProgress(y),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating=!0,n.transitionEnd(function(){t&&!t.destroyed&&a.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(i.speed),t.setTranslate(y),n.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(w),t.setTransition(g),t.setTranslate(w),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,n.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(w),t.updateActiveIndex(),t.updateSlidesClasses()}else if(i.freeModeSticky)return void t.slideToClosest();(!i.freeModeMomentum||m>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var M=0,P=t.slidesSizesGrid[0],k=0;k<o.length;k+=i.slidesPerGroup)void 0!==o[k+i.slidesPerGroup]?p>=o[k]&&p<o[k+i.slidesPerGroup]&&(P=o[(M=k)+i.slidesPerGroup]-o[k]):p>=o[k]&&(M=k,P=o[o.length-1]-o[o.length-2]);var z=(p-o[M])/P;if(m>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(z>=i.longSwipesRatio?t.slideTo(M+i.slidesPerGroup):t.slideTo(M)),"prev"===t.swipeDirection&&(z>1-i.longSwipesRatio?t.slideTo(M+i.slidesPerGroup):t.slideTo(M))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo(M+i.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(M)}}}.bind(e),e.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);var r,n="container"===t.touchEventsTarget?i:s,o=!!t.nested;ae.touch||!ae.pointerEvents&&!ae.prefixedPointerEvents?(ae.touch&&(r=!("touchstart"!==a.start||!ae.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1},n.addEventListener(a.start,e.onTouchStart,r),n.addEventListener(a.move,e.onTouchMove,ae.passiveListener?{passive:!1,capture:o}:o),n.addEventListener(a.end,e.onTouchEnd,r)),(t.simulateTouch&&!M.ios&&!M.android||t.simulateTouch&&!ae.touch&&M.ios)&&(n.addEventListener("mousedown",e.onTouchStart,!1),f.addEventListener("mousemove",e.onTouchMove,o),f.addEventListener("mouseup",e.onTouchEnd,!1))):(n.addEventListener(a.start,e.onTouchStart,!1),f.addEventListener(a.move,e.onTouchMove,o),f.addEventListener(a.end,e.onTouchEnd,!1)),(t.preventClicks||t.preventClicksPropagation)&&n.addEventListener("click",e.onClick,!0),e.on(M.ios||M.android?"resize orientationchange observerUpdate":"resize observerUpdate",P,!0)},detachEvents:function(){var e,t=this,a=t.params,i=t.touchEvents,s=t.el,r=t.wrapperEl,n="container"===a.touchEventsTarget?s:r,o=!!a.nested;ae.touch||!ae.pointerEvents&&!ae.prefixedPointerEvents?(ae.touch&&(e=!("onTouchStart"!==i.start||!ae.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1},n.removeEventListener(i.start,t.onTouchStart,e),n.removeEventListener(i.move,t.onTouchMove,o),n.removeEventListener(i.end,t.onTouchEnd,e)),(a.simulateTouch&&!M.ios&&!M.android||a.simulateTouch&&!ae.touch&&M.ios)&&(n.removeEventListener("mousedown",t.onTouchStart,!1),f.removeEventListener("mousemove",t.onTouchMove,o),f.removeEventListener("mouseup",t.onTouchEnd,!1))):(n.removeEventListener(i.start,t.onTouchStart,!1),f.removeEventListener(i.move,t.onTouchMove,o),f.removeEventListener(i.end,t.onTouchEnd,!1)),(a.preventClicks||a.preventClicksPropagation)&&n.removeEventListener("click",t.onClick,!0),t.off(M.ios||M.android?"resize orientationchange observerUpdate":"resize observerUpdate",P)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,a=e.initialized,i=e.loopedSlides;void 0===i&&(i=0);var s,r,n,o,l,d=e.params,p=d.breakpoints;!p||p&&0===Object.keys(p).length||(s=e.getBreakpoint(p))&&e.currentBreakpoint!==s&&((r=s in p?p[s]:void 0)&&["slidesPerView","spaceBetween","slidesPerGroup"].forEach(function(e){var t=r[e];void 0!==t&&(r[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}),o=(n=r||e.originalParams).direction&&n.direction!==d.direction,l=d.loop&&(n.slidesPerView!==d.slidesPerView||o),o&&a&&e.changeDirection(),te.extend(e.params,n),te.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=s,l&&a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-i+e.loopedSlides,0,!1)),e.emit("breakpoint",n))},getBreakpoint:function(e){if(e){var t=!1,a=[];Object.keys(e).forEach(function(e){a.push(e)}),a.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var i=0;i<a.length;i+=1){var s=a[i];this.params.breakpointsInverse?s<=ee.innerWidth&&(t=s):s>=ee.innerWidth&&!t&&(t=s)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,a=this.params,e=this.rtl,i=this.$el,s=[];s.push("initialized"),s.push(a.direction),a.freeMode&&s.push("free-mode"),ae.flexbox||s.push("no-flexbox"),a.autoHeight&&s.push("autoheight"),e&&s.push("rtl"),1<a.slidesPerColumn&&s.push("multirow"),M.android&&s.push("android"),M.ios&&s.push("ios"),(ie.isIE||ie.isEdge)&&(ae.pointerEvents||ae.prefixedPointerEvents)&&s.push("wp8-"+a.direction),s.forEach(function(e){t.push(a.containerModifierClass+e)}),i.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,a,i,s,r){var n;function o(){r&&r()}(!e.complete||!s)&&t?((n=new ee.Image).onload=o,n.onerror=o,i&&(n.sizes=i),a&&(n.srcset=a),t&&(n.src=t)):o()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var a=0;a<e.imagesToLoad.length;a+=1){var i=e.imagesToLoad[a];e.loadImage(i,i.currentSrc||i.getAttribute("src"),i.srcset||i.getAttribute("srcset"),i.sizes||i.getAttribute("sizes"),!0,t)}}}},$={},L=function(c){function u(){for(var s,e=[],t=arguments.length;t--;)e[t]=arguments[t];s=(s=1===e.length&&e[0].constructor&&e[0].constructor===Object?e[0]:(i=e[0],e[1]))||{},s=te.extend({},s),i&&!s.el&&(s.el=i),c.call(this,s),Object.keys(z).forEach(function(t){Object.keys(z[t]).forEach(function(e){u.prototype[e]||(u.prototype[e]=z[t][e])})});var r=this;void 0===r.modules&&(r.modules={}),Object.keys(r.modules).forEach(function(e){var t=r.modules[e];if(t.params){var a=Object.keys(t.params)[0],i=t.params[a];if("object"!=typeof i||null===i)return;if(!(a in s&&"enabled"in i))return;!0===s[a]&&(s[a]={enabled:!0}),"object"!=typeof s[a]||"enabled"in s[a]||(s[a].enabled=!0),s[a]||(s[a]={enabled:!1})}});var a=te.extend({},k);r.useModulesParams(a),r.params=te.extend({},a,$,s),r.originalParams=te.extend({},r.params),r.passedParams=te.extend({},s);var i,n=(r.$=I)(r.params.el);if(i=n[0]){if(1<n.length){var o=[];return n.each(function(e,t){var a=te.extend({},s,{el:t});o.push(new u(a))}),o}i.swiper=r,n.data("swiper",r);var l,d,p=n.children("."+r.params.wrapperClass);return te.extend(r,{$el:n,el:i,$wrapperEl:p,wrapperEl:p[0],classNames:[],slides:I(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===r.params.direction},isVertical:function(){return"vertical"===r.params.direction},rtl:"rtl"===i.dir.toLowerCase()||"rtl"===n.css("direction"),rtlTranslate:"horizontal"===r.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===n.css("direction")),wrongRTL:"-webkit-box"===p.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEvents:(l=["touchstart","touchmove","touchend"],d=["mousedown","mousemove","mouseup"],ae.pointerEvents?d=["pointerdown","pointermove","pointerup"]:ae.prefixedPointerEvents&&(d=["MSPointerDown","MSPointerMove","MSPointerUp"]),r.touchEventsTouch={start:l[0],move:l[1],end:l[2]},r.touchEventsDesktop={start:d[0],move:d[1],end:d[2]},ae.touch||!r.params.simulateTouch?r.touchEventsTouch:r.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:te.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.useModules(),r.params.init&&r.init(),r}}c&&(u.__proto__=c),u.prototype=Object.create(c&&c.prototype);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return(u.prototype.constructor=u).prototype.slidesPerViewDynamic=function(){var e=this,t=e.params,a=e.slides,i=e.slidesGrid,s=e.size,r=e.activeIndex,n=1;if(t.centeredSlides){for(var o,l=a[r].swiperSlideSize,d=r+1;d<a.length;d+=1)a[d]&&!o&&(n+=1,s<(l+=a[d].swiperSlideSize)&&(o=!0));for(var p=r-1;0<=p;--p)a[p]&&!o&&(n+=1,s<(l+=a[p].swiperSlideSize)&&(o=!0))}else for(var c=r+1;c<a.length;c+=1)i[c]-i[r]<s&&(n+=1);return n},u.prototype.update=function(){var e,t,a=this;function i(){var e=a.rtlTranslate?-1*a.translate:a.translate,t=Math.min(Math.max(e,a.maxTranslate()),a.minTranslate());a.setTranslate(t),a.updateActiveIndex(),a.updateSlidesClasses()}a&&!a.destroyed&&(e=a.snapGrid,(t=a.params).breakpoints&&a.setBreakpoint(),a.updateSize(),a.updateSlides(),a.updateProgress(),a.updateSlidesClasses(),a.params.freeMode?(i(),a.params.autoHeight&&a.updateAutoHeight()):(("auto"===a.params.slidesPerView||1<a.params.slidesPerView)&&a.isEnd&&!a.params.centeredSlides?a.slideTo(a.slides.length-1,0,!1,!0):a.slideTo(a.activeIndex,0,!1,!0))||i(),t.watchOverflow&&e!==a.snapGrid&&a.checkOverflow(),a.emit("update"))},u.prototype.changeDirection=function(a,e){void 0===e&&(e=!0);var t=this,i=t.params.direction;return(a=a||("horizontal"===i?"vertical":"horizontal"))===i||"horizontal"!==a&&"vertical"!==a||(t.$el.removeClass(""+t.params.containerModifierClass+i+" wp8-"+i).addClass(""+t.params.containerModifierClass+a),(ie.isIE||ie.isEdge)&&(ae.pointerEvents||ae.prefixedPointerEvents)&&t.$el.addClass(t.params.containerModifierClass+"wp8-"+a),t.params.direction=a,t.slides.each(function(e,t){"vertical"===a?t.style.width="":t.style.height=""}),t.emit("changeDirection"),e&&t.update()),t},u.prototype.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))},u.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var a=this,i=a.params,s=a.$el,r=a.$wrapperEl,n=a.slides;return void 0===a.params||a.destroyed||(a.emit("beforeDestroy"),a.initialized=!1,a.detachEvents(),i.loop&&a.loopDestroy(),t&&(a.removeClasses(),s.removeAttr("style"),r.removeAttr("style"),n&&n.length&&n.removeClass([i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),a.emit("destroy"),Object.keys(a.eventsListeners).forEach(function(e){a.off(e)}),!1!==e&&(a.$el[0].swiper=null,a.$el.data("swiper",null),te.deleteProps(a)),a.destroyed=!0),null},u.extendDefaults=function(e){te.extend($,e)},e.extendedDefaults.get=function(){return $},e.defaults.get=function(){return k},e.Class.get=function(){return c},e.$.get=function(){return I},Object.defineProperties(u,e),u}(e),D={name:"device",proto:{device:M},static:{device:M}},O={name:"support",proto:{support:ae},static:{support:ae}},A={name:"browser",proto:{browser:ie},static:{browser:ie}},H={name:"resize",create:function(){var e=this;te.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){ee.addEventListener("resize",this.resize.resizeHandler),ee.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){ee.removeEventListener("resize",this.resize.resizeHandler),ee.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},G={func:ee.MutationObserver||ee.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var a=this,i=new G.func(function(e){var t;1!==e.length?(t=function(){a.emit("observerUpdate",e[0])},ee.requestAnimationFrame?ee.requestAnimationFrame(t):ee.setTimeout(t,0)):a.emit("observerUpdate",e[0])});i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),a.observer.observers.push(i)},init:function(){var e=this;if(ae.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),a=0;a<t.length;a+=1)e.observer.attach(t[a]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},N={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){te.extend(this,{observer:{init:G.init.bind(this),attach:G.attach.bind(this),destroy:G.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},B={update:function(e){var t=this,a=t.params,i=a.slidesPerView,s=a.slidesPerGroup,r=a.centeredSlides,n=t.params.virtual,o=n.addSlidesBefore,l=n.addSlidesAfter,d=t.virtual,p=d.from,c=d.to,u=d.slides,h=d.slidesGrid,v=d.renderSlide,f=d.offset;t.updateActiveIndex();var m,g=t.activeIndex||0,b=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",w=r?(m=Math.floor(i/2)+s+o,Math.floor(i/2)+s+l):(m=i+(s-1)+o,s+l),y=Math.max((g||0)-w,0),x=Math.min((g||0)+m,u.length-1),T=(t.slidesGrid[y]||0)-(t.slidesGrid[0]||0);function E(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(te.extend(t.virtual,{from:y,to:x,offset:T,slidesGrid:t.slidesGrid}),p===y&&c===x&&!e)return t.slidesGrid!==h&&T!==f&&t.slides.css(b,T+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:T,from:y,to:x,slides:function(){for(var e=[],t=y;t<=x;t+=1)e.push(u[t]);return e}()}),void E();var S=[],C=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var M=p;M<=c;M+=1)(M<y||x<M)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+M+'"]').remove();for(var P=0;P<u.length;P+=1)y<=P&&P<=x&&(void 0===c||e?C.push(P):(c<P&&C.push(P),P<p&&S.push(P)));C.forEach(function(e){t.$wrapperEl.append(v(u[e],e))}),S.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(v(u[e],e))}),t.$wrapperEl.children(".swiper-slide").css(b,T+"px"),E()},renderSlide:function(e,t){var a=this,i=a.params.virtual;if(i.cache&&a.virtual.cache[t])return a.virtual.cache[t];var s=i.renderSlide?I(i.renderSlide.call(a,e,t)):I('<div class="'+a.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",t),i.cache&&(a.virtual.cache[t]=s),s},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var t,a,i=this,s=i.activeIndex,r=s+1,n=1;if(Array.isArray(e)){for(var o=0;o<e.length;o+=1)e[o]&&i.virtual.slides.unshift(e[o]);r=s+e.length,n=e.length}else i.virtual.slides.unshift(e);i.params.virtual.cache&&(t=i.virtual.cache,a={},Object.keys(t).forEach(function(e){a[parseInt(e,10)+n]=t[e]}),i.virtual.cache=a),i.virtual.update(!0),i.slideTo(r,0)},removeSlide:function(e){var t=this;if(null!=e){var a=t.activeIndex;if(Array.isArray(e))for(var i=e.length-1;0<=i;--i)t.virtual.slides.splice(e[i],1),t.params.virtual.cache&&delete t.virtual.cache[e[i]],e[i]<a&&--a,a=Math.max(a,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<a&&--a,a=Math.max(a,0);t.virtual.update(!0),t.slideTo(a,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},X={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){var e=this;te.extend(e,{virtual:{update:B.update.bind(e),appendSlide:B.appendSlide.bind(e),prependSlide:B.prependSlide.bind(e),removeSlide:B.removeSlide.bind(e),removeAllSlides:B.removeAllSlides.bind(e),renderSlide:B.renderSlide.bind(e),slides:e.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e,t=this;t.params.virtual.enabled&&(t.classNames.push(t.params.containerModifierClass+"virtual"),e={watchSlidesProgress:!0},te.extend(t.params,e),te.extend(t.originalParams,e),t.params.initialSlide||t.virtual.update())},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},V={handle:function(e){var t=this,a=t.rtlTranslate,i=e;i.originalEvent&&(i=i.originalEvent);var s=i.keyCode||i.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===s||t.isVertical()&&40===s||34===s))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===s||t.isVertical()&&38===s||33===s))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||f.activeElement&&f.activeElement.nodeName&&("input"===f.activeElement.nodeName.toLowerCase()||"textarea"===f.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(33===s||34===s||37===s||39===s||38===s||40===s)){var r=!1;if(0<t.$el.parents("."+t.params.slideClass).length&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var n=ee.innerWidth,o=ee.innerHeight,l=t.$el.offset();a&&(l.left-=t.$el[0].scrollLeft);for(var d=[[l.left,l.top],[l.left+t.width,l.top],[l.left,l.top+t.height],[l.left+t.width,l.top+t.height]],p=0;p<d.length;p+=1){var c=d[p];0<=c[0]&&c[0]<=n&&0<=c[1]&&c[1]<=o&&(r=!0)}if(!r)return}t.isHorizontal()?(33!==s&&34!==s&&37!==s&&39!==s||(i.preventDefault?i.preventDefault():i.returnValue=!1),(34!==s&&39!==s||a)&&(33!==s&&37!==s||!a)||t.slideNext(),(33!==s&&37!==s||a)&&(34!==s&&39!==s||!a)||t.slidePrev()):(33!==s&&34!==s&&38!==s&&40!==s||(i.preventDefault?i.preventDefault():i.returnValue=!1),34!==s&&40!==s||t.slideNext(),33!==s&&38!==s||t.slidePrev()),t.emit("keyPress",s)}},enable:function(){this.keyboard.enabled||(I(f).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(I(f).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},Y={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){te.extend(this,{keyboard:{enabled:!1,enable:V.enable.bind(this),disable:V.disable.bind(this),handle:V.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}};var F,R,q,W={lastScrollTime:te.now(),event:-1<ee.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":((q=(R="onwheel")in f)||((F=f.createElement("div")).setAttribute(R,"return;"),q="function"==typeof F[R]),!q&&f.implementation&&f.implementation.hasFeature&&!0!==f.implementation.hasFeature("","")&&(q=f.implementation.hasFeature("Events.wheel","3.0")),q?"wheel":"mousewheel"),normalize:function(e){var t=0,a=0,i=0,s=0;return"detail"in e&&(a=e.detail),"wheelDelta"in e&&(a=-e.wheelDelta/120),"wheelDeltaY"in e&&(a=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=a,a=0),i=10*t,s=10*a,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(i=e.deltaX),(i||s)&&e.deltaMode&&(1===e.deltaMode?(i*=40,s*=40):(i*=800,s*=800)),i&&!t&&(t=i<1?-1:1),s&&!a&&(a=s<1?-1:1),{spinX:t,spinY:a,pixelX:i,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,a=this,i=a.params.mousewheel;if(!a.mouseEntered&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var s=0,r=a.rtlTranslate?-1:1,n=W.normalize(t);if(i.forceToAxis)if(a.isHorizontal()){if(!(Math.abs(n.pixelX)>Math.abs(n.pixelY)))return!0;s=n.pixelX*r}else{if(!(Math.abs(n.pixelY)>Math.abs(n.pixelX)))return!0;s=n.pixelY}else s=Math.abs(n.pixelX)>Math.abs(n.pixelY)?-n.pixelX*r:-n.pixelY;if(0===s)return!0;if(i.invert&&(s=-s),a.params.freeMode){a.params.loop&&a.loopFix();var o=a.getTranslate()+s*i.sensitivity,l=a.isBeginning,d=a.isEnd;if(o>=a.minTranslate()&&(o=a.minTranslate()),o<=a.maxTranslate()&&(o=a.maxTranslate()),a.setTransition(0),a.setTranslate(o),a.updateProgress(),a.updateActiveIndex(),a.updateSlidesClasses(),(!l&&a.isBeginning||!d&&a.isEnd)&&a.updateSlidesClasses(),a.params.freeModeSticky&&(clearTimeout(a.mousewheel.timeout),a.mousewheel.timeout=te.nextTick(function(){a.slideToClosest()},300)),a.emit("scroll",t),a.params.autoplay&&a.params.autoplayDisableOnInteraction&&a.autoplay.stop(),o===a.minTranslate()||o===a.maxTranslate())return!0}else{if(60<te.now()-a.mousewheel.lastScrollTime)if(s<0)if(a.isEnd&&!a.params.loop||a.animating){if(i.releaseOnEdges)return!0}else a.slideNext(),a.emit("scroll",t);else if(a.isBeginning&&!a.params.loop||a.animating){if(i.releaseOnEdges)return!0}else a.slidePrev(),a.emit("scroll",t);a.mousewheel.lastScrollTime=(new ee.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable:function(){var e=this;if(!W.event)return!1;if(e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=I(e.params.mousewheel.eventsTarged)),t.on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on(W.event,e.mousewheel.handle),e.mousewheel.enabled=!0},disable:function(){var e=this;if(!W.event)return!1;if(!e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=I(e.params.mousewheel.eventsTarged)),t.off(W.event,e.mousewheel.handle),!(e.mousewheel.enabled=!1)}},j={update:function(){var e,t,a,i=this,s=i.params.navigation;i.params.loop||(t=(e=i.navigation).$nextEl,(a=e.$prevEl)&&0<a.length&&(i.isBeginning?a.addClass(s.disabledClass):a.removeClass(s.disabledClass),a[i.params.watchOverflow&&i.isLocked?"addClass":"removeClass"](s.lockClass)),t&&0<t.length&&(i.isEnd?t.addClass(s.disabledClass):t.removeClass(s.disabledClass),t[i.params.watchOverflow&&i.isLocked?"addClass":"removeClass"](s.lockClass)))},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,a=this,i=a.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=I(i.nextEl),a.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<e.length&&1===a.$el.find(i.nextEl).length&&(e=a.$el.find(i.nextEl))),i.prevEl&&(t=I(i.prevEl),a.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<t.length&&1===a.$el.find(i.prevEl).length&&(t=a.$el.find(i.prevEl))),e&&0<e.length&&e.on("click",a.navigation.onNextClick),t&&0<t.length&&t.on("click",a.navigation.onPrevClick),te.extend(a.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,a=t.$nextEl,i=t.$prevEl;a&&a.length&&(a.off("click",e.navigation.onNextClick),a.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off("click",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}},U={update:function(){var e=this,t=e.rtl,s=e.params.pagination;if(s.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var r,a,i,n,o,l=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,d=e.pagination.$el,p=e.params.loop?Math.ceil((l-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((r=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>l-1-2*e.loopedSlides&&(r-=l-2*e.loopedSlides),p-1<r&&(r-=p),r<0&&"bullets"!==e.params.paginationType&&(r=p+r)):r=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===s.type&&e.pagination.bullets&&0<e.pagination.bullets.length){var c,u,h,v,f,m,g=e.pagination.bullets;if(s.dynamicBullets&&(e.pagination.bulletSize=g.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),d.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(s.dynamicMainBullets+4)+"px"),1<s.dynamicMainBullets&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=r-e.previousIndex,e.pagination.dynamicBulletIndex>s.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=s.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),c=r-e.pagination.dynamicBulletIndex,h=((u=c+(Math.min(g.length,s.dynamicMainBullets)-1))+c)/2),g.removeClass(s.bulletActiveClass+" "+s.bulletActiveClass+"-next "+s.bulletActiveClass+"-next-next "+s.bulletActiveClass+"-prev "+s.bulletActiveClass+"-prev-prev "+s.bulletActiveClass+"-main"),1<d.length)g.each(function(e,t){var a=I(t),i=a.index();i===r&&a.addClass(s.bulletActiveClass),s.dynamicBullets&&(c<=i&&i<=u&&a.addClass(s.bulletActiveClass+"-main"),i===c&&a.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),i===u&&a.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next"))});else if(g.eq(r).addClass(s.bulletActiveClass),s.dynamicBullets){for(var b=g.eq(c),w=g.eq(u),y=c;y<=u;y+=1)g.eq(y).addClass(s.bulletActiveClass+"-main");b.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),w.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next")}s.dynamicBullets&&(v=Math.min(g.length,s.dynamicMainBullets+4),f=(e.pagination.bulletSize*v-e.pagination.bulletSize)/2-h*e.pagination.bulletSize,m=t?"right":"left",g.css(e.isHorizontal()?m:"top",f+"px"))}"fraction"===s.type&&(d.find("."+s.currentClass).text(s.formatFractionCurrent(r+1)),d.find("."+s.totalClass).text(s.formatFractionTotal(p))),"progressbar"===s.type&&(a=s.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical",i=(r+1)/p,o=n=1,"horizontal"===a?n=i:o=i,d.find("."+s.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+n+") scaleY("+o+")").transition(e.params.speed)),"custom"===s.type&&s.renderCustom?(d.html(s.renderCustom(e,r+1,p)),e.emit("paginationRender",e,d[0])):e.emit("paginationUpdate",e,d[0]),d[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](s.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,s="";if("bullets"===t.type){for(var r=e.params.loop?Math.ceil((a-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,n=0;n<r;n+=1)t.renderBullet?s+=t.renderBullet.call(e,n,t.bulletClass):s+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";i.html(s),e.pagination.bullets=i.find("."+t.bulletClass)}"fraction"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',i.html(s)),"progressbar"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',i.html(s)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e,a=this,t=a.params.pagination;!t.el||0!==(e=I(t.el)).length&&(a.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&1===a.$el.find(t.el).length&&(e=a.$el.find(t.el)),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(e.addClass(""+t.modifierClass+t.type+"-dynamic"),a.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click","."+t.bulletClass,function(e){e.preventDefault();var t=I(this).index()*a.params.slidesPerGroup;a.params.loop&&(t+=a.loopedSlides),a.slideTo(t)}),te.extend(a.pagination,{$el:e,el:e[0]}))},destroy:function(){var e,t=this,a=t.params.pagination;a.el&&t.pagination.el&&t.pagination.$el&&0!==t.pagination.$el.length&&((e=t.pagination.$el).removeClass(a.hiddenClass),e.removeClass(a.modifierClass+a.type),t.pagination.bullets&&t.pagination.bullets.removeClass(a.bulletActiveClass),a.clickable&&e.off("click","."+a.bulletClass))}},K={setTranslate:function(){var e,t,a,i,s,r,n,o,l,d,p=this;p.params.scrollbar.el&&p.scrollbar.el&&(e=p.scrollbar,t=p.rtlTranslate,a=p.progress,i=e.dragSize,s=e.trackSize,r=e.$dragEl,n=e.$el,o=p.params.scrollbar,d=(s-(l=i))*a,t?0<(d=-d)?(l=i-d,d=0):s<-d+i&&(l=s+d):d<0?(l=i+d,d=0):s<d+i&&(l=s-d),p.isHorizontal()?(ae.transforms3d?r.transform("translate3d("+d+"px, 0, 0)"):r.transform("translateX("+d+"px)"),r[0].style.width=l+"px"):(ae.transforms3d?r.transform("translate3d(0px, "+d+"px, 0)"):r.transform("translateY("+d+"px)"),r[0].style.height=l+"px"),o.hide&&(clearTimeout(p.scrollbar.timeout),n[0].style.opacity=1,p.scrollbar.timeout=setTimeout(function(){n[0].style.opacity=0,n.transition(400)},1e3)))},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e,t,a,i,s,r,n,o=this;o.params.scrollbar.el&&o.scrollbar.el&&(t=(e=o.scrollbar).$dragEl,a=e.$el,t[0].style.width="",t[0].style.height="",i=o.isHorizontal()?a[0].offsetWidth:a[0].offsetHeight,r=(s=o.size/o.virtualSize)*(i/o.size),n="auto"===o.params.scrollbar.dragSize?i*s:parseInt(o.params.scrollbar.dragSize,10),o.isHorizontal()?t[0].style.width=n+"px":t[0].style.height=n+"px",a[0].style.display=1<=s?"none":"",o.params.scrollbar.hide&&(a[0].style.opacity=0),te.extend(e,{trackSize:i,divider:s,moveDivider:r,dragSize:n}),e.$el[o.params.watchOverflow&&o.isLocked?"addClass":"removeClass"](o.params.scrollbar.lockClass))},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY},setDragPosition:function(e){var t=this,a=t.scrollbar,i=t.rtlTranslate,s=a.$el,r=a.dragSize,n=a.trackSize,o=a.dragStartPos,l=(a.getPointerPosition(e)-s.offset()[t.isHorizontal()?"left":"top"]-(null!==o?o:r/2))/(n-r);l=Math.max(Math.min(l,1),0),i&&(l=1-l);var d=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*l;t.updateProgress(d),t.setTranslate(d),t.updateActiveIndex(),t.updateSlidesClasses()},onDragStart:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar,s=t.$wrapperEl,r=i.$el,n=i.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===n[0]||e.target===n?i.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),n.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),r.transition(0),a.hide&&r.css("opacity",1),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,a=this.$wrapperEl,i=t.$el,s=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),a.transition(0),i.transition(0),s.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,a.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=te.nextTick(function(){i.css("opacity",0),i.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),a.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e,t,a,i,s,r,n,o=this;o.params.scrollbar.el&&(e=o.scrollbar,t=o.touchEventsTouch,a=o.touchEventsDesktop,i=o.params,s=e.$el[0],r=!(!ae.passiveListener||!i.passiveListeners)&&{passive:!1,capture:!1},n=!(!ae.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1},ae.touch?(s.addEventListener(t.start,o.scrollbar.onDragStart,r),s.addEventListener(t.move,o.scrollbar.onDragMove,r),s.addEventListener(t.end,o.scrollbar.onDragEnd,n)):(s.addEventListener(a.start,o.scrollbar.onDragStart,r),f.addEventListener(a.move,o.scrollbar.onDragMove,r),f.addEventListener(a.end,o.scrollbar.onDragEnd,n)))},disableDraggable:function(){var e,t,a,i,s,r,n,o=this;o.params.scrollbar.el&&(e=o.scrollbar,t=o.touchEventsTouch,a=o.touchEventsDesktop,i=o.params,s=e.$el[0],r=!(!ae.passiveListener||!i.passiveListeners)&&{passive:!1,capture:!1},n=!(!ae.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1},ae.touch?(s.removeEventListener(t.start,o.scrollbar.onDragStart,r),s.removeEventListener(t.move,o.scrollbar.onDragMove,r),s.removeEventListener(t.end,o.scrollbar.onDragEnd,n)):(s.removeEventListener(a.start,o.scrollbar.onDragStart,r),f.removeEventListener(a.move,o.scrollbar.onDragMove,r),f.removeEventListener(a.end,o.scrollbar.onDragEnd,n)))},init:function(){var e,t,a,i,s,r=this;r.params.scrollbar.el&&(e=r.scrollbar,t=r.$el,i=I((a=r.params.scrollbar).el),r.params.uniqueNavElements&&"string"==typeof a.el&&1<i.length&&1===t.find(a.el).length&&(i=t.find(a.el)),0===(s=i.find("."+r.params.scrollbar.dragClass)).length&&(s=I('<div class="'+r.params.scrollbar.dragClass+'"></div>'),i.append(s)),te.extend(e,{$el:i,el:i[0],$dragEl:s,dragEl:s[0]}),a.draggable&&e.enableDraggable())},destroy:function(){this.scrollbar.disableDraggable()}},_={setTransform:function(e,t){var a,i,s=this.rtl,r=I(e),n=s?-1:1,o=r.attr("data-swiper-parallax")||"0",l=r.attr("data-swiper-parallax-x"),d=r.attr("data-swiper-parallax-y"),p=r.attr("data-swiper-parallax-scale"),c=r.attr("data-swiper-parallax-opacity");l||d?(l=l||"0",d=d||"0"):this.isHorizontal()?(l=o,d="0"):(d=o,l="0"),l=0<=l.indexOf("%")?parseInt(l,10)*t*n+"%":l*t*n+"px",d=0<=d.indexOf("%")?parseInt(d,10)*t+"%":d*t+"px",null!=c&&(a=c-(c-1)*(1-Math.abs(t)),r[0].style.opacity=a),null==p?r.transform("translate3d("+l+", "+d+", 0px)"):(i=p-(p-1)*(1-Math.abs(t)),r.transform("translate3d("+l+", "+d+", 0px) scale("+i+")"))},setTranslate:function(){var i=this,e=i.$el,t=i.slides,s=i.progress,r=i.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){i.parallax.setTransform(t,s)}),t.each(function(e,t){var a=t.progress;1<i.params.slidesPerGroup&&"auto"!==i.params.slidesPerView&&(a+=Math.ceil(e/2)-s*(r.length-1)),a=Math.min(Math.max(a,-1),1),I(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){i.parallax.setTransform(t,a)})})},setTransition:function(s){void 0===s&&(s=this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){var a=I(t),i=parseInt(a.attr("data-swiper-parallax-duration"),10)||s;0===s&&(i=0),a.transition(i)})}},Z={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(s-a,2))},onGestureStart:function(e){var t=this,a=t.params.zoom,i=t.zoom,s=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!ae.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,s.scaleStart=Z.getDistanceBetweenTouches(e)}s.$slideEl&&s.$slideEl.length||(s.$slideEl=I(e.target).closest(".swiper-slide"),0===s.$slideEl.length&&(s.$slideEl=t.slides.eq(t.activeIndex)),s.$imageEl=s.$slideEl.find("img, svg, canvas"),s.$imageWrapEl=s.$imageEl.parent("."+a.containerClass),s.maxRatio=s.$imageWrapEl.attr("data-swiper-zoom")||a.maxRatio,0!==s.$imageWrapEl.length)?(s.$imageEl.transition(0),t.zoom.isScaling=!0):s.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,a=this.zoom,i=a.gesture;if(!ae.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;a.fakeGestureMoved=!0,i.scaleMove=Z.getDistanceBetweenTouches(e)}i.$imageEl&&0!==i.$imageEl.length&&(ae.gestures?a.scale=e.scale*a.currentScale:a.scale=i.scaleMove/i.scaleStart*a.currentScale,a.scale>i.maxRatio&&(a.scale=i.maxRatio-1+Math.pow(a.scale-i.maxRatio+1,.5)),a.scale<t.minRatio&&(a.scale=t.minRatio+1-Math.pow(t.minRatio-a.scale+1,.5)),i.$imageEl.transform("translate3d(0,0,0) scale("+a.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,a=this.zoom,i=a.gesture;if(!ae.gestures){if(!a.fakeGestureTouched||!a.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!M.android)return;a.fakeGestureTouched=!1,a.fakeGestureMoved=!1}i.$imageEl&&0!==i.$imageEl.length&&(a.scale=Math.max(Math.min(a.scale,i.maxRatio),t.minRatio),i.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+a.scale+")"),a.currentScale=a.scale,a.isScaling=!1,1===a.scale&&(i.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,a=t.gesture,i=t.image;a.$imageEl&&0!==a.$imageEl.length&&(i.isTouched||(M.android&&e.preventDefault(),i.isTouched=!0,i.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,i.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,a=t.zoom,i=a.gesture,s=a.image,r=a.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(t.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=te.getTranslate(i.$imageWrapEl[0],"x")||0,s.startY=te.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var n=s.width*a.scale,o=s.height*a.scale;if(!(n<i.slideWidth&&o<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-n/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-o/2,0),s.maxY=-s.minY,s.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!a.isScaling){if(t.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),r.prevPositionX||(r.prevPositionX=s.touchesCurrent.x),r.prevPositionY||(r.prevPositionY=s.touchesCurrent.y),r.prevTime||(r.prevTime=Date.now()),r.x=(s.touchesCurrent.x-r.prevPositionX)/(Date.now()-r.prevTime)/2,r.y=(s.touchesCurrent.y-r.prevPositionY)/(Date.now()-r.prevTime)/2,Math.abs(s.touchesCurrent.x-r.prevPositionX)<2&&(r.x=0),Math.abs(s.touchesCurrent.y-r.prevPositionY)<2&&(r.y=0),r.prevPositionX=s.touchesCurrent.x,r.prevPositionY=s.touchesCurrent.y,r.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+s.currentX+"px, "+s.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,a=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!a.isTouched||!a.isMoved)return a.isTouched=!1,void(a.isMoved=!1);a.isTouched=!1,a.isMoved=!1;var s=300,r=300,n=i.x*s,o=a.currentX+n,l=i.y*r,d=a.currentY+l;0!==i.x&&(s=Math.abs((o-a.currentX)/i.x)),0!==i.y&&(r=Math.abs((d-a.currentY)/i.y));var p=Math.max(s,r);a.currentX=o,a.currentY=d;var c=a.width*e.scale,u=a.height*e.scale;a.minX=Math.min(t.slideWidth/2-c/2,0),a.maxX=-a.minX,a.minY=Math.min(t.slideHeight/2-u/2,0),a.maxY=-a.minY,a.currentX=Math.max(Math.min(a.currentX,a.maxX),a.minX),a.currentY=Math.max(Math.min(a.currentY,a.maxY),a.minY),t.$imageWrapEl.transition(p).transform("translate3d("+a.currentX+"px, "+a.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,a,i,s,r,n,o,l,d,p,c,u,h,v,f,m,g=this,b=g.zoom,w=g.params.zoom,y=b.gesture,x=b.image;y.$slideEl||(y.$slideEl=g.clickedSlide?I(g.clickedSlide):g.slides.eq(g.activeIndex),y.$imageEl=y.$slideEl.find("img, svg, canvas"),y.$imageWrapEl=y.$imageEl.parent("."+w.containerClass)),y.$imageEl&&0!==y.$imageEl.length&&(y.$slideEl.addClass(""+w.zoomedSlideClass),a=void 0===x.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=x.touchesStart.x,x.touchesStart.y),b.scale=y.$imageWrapEl.attr("data-swiper-zoom")||w.maxRatio,b.currentScale=y.$imageWrapEl.attr("data-swiper-zoom")||w.maxRatio,e?(f=y.$slideEl[0].offsetWidth,m=y.$slideEl[0].offsetHeight,i=y.$slideEl.offset().left+f/2-t,s=y.$slideEl.offset().top+m/2-a,o=y.$imageEl[0].offsetWidth,l=y.$imageEl[0].offsetHeight,d=o*b.scale,p=l*b.scale,h=-(c=Math.min(f/2-d/2,0)),v=-(u=Math.min(m/2-p/2,0)),(r=i*b.scale)<c&&(r=c),h<r&&(r=h),(n=s*b.scale)<u&&(n=u),v<n&&(n=v)):n=r=0,y.$imageWrapEl.transition(300).transform("translate3d("+r+"px, "+n+"px,0)"),y.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+b.scale+")"))},out:function(){var e=this,t=e.zoom,a=e.params.zoom,i=t.gesture;i.$slideEl||(i.$slideEl=e.clickedSlide?I(e.clickedSlide):e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas"),i.$imageWrapEl=i.$imageEl.parent("."+a.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+a.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e,t=this,a=t.zoom;a.enabled||(a.enabled=!0,e=!("touchstart"!==t.touchEvents.start||!ae.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1},ae.gestures?(t.$wrapperEl.on("gesturestart",".swiper-slide",a.onGestureStart,e),t.$wrapperEl.on("gesturechange",".swiper-slide",a.onGestureChange,e),t.$wrapperEl.on("gestureend",".swiper-slide",a.onGestureEnd,e)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.on(t.touchEvents.start,".swiper-slide",a.onGestureStart,e),t.$wrapperEl.on(t.touchEvents.move,".swiper-slide",a.onGestureChange,e),t.$wrapperEl.on(t.touchEvents.end,".swiper-slide",a.onGestureEnd,e)),t.$wrapperEl.on(t.touchEvents.move,"."+t.params.zoom.containerClass,a.onTouchMove))},disable:function(){var e,t=this,a=t.zoom;a.enabled&&(t.zoom.enabled=!1,e=!("touchstart"!==t.touchEvents.start||!ae.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1},ae.gestures?(t.$wrapperEl.off("gesturestart",".swiper-slide",a.onGestureStart,e),t.$wrapperEl.off("gesturechange",".swiper-slide",a.onGestureChange,e),t.$wrapperEl.off("gestureend",".swiper-slide",a.onGestureEnd,e)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.off(t.touchEvents.start,".swiper-slide",a.onGestureStart,e),t.$wrapperEl.off(t.touchEvents.move,".swiper-slide",a.onGestureChange,e),t.$wrapperEl.off(t.touchEvents.end,".swiper-slide",a.onGestureEnd,e)),t.$wrapperEl.off(t.touchEvents.move,"."+t.params.zoom.containerClass,a.onTouchMove))}},Q={loadInSlide:function(e,l){void 0===l&&(l=!0);var d,t,p=this,c=p.params.lazy;void 0!==e&&0!==p.slides.length&&(t=(d=p.virtual&&p.params.virtual.enabled?p.$wrapperEl.children("."+p.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):p.slides.eq(e)).find("."+c.elementClass+":not(."+c.loadedClass+"):not(."+c.loadingClass+")"),!d.hasClass(c.elementClass)||d.hasClass(c.loadedClass)||d.hasClass(c.loadingClass)||(t=t.add(d[0])),0!==t.length&&t.each(function(e,t){var i=I(t);i.addClass(c.loadingClass);var s=i.attr("data-background"),r=i.attr("data-src"),n=i.attr("data-srcset"),o=i.attr("data-sizes");p.loadImage(i[0],r||s,n,o,!1,function(){var e,t,a;null==p||!p||p&&!p.params||p.destroyed||(s?(i.css("background-image",'url("'+s+'")'),i.removeAttr("data-background")):(n&&(i.attr("srcset",n),i.removeAttr("data-srcset")),o&&(i.attr("sizes",o),i.removeAttr("data-sizes")),r&&(i.attr("src",r),i.removeAttr("data-src"))),i.addClass(c.loadedClass).removeClass(c.loadingClass),d.find("."+c.preloaderClass).remove(),p.params.loop&&l&&(e=d.attr("data-swiper-slide-index"),d.hasClass(p.params.slideDuplicateClass)?(t=p.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+p.params.slideDuplicateClass+")"),p.lazy.loadInSlide(t.index(),!1)):(a=p.$wrapperEl.children("."+p.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]'),p.lazy.loadInSlide(a.index(),!1))),p.emit("lazyImageReady",d[0],i[0]))}),p.emit("lazyImageLoad",d[0],i[0])}))},load:function(){var i=this,t=i.$wrapperEl,a=i.params,s=i.slides,e=i.activeIndex,r=i.virtual&&a.virtual.enabled,n=a.lazy,o=a.slidesPerView;function l(e){if(r){if(t.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(s[e])return 1}function d(e){return r?I(e).attr("data-swiper-slide-index"):I(e).index()}if("auto"===o&&(o=0),i.lazy.initialImageLoaded||(i.lazy.initialImageLoaded=!0),i.params.watchSlidesVisibility)t.children("."+a.slideVisibleClass).each(function(e,t){var a=r?I(t).attr("data-swiper-slide-index"):I(t).index();i.lazy.loadInSlide(a)});else if(1<o)for(var p=e;p<e+o;p+=1)l(p)&&i.lazy.loadInSlide(p);else i.lazy.loadInSlide(e);if(n.loadPrevNext)if(1<o||n.loadPrevNextAmount&&1<n.loadPrevNextAmount){for(var c=n.loadPrevNextAmount,u=o,h=Math.min(e+u+Math.max(c,u),s.length),v=Math.max(e-Math.max(u,c),0),f=e+o;f<h;f+=1)l(f)&&i.lazy.loadInSlide(f);for(var m=v;m<e;m+=1)l(m)&&i.lazy.loadInSlide(m)}else{var g=t.children("."+a.slideNextClass);0<g.length&&i.lazy.loadInSlide(d(g));var b=t.children("."+a.slidePrevClass);0<b.length&&i.lazy.loadInSlide(d(b))}}},J={LinearSpline:function(e,t){var a,i,s,r,n,o=function(e,t){for(i=-1,a=e.length;1<a-i;)e[s=a+i>>1]<=t?i=s:a=s;return a};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(n=o(this.x,e),r=n-1,(e-this.x[r])*(this.y[n]-this.y[r])/(this.x[n]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new J.LinearSpline(t.slidesGrid,e.slidesGrid):new J.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var a,i,s=this,r=s.controller.control;function n(e){var t=s.rtlTranslate?-s.translate:s.translate;"slide"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),i=-s.controller.spline.interpolate(-t)),i&&"container"!==s.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),i=(t-s.minTranslate())*a+e.minTranslate()),s.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var o=0;o<r.length;o+=1)r[o]!==t&&r[o]instanceof L&&n(r[o]);else r instanceof L&&t!==r&&n(r)},setTransition:function(t,e){var a,i=this,s=i.controller.control;function r(e){e.setTransition(t,i),0!==t&&(e.transitionStart(),e.params.autoHeight&&te.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){s&&(e.params.loop&&"slide"===i.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(a=0;a<s.length;a+=1)s[a]!==e&&s[a]instanceof L&&r(s[a]);else s instanceof L&&e!==s&&r(s)}},se={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t,a=this,i=a.params.a11y;13===e.keyCode&&(t=I(e.target),a.navigation&&a.navigation.$nextEl&&t.is(a.navigation.$nextEl)&&(a.isEnd&&!a.params.loop||a.slideNext(),a.isEnd?a.a11y.notify(i.lastSlideMessage):a.a11y.notify(i.nextSlideMessage)),a.navigation&&a.navigation.$prevEl&&t.is(a.navigation.$prevEl)&&(a.isBeginning&&!a.params.loop||a.slidePrev(),a.isBeginning?a.a11y.notify(i.firstSlideMessage):a.a11y.notify(i.prevSlideMessage)),a.pagination&&t.is("."+a.params.pagination.bulletClass)&&t[0].click())},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e,t,a,i=this;i.params.loop||(t=(e=i.navigation).$nextEl,(a=e.$prevEl)&&0<a.length&&(i.isBeginning?i.a11y.disableEl(a):i.a11y.enableEl(a)),t&&0<t.length&&(i.isEnd?i.a11y.disableEl(t):i.a11y.enableEl(t)))},updatePagination:function(){var i=this,s=i.params.a11y;i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.bullets.each(function(e,t){var a=I(t);i.a11y.makeElFocusable(a),i.a11y.addElRole(a,"button"),i.a11y.addElLabel(a,s.paginationBulletMessage.replace(/{{index}}/,a.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t,a,i=e.params.a11y;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(a=e.navigation.$prevEl),t&&(e.a11y.makeElFocusable(t),e.a11y.addElRole(t,"button"),e.a11y.addElLabel(t,i.nextSlideMessage),t.on("keydown",e.a11y.onEnterKey)),a&&(e.a11y.makeElFocusable(a),e.a11y.addElRole(a,"button"),e.a11y.addElLabel(a,i.prevSlideMessage),a.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e,t,a=this;a.a11y.liveRegion&&0<a.a11y.liveRegion.length&&a.a11y.liveRegion.remove(),a.navigation&&a.navigation.$nextEl&&(e=a.navigation.$nextEl),a.navigation&&a.navigation.$prevEl&&(t=a.navigation.$prevEl),e&&e.off("keydown",a.a11y.onEnterKey),t&&t.off("keydown",a.a11y.onEnterKey),a.pagination&&a.params.pagination.clickable&&a.pagination.bullets&&a.pagination.bullets.length&&a.pagination.$el.off("keydown","."+a.params.pagination.bulletClass,a.a11y.onEnterKey)}},re={init:function(){var e=this;if(e.params.history){if(!ee.history||!ee.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var t=e.history;t.initialized=!0,t.paths=re.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||ee.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||ee.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=re.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=ee.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){var a,i,s;this.history.initialized&&this.params.history.enabled&&(a=this.slides.eq(t),i=re.slugify(a.attr("data-history")),ee.location.pathname.includes(e)||(i=e+"/"+i),(s=ee.history.state)&&s.value===i||(this.params.history.replaceState?ee.history.replaceState({value:i},null,i):ee.history.pushState({value:i},null,i)))},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,a){var i=this;if(t)for(var s=0,r=i.slides.length;s<r;s+=1){var n,o=i.slides.eq(s);re.slugify(o.attr("data-history"))!==t||o.hasClass(i.params.slideDuplicateClass)||(n=o.index(),i.slideTo(n,e,a))}else i.slideTo(0,e,a)}},ne={onHashCange:function(){var e=this,t=f.location.hash.replace("#","");if(t!==e.slides.eq(e.activeIndex).attr("data-hash")){var a=e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+t+'"]').index();if(void 0===a)return;e.slideTo(a)}},setHash:function(){var e,t,a=this;a.hashNavigation.initialized&&a.params.hashNavigation.enabled&&(a.params.hashNavigation.replaceState&&ee.history&&ee.history.replaceState?ee.history.replaceState(null,null,"#"+a.slides.eq(a.activeIndex).attr("data-hash")||""):(t=(e=a.slides.eq(a.activeIndex)).attr("data-hash")||e.attr("data-history"),f.location.hash=t||""))},init:function(){var e=this;if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var t=f.location.hash.replace("#","");if(t)for(var a=0,i=e.slides.length;a<i;a+=1){var s,r=e.slides.eq(a);(r.attr("data-hash")||r.attr("data-history"))!==t||r.hasClass(e.params.slideDuplicateClass)||(s=r.index(),e.slideTo(s,0,e.params.runCallbacksOnInit,!0))}e.params.hashNavigation.watchState&&I(ee).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&I(ee).off("hashchange",this.hashNavigation.onHashCange)}},oe={run:function(){var e=this,t=e.slides.eq(e.activeIndex),a=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(a=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=te.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},a)},start:function(){var e=this;return void 0===e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}},le={setTranslate:function(){for(var e=this,t=e.slides,a=0;a<t.length;a+=1){var i=e.slides.eq(a),s=-i[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);var r=0;e.isHorizontal()||(r=s,s=0);var n=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:n}).transform("translate3d("+s+"px, "+r+"px, 0px)")}},setTransition:function(e){var a,i=this,t=i.slides,s=i.$wrapperEl;t.transition(e),i.params.virtualTranslate&&0!==e&&(a=!1,t.transitionEnd(function(){if(!a&&i&&!i.destroyed){a=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)s.trigger(e[t])}}))}},de={setTranslate:function(){var e,t=this,a=t.$el,i=t.$wrapperEl,s=t.slides,r=t.width,n=t.height,o=t.rtlTranslate,l=t.size,d=t.params.cubeEffect,p=t.isHorizontal(),c=t.virtual&&t.params.virtual.enabled,u=0;d.shadow&&(p?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=I('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:r+"px"})):0===(e=a.find(".swiper-cube-shadow")).length&&(e=I('<div class="swiper-cube-shadow"></div>'),a.append(e)));for(var h,v,f,m,g,b=0;b<s.length;b+=1){var w=s.eq(b),y=b;c&&(y=parseInt(w.attr("data-swiper-slide-index"),10));var x=90*y,T=Math.floor(x/360);o&&(x=-x,T=Math.floor(-x/360));var E=Math.max(Math.min(w[0].progress,1),-1),S=0,C=0,M=0;y%4==0?(S=4*-T*l,M=0):(y-1)%4==0?(S=0,M=4*-T*l):(y-2)%4==0?(S=l+4*T*l,M=l):(y-3)%4==0&&(S=-l,M=3*l+4*l*T),o&&(S=-S),p||(C=S,S=0);var P,k,z="rotateX("+(p?0:-x)+"deg) rotateY("+(p?x:0)+"deg) translate3d("+S+"px, "+C+"px, "+M+"px)";E<=1&&-1<E&&(u=o?90*-y-90*E:90*y+90*E),w.transform(z),d.slideShadows&&(P=p?w.find(".swiper-slide-shadow-left"):w.find(".swiper-slide-shadow-top"),k=p?w.find(".swiper-slide-shadow-right"):w.find(".swiper-slide-shadow-bottom"),0===P.length&&(P=I('<div class="swiper-slide-shadow-'+(p?"left":"top")+'"></div>'),w.append(P)),0===k.length&&(k=I('<div class="swiper-slide-shadow-'+(p?"right":"bottom")+'"></div>'),w.append(k)),P.length&&(P[0].style.opacity=Math.max(-E,0)),k.length&&(k[0].style.opacity=Math.max(E,0)))}i.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow&&(p?e.transform("translate3d(0px, "+(r/2+d.shadowOffset)+"px, "+-r/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")"):(h=Math.abs(u)-90*Math.floor(Math.abs(u)/90),v=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),f=d.shadowScale,m=d.shadowScale/v,g=d.shadowOffset,e.transform("scale3d("+f+", 1, "+m+") translate3d(0px, "+(n/2+g)+"px, "+-n/2/m+"px) rotateX(-90deg)")));var $=ie.isSafari||ie.isUiWebView?-l/2:0;i.transform("translate3d(0px,0,"+$+"px) rotateX("+(t.isHorizontal()?0:u)+"deg) rotateY("+(t.isHorizontal()?-u:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},pe={setTranslate:function(){for(var e=this,t=e.slides,a=e.rtlTranslate,i=0;i<t.length;i+=1){var s=t.eq(i),r=s[0].progress;e.params.flipEffect.limitRotation&&(r=Math.max(Math.min(s[0].progress,1),-1));var n,o,l=-180*r,d=0,p=-s[0].swiperSlideOffset,c=0;e.isHorizontal()?a&&(l=-l):(c=p,d=-l,l=p=0),s[0].style.zIndex=-Math.abs(Math.round(r))+t.length,e.params.flipEffect.slideShadows&&(n=e.isHorizontal()?s.find(".swiper-slide-shadow-left"):s.find(".swiper-slide-shadow-top"),o=e.isHorizontal()?s.find(".swiper-slide-shadow-right"):s.find(".swiper-slide-shadow-bottom"),0===n.length&&(n=I('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),s.append(n)),0===o.length&&(o=I('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),s.append(o)),n.length&&(n[0].style.opacity=Math.max(-r,0)),o.length&&(o[0].style.opacity=Math.max(r,0))),s.transform("translate3d("+p+"px, "+c+"px, 0px) rotateX("+d+"deg) rotateY("+l+"deg)")}},setTransition:function(e){var a,i=this,t=i.slides,s=i.activeIndex,r=i.$wrapperEl;t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),i.params.virtualTranslate&&0!==e&&(a=!1,t.eq(s).transitionEnd(function(){if(!a&&i&&!i.destroyed){a=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)r.trigger(e[t])}}))}},ce={setTranslate:function(){for(var e=this,t=e.width,a=e.height,i=e.slides,s=e.$wrapperEl,r=e.slidesSizesGrid,n=e.params.coverflowEffect,o=e.isHorizontal(),l=e.translate,d=o?t/2-l:a/2-l,p=o?n.rotate:-n.rotate,c=n.depth,u=0,h=i.length;u<h;u+=1){var v=i.eq(u),f=r[u],m=(d-v[0].swiperSlideOffset-f/2)/f*n.modifier,g=o?p*m:0,b=o?0:p*m,w=-c*Math.abs(m),y=o?0:n.stretch*m,x=o?n.stretch*m:0;Math.abs(x)<.001&&(x=0),Math.abs(y)<.001&&(y=0),Math.abs(w)<.001&&(w=0),Math.abs(g)<.001&&(g=0),Math.abs(b)<.001&&(b=0);var T,E,S="translate3d("+x+"px,"+y+"px,"+w+"px)  rotateX("+b+"deg) rotateY("+g+"deg)";v.transform(S),v[0].style.zIndex=1-Math.abs(Math.round(m)),n.slideShadows&&(T=o?v.find(".swiper-slide-shadow-left"):v.find(".swiper-slide-shadow-top"),E=o?v.find(".swiper-slide-shadow-right"):v.find(".swiper-slide-shadow-bottom"),0===T.length&&(T=I('<div class="swiper-slide-shadow-'+(o?"left":"top")+'"></div>'),v.append(T)),0===E.length&&(E=I('<div class="swiper-slide-shadow-'+(o?"right":"bottom")+'"></div>'),v.append(E)),T.length&&(T[0].style.opacity=0<m?m:0),E.length&&(E[0].style.opacity=0<-m?-m:0))}(ae.pointerEvents||ae.prefixedPointerEvents)&&(s[0].style.perspectiveOrigin=d+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},ue={init:function(){var e=this,t=e.params.thumbs,a=e.constructor;t.swiper instanceof a?(e.thumbs.swiper=t.swiper,te.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),te.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):te.isObject(t.swiper)&&(e.thumbs.swiper=new a(te.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick:function(){var e,t,a,i,s,r,n=this,o=n.thumbs.swiper;o&&(e=o.clickedIndex,(t=o.clickedSlide)&&I(t).hasClass(n.params.thumbs.slideThumbActiveClass)||null!=e&&(r=o.params.loop?parseInt(I(o.clickedSlide).attr("data-swiper-slide-index"),10):e,n.params.loop&&(a=n.activeIndex,n.slides.eq(a).hasClass(n.params.slideDuplicateClass)&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,a=n.activeIndex),i=n.slides.eq(a).prevAll('[data-swiper-slide-index="'+r+'"]').eq(0).index(),s=n.slides.eq(a).nextAll('[data-swiper-slide-index="'+r+'"]').eq(0).index(),r=void 0===i||void 0!==s&&s-a<a-i?s:i),n.slideTo(r)))},update:function(e){var t=this,a=t.thumbs.swiper;if(a){var i,s,r,n,o="auto"===a.params.slidesPerView?a.slidesPerViewDynamic():a.params.slidesPerView;t.realIndex!==a.realIndex&&(i=a.activeIndex,n=a.params.loop?(a.slides.eq(i).hasClass(a.params.slideDuplicateClass)&&(a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft,i=a.activeIndex),s=a.slides.eq(i).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),r=a.slides.eq(i).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),void 0===s?r:void 0===r?s:r-i==i-s?i:r-i<i-s?r:s):t.realIndex,a.visibleSlidesIndexes&&a.visibleSlidesIndexes.indexOf(n)<0&&(a.params.centeredSlides?n=i<n?n-Math.floor(o/2)+1:n+Math.floor(o/2)-1:i<n&&(n=n-o+1),a.slideTo(n,e?0:void 0)));var l=1,d=t.params.thumbs.slideThumbActiveClass;if(1<t.params.slidesPerView&&!t.params.centeredSlides&&(l=t.params.slidesPerView),a.slides.removeClass(d),a.params.loop||a.params.virtual)for(var p=0;p<l;p+=1)a.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+p)+'"]').addClass(d);else for(var c=0;c<l;c+=1)a.slides.eq(t.realIndex+c).addClass(d)}}},he=[D,O,A,H,N,X,Y,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){var e=this;te.extend(e,{mousewheel:{enabled:!1,enable:W.enable.bind(e),disable:W.disable.bind(e),handle:W.handle.bind(e),handleMouseEnter:W.handleMouseEnter.bind(e),handleMouseLeave:W.handleMouseLeave.bind(e),lastScrollTime:te.now()}})},on:{init:function(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){var e=this;te.extend(e,{navigation:{init:j.init.bind(e),update:j.update.bind(e),destroy:j.destroy.bind(e),onNextClick:j.onNextClick.bind(e),onPrevClick:j.onPrevClick.bind(e)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,a=this,i=a.navigation,s=i.$nextEl,r=i.$prevEl;!a.params.navigation.hideOnClick||I(e.target).is(r)||I(e.target).is(s)||(s?t=s.hasClass(a.params.navigation.hiddenClass):r&&(t=r.hasClass(a.params.navigation.hiddenClass)),!0===t?a.emit("navigationShow",a):a.emit("navigationHide",a),s&&s.toggleClass(a.params.navigation.hiddenClass),r&&r.toggleClass(a.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){var e=this;te.extend(e,{pagination:{init:U.init.bind(e),render:U.render.bind(e),update:U.update.bind(e),destroy:U.destroy.bind(e),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){!this.params.loop&&void 0!==this.snapIndex||this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){var t=this;t.params.pagination.el&&t.params.pagination.hideOnClick&&0<t.pagination.$el.length&&!I(e.target).hasClass(t.params.pagination.bulletClass)&&(!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){var e=this;te.extend(e,{scrollbar:{init:K.init.bind(e),destroy:K.destroy.bind(e),updateSize:K.updateSize.bind(e),setTranslate:K.setTranslate.bind(e),setTransition:K.setTransition.bind(e),enableDraggable:K.enableDraggable.bind(e),disableDraggable:K.disableDraggable.bind(e),setDragPosition:K.setDragPosition.bind(e),getPointerPosition:K.getPointerPosition.bind(e),onDragStart:K.onDragStart.bind(e),onDragMove:K.onDragMove.bind(e),onDragEnd:K.onDragEnd.bind(e),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){te.extend(this,{parallax:{setTransform:_.setTransform.bind(this),setTranslate:_.setTranslate.bind(this),setTransition:_.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var i=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=Z[e].bind(i)}),te.extend(i,{zoom:t});var s=1;Object.defineProperty(i.zoom,"scale",{get:function(){return s},set:function(e){var t,a;s!==e&&(t=i.zoom.gesture.$imageEl?i.zoom.gesture.$imageEl[0]:void 0,a=i.zoom.gesture.$slideEl?i.zoom.gesture.$slideEl[0]:void 0,i.emit("zoomChange",e,t,a)),s=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){te.extend(this,{lazy:{initialImageLoaded:!1,load:Q.load.bind(this),loadInSlide:Q.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){var e=this;e.params.lazy.enabled&&(!e.params.lazy.loadOnTransitionStart&&(e.params.lazy.loadOnTransitionStart||e.lazy.initialImageLoaded)||e.lazy.load())},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){var e=this;te.extend(e,{controller:{control:e.params.controller.control,getInterpolateFunction:J.getInterpolateFunction.bind(e),setTranslate:J.setTranslate.bind(e),setTransition:J.setTransition.bind(e)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;te.extend(t,{a11y:{liveRegion:I('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(se).forEach(function(e){t.a11y[e]=se[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){var e=this;te.extend(e,{history:{init:re.init.bind(e),setHistory:re.setHistory.bind(e),setHistoryPopState:re.setHistoryPopState.bind(e),scrollToSlide:re.scrollToSlide.bind(e),destroy:re.destroy.bind(e)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){var e=this;te.extend(e,{hashNavigation:{initialized:!1,init:ne.init.bind(e),destroy:ne.destroy.bind(e),setHash:ne.setHash.bind(e),onHashCange:ne.onHashCange.bind(e)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;te.extend(t,{autoplay:{running:!1,paused:!1,run:oe.run.bind(t),start:oe.start.bind(t),stop:oe.stop.bind(t),pause:oe.pause.bind(t),onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&this.autoplay.start()},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},destroy:function(){this.autoplay.running&&this.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){te.extend(this,{fadeEffect:{setTranslate:le.setTranslate.bind(this),setTransition:le.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"fade"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"fade"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},te.extend(t.params,e),te.extend(t.originalParams,e))},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){te.extend(this,{cubeEffect:{setTranslate:de.setTranslate.bind(this),setTransition:de.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"cube"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"cube"),t.classNames.push(t.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0},te.extend(t.params,e),te.extend(t.originalParams,e))},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){te.extend(this,{flipEffect:{setTranslate:pe.setTranslate.bind(this),setTransition:pe.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"flip"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"flip"),t.classNames.push(t.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},te.extend(t.params,e),te.extend(t.originalParams,e))},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){te.extend(this,{coverflowEffect:{setTranslate:ce.setTranslate.bind(this),setTransition:ce.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){te.extend(this,{thumbs:{swiper:null,init:ue.init.bind(this),update:ue.update.bind(this),onThumbClick:ue.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===L.use&&(L.use=L.Class.use,L.installModule=L.Class.installModule),L.use(he),L});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZGlzdC9qcy9zd2lwZXIuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwiU3dpcGVyIiwidGhpcyIsImRvYyIsImRvY3VtZW50IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJub2RlTmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJzdHlsZSIsInNldEF0dHJpYnV0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibG9jYXRpb24iLCJoYXNoIiwid2luIiwid2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsIkN1c3RvbUV2ZW50IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiRG9tNyIsImFyciIsImkiLCJsZW5ndGgiLCIkIiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZWxzIiwidGVtcFBhcmVudCIsImh0bWwiLCJ0cmltIiwiaW5kZXhPZiIsInRvQ3JlYXRlIiwiaW5uZXJIVE1MIiwicHVzaCIsIm1hdGNoIiwic3BsaXQiLCJub2RlVHlwZSIsInVuaXF1ZSIsInVuaXF1ZUFycmF5IiwiZm4iLCJwcm90b3R5cGUiLCJDbGFzcyIsIk1ldGhvZHMiLCJhZGRDbGFzcyIsImNsYXNzTmFtZSIsImNsYXNzZXMiLCJqIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmUiLCJoYXNDbGFzcyIsImNvbnRhaW5zIiwidG9nZ2xlQ2xhc3MiLCJ0b2dnbGUiLCJhdHRyIiwiYXR0cnMiLCJ2YWx1ZSIsImFyZ3VtZW50cyQxIiwiYXJndW1lbnRzIiwiZ2V0QXR0cmlidXRlIiwiYXR0ck5hbWUiLCJyZW1vdmVBdHRyIiwicmVtb3ZlQXR0cmlidXRlIiwiZGF0YSIsImtleSIsImVsIiwiZG9tN0VsZW1lbnREYXRhU3RvcmFnZSIsImRhdGFLZXkiLCJ0cmFuc2Zvcm0iLCJlbFN0eWxlIiwid2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwid2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwib24iLCJhcmdzIiwibGVuIiwiZXZlbnRUeXBlIiwidGFyZ2V0U2VsZWN0b3IiLCJsaXN0ZW5lciIsImNhcHR1cmUiLCJoYW5kbGVMaXZlRXZlbnQiLCJlIiwidGFyZ2V0IiwiZXZlbnREYXRhIiwiZG9tN0V2ZW50RGF0YSIsInVuc2hpZnQiLCJpcyIsImFwcGx5IiwicGFyZW50cyIsImsiLCJoYW5kbGVFdmVudCIsInVuZGVmaW5lZCIsImV2ZW50cyIsImV2ZW50JDEiLCJkb203TGl2ZUxpc3RlbmVycyIsInByb3h5TGlzdGVuZXIiLCJldmVudCIsImRvbTdMaXN0ZW5lcnMiLCJvZmYiLCJoYW5kbGVycyIsImhhbmRsZXIiLCJkb203cHJveHkiLCJzcGxpY2UiLCJ0cmlnZ2VyIiwiZXZ0IiwiZGV0YWlsIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJmaWx0ZXIiLCJkYXRhSW5kZXgiLCJkaXNwYXRjaEV2ZW50IiwidHJhbnNpdGlvbkVuZCIsImNhbGxiYWNrIiwiZG9tIiwiZmlyZUNhbGxCYWNrIiwiY2FsbCIsIm91dGVyV2lkdGgiLCJpbmNsdWRlTWFyZ2lucyIsInN0eWxlcyIsIm9mZnNldFdpZHRoIiwicGFyc2VGbG9hdCIsIm91dGVySGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0IiwiYm94IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbFRvcCIsInNjcm9sbFkiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWCIsInRvcCIsImxlZnQiLCJjc3MiLCJwcm9wcyIsInByb3AiLCJlYWNoIiwidGV4dCIsInRleHRDb250ZW50IiwiY29tcGFyZVdpdGgiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJpbmRleCIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwiZXEiLCJyZXR1cm5JbmRleCIsImFwcGVuZCIsIm5ld0NoaWxkIiwidGVtcERpdiIsImZpcnN0Q2hpbGQiLCJhcHBlbmRDaGlsZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJuZXh0IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dEFsbCIsIm5leHRFbHMiLCJwcmV2IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXZBbGwiLCJwcmV2RWxzIiwicGFyZW50IiwicGFyZW50Tm9kZSIsImNsb3Nlc3QiLCJmaW5kIiwiZm91bmRFbGVtZW50cyIsImZvdW5kIiwicmVtb3ZlQ2hpbGQiLCJ0b0FkZCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwibWV0aG9kTmFtZSIsIlN3aXBlckNsYXNzIiwicGFyYW1zIiwiZXZlbnRzTGlzdGVuZXJzIiwiZXZlbnROYW1lIiwidGVzdERpdiIsInVhIiwiVXRpbHMiLCJkZWxldGVQcm9wcyIsIm9iaiIsIm9iamVjdCIsIm5leHRUaWNrIiwiZGVsYXkiLCJub3ciLCJnZXRUcmFuc2xhdGUiLCJheGlzIiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwidHJhbnNmb3JtTWF0cml4IiwiY3VyU3R5bGUiLCJXZWJLaXRDU1NNYXRyaXgiLCJtYXAiLCJhIiwicmVwbGFjZSIsImpvaW4iLCJNb3pUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsInRvU3RyaW5nIiwibTQxIiwibTQyIiwicGFyc2VVcmxRdWVyeSIsInVybCIsInBhcmFtIiwicXVlcnkiLCJ1cmxUb1BhcnNlIiwiaHJlZiIsInBhcmFtc1BhcnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc09iamVjdCIsIm8iLCJjb25zdHJ1Y3RvciIsImV4dGVuZCIsImxlbiQxIiwidG8iLCJuZXh0U291cmNlIiwia2V5c0FycmF5IiwibmV4dEluZGV4IiwibmV4dEtleSIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiU3VwcG9ydCIsInRvdWNoIiwiTW9kZXJuaXpyIiwibWF4VG91Y2hQb2ludHMiLCJEb2N1bWVudFRvdWNoIiwicG9pbnRlckV2ZW50cyIsInBvaW50ZXJFbmFibGVkIiwiUG9pbnRlckV2ZW50IiwicHJlZml4ZWRQb2ludGVyRXZlbnRzIiwibXNQb2ludGVyRW5hYmxlZCIsInRyYW5zZm9ybXMzZCIsImNzc3RyYW5zZm9ybXMzZCIsImZsZXhib3giLCJvYnNlcnZlciIsInBhc3NpdmVMaXN0ZW5lciIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImdlc3R1cmVzIiwiQnJvd3NlciIsImlzSUUiLCJpc0VkZ2UiLCJpc1NhZmFyaSIsInRvTG93ZXJDYXNlIiwiaXNVaVdlYlZpZXciLCJ0ZXN0Iiwic3RhdGljQWNjZXNzb3JzIiwiY29tcG9uZW50cyIsImNvbmZpZ3VyYWJsZSIsInByaW9yaXR5IiwibWV0aG9kIiwib25jZSIsIm9uY2VIYW5kbGVyIiwiZjdwcm94eSIsImV2ZW50SGFuZGxlciIsImVtaXQiLCJBcnJheSIsImlzQXJyYXkiLCJzbGljZSIsInVzZU1vZHVsZXNQYXJhbXMiLCJpbnN0YW5jZVBhcmFtcyIsImluc3RhbmNlIiwibW9kdWxlcyIsIm1vZHVsZU5hbWUiLCJ1c2VNb2R1bGVzIiwibW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtcyIsIm1vZHVsZVByb3BOYW1lIiwibW9kdWxlUHJvcCIsImJpbmQiLCJtb2R1bGVFdmVudE5hbWUiLCJjcmVhdGUiLCJzZXQiLCJ1c2UiLCJpbnN0YWxsTW9kdWxlIiwibmFtZSIsInByb3RvIiwic3RhdGljIiwiaW5zdGFsbCIsIm0iLCJjb25jYXQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidXBkYXRlIiwidXBkYXRlU2l6ZSIsInN3aXBlciIsIiRlbCIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwicGFyc2VJbnQiLCJzaXplIiwidXBkYXRlU2xpZGVzIiwiJHdyYXBwZXJFbCIsInN3aXBlclNpemUiLCJydGwiLCJydGxUcmFuc2xhdGUiLCJ3cm9uZ1JUTCIsImlzVmlydHVhbCIsInZpcnR1YWwiLCJlbmFibGVkIiwicHJldmlvdXNTbGlkZXNMZW5ndGgiLCJzbGlkZXMiLCJzbGlkZXNMZW5ndGgiLCJzbmFwR3JpZCIsInNsaWRlc0dyaWQiLCJzbGlkZXNTaXplc0dyaWQiLCJvZmZzZXRCZWZvcmUiLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInNsaWRlc09mZnNldEFmdGVyIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInByZXZpb3VzU25hcEdyaWRMZW5ndGgiLCJwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgiLCJzcGFjZUJldHdlZW4iLCJzbGlkZVBvc2l0aW9uIiwicHJldlNsaWRlU2l6ZSIsInZpcnR1YWxTaXplIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwic2xpZGVzUGVyQ29sdW1uIiwiTWF0aCIsImZsb29yIiwiY2VpbCIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNQZXJDb2x1bW5GaWxsIiwibWF4IiwibmV3U2xpZGVzR3JpZCIsImFsbFNsaWRlc1NpemUiLCJhbGxTbGlkZXNPZmZzZXQiLCJzbGlkZXNQZXJSb3ciLCJudW1GdWxsQ29sdW1ucyIsInNsaWRlU2l6ZSIsIm5ld1NsaWRlT3JkZXJJbmRleCIsImdyb3VwSW5kZXgiLCJyb3ciLCJjb2x1bW4iLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImJveFNpemluZyQxIiwic2xpZGUiLCJzbGlkZXNQZXJHcm91cCIsIi13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXAiLCItbW96LWJveC1vcmRpbmFsLWdyb3VwIiwiLW1zLWZsZXgtb3JkZXIiLCItd2Via2l0LW9yZGVyIiwib3JkZXIiLCJyb3VuZExlbmd0aHMiLCJzd2lwZXJTbGlkZVNpemUiLCJjZW50ZXJlZFNsaWRlcyIsImFicyIsImVmZmVjdCIsInNldFdyYXBwZXJTaXplIiwiaSQxIiwic2xpZGVzR3JpZEl0ZW0iLCJpJDIiLCJzbGlkZXNHcmlkSXRlbSQxIiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwic2xpZGVTaXplVmFsdWUiLCJzbmFwIiwic25hcEluZGV4Iiwid2F0Y2hPdmVyZmxvdyIsImNoZWNrT3ZlcmZsb3ciLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwid2F0Y2hTbGlkZXNWaXNpYmlsaXR5IiwidXBkYXRlU2xpZGVzT2Zmc2V0IiwidXBkYXRlQXV0b0hlaWdodCIsInNwZWVkIiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsImFjdGl2ZUluZGV4Iiwic3dpcGVyU2xpZGVPZmZzZXQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJ0cmFuc2xhdGUiLCJvZmZzZXRDZW50ZXIiLCJzbGlkZVZpc2libGVDbGFzcyIsInZpc2libGVTbGlkZXNJbmRleGVzIiwidmlzaWJsZVNsaWRlcyIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsInNsaWRlUHJvZ3Jlc3MiLCJtaW5UcmFuc2xhdGUiLCJwcm9ncmVzcyIsInVwZGF0ZVByb2dyZXNzIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsImlzRW5kIiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsImFjdGl2ZVNsaWRlIiwicmVhbEluZGV4Iiwic2xpZGVBY3RpdmVDbGFzcyIsImxvb3AiLCJzbGlkZUR1cGxpY2F0ZUNsYXNzIiwic2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyIsIm5leHRTbGlkZSIsInNsaWRlTmV4dENsYXNzIiwicHJldlNsaWRlIiwic2xpZGVQcmV2Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyIsInNsaWRlRHVwbGljYXRlUHJldkNsYXNzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4Iiwibm9ybWFsaXplU2xpZGVJbmRleCIsImluaXRpYWxpemVkIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiY3VycmVudFRyYW5zbGF0ZSIsInNldFRyYW5zbGF0ZSIsImJ5Q29udHJvbGxlciIsIngiLCJ5IiwicHJldmlvdXNUcmFuc2xhdGUiLCJ0cmFuc2l0aW9uJDEiLCJ0cmFuc2l0aW9uU3RhcnQiLCJydW5DYWxsYmFja3MiLCJkaXJlY3Rpb24iLCJhdXRvSGVpZ2h0IiwiZGlyIiwiYW5pbWF0aW5nIiwic2xpZGVUbyIsImludGVybmFsIiwic2xpZGVJbmRleCIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsImluaXRpYWxTbGlkZSIsImFsbG93U2xpZGVOZXh0IiwiYWxsb3dTbGlkZVByZXYiLCJvblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsImRlc3Ryb3llZCIsInNsaWRlVG9Mb29wIiwibmV3SW5kZXgiLCJsb29wZWRTbGlkZXMiLCJzbGlkZU5leHQiLCJsb29wRml4IiwiX2NsaWVudExlZnQiLCJzbGlkZVByZXYiLCJub3JtYWxpemUiLCJ2YWwiLCJwcmV2SW5kZXgiLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJzbGlkZVJlc2V0Iiwic2xpZGVUb0Nsb3Nlc3QiLCJjdXJyZW50U25hcCIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwic2xpZGVUb0luZGV4IiwibG9vcENyZWF0ZSIsImxvb3BGaWxsR3JvdXBXaXRoQmxhbmsiLCJibGFua1NsaWRlc051bSIsImJsYW5rTm9kZSIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwicHJlcGVuZFNsaWRlcyIsImFwcGVuZFNsaWRlcyIsImNsb25lTm9kZSIsImRpZmYiLCJsb29wRGVzdHJveSIsImdyYWJDdXJzb3IiLCJzZXRHcmFiQ3Vyc29yIiwibW92aW5nIiwic2ltdWxhdGVUb3VjaCIsImlzTG9ja2VkIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwib3NWZXJzaW9uQXJyIiwibWV0YVZpZXdwb3J0IiwiZGV2aWNlIiwid2luZG93cyIsImFuZHJvaWQiLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIm1hbmlwdWxhdGlvbiIsImFwcGVuZFNsaWRlIiwicHJlcGVuZFNsaWRlIiwiYWRkU2xpZGUiLCJhY3RpdmVJbmRleEJ1ZmZlciIsImJhc2VMZW5ndGgiLCJzbGlkZXNCdWZmZXIiLCJjdXJyZW50U2xpZGUiLCJyZW1vdmVTbGlkZSIsInNsaWRlc0luZGV4ZXMiLCJpbmRleFRvUmVtb3ZlIiwicmVtb3ZlQWxsU2xpZGVzIiwiRGV2aWNlIiwiaW9zIiwiYW5kcm9pZENocm9tZSIsImRlc2t0b3AiLCJjb3Jkb3ZhIiwicGhvbmVnYXAiLCJvcyIsIm9zVmVyc2lvbiIsIndlYlZpZXciLCJtaW5pbWFsVWkiLCJwaXhlbFJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIm9uUmVzaXplIiwibmV3VHJhbnNsYXRlIiwiYnJlYWtwb2ludHMiLCJzZXRCcmVha3BvaW50IiwiZnJlZU1vZGUiLCJtaW4iLCJhdXRvcGxheSIsInJ1bm5pbmciLCJwYXVzZWQiLCJydW4iLCJkZWZhdWx0cyIsImluaXQiLCJ0b3VjaEV2ZW50c1RhcmdldCIsImVkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImZyZWVNb2RlTW9tZW50dW0iLCJmcmVlTW9kZU1vbWVudHVtUmF0aW8iLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlIiwiZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvIiwiZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW8iLCJmcmVlTW9kZVN0aWNreSIsImZyZWVNb2RlTWluaW11bVZlbG9jaXR5IiwiYnJlYWtwb2ludHNJbnZlcnNlIiwidG91Y2hSYXRpbyIsInRvdWNoQW5nbGUiLCJzaG9ydFN3aXBlcyIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJsb25nU3dpcGVzTXMiLCJmb2xsb3dGaW5nZXIiLCJhbGxvd1RvdWNoTW92ZSIsInRocmVzaG9sZCIsInRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwidG91Y2hSZWxlYXNlT25FZGdlcyIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicmVzaXN0YW5jZSIsInJlc2lzdGFuY2VSYXRpbyIsInByZXZlbnRDbGlja3MiLCJwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24iLCJwcmVsb2FkSW1hZ2VzIiwidXBkYXRlT25JbWFnZXNSZWFkeSIsInN3aXBlSGFuZGxlciIsIm5vU3dpcGluZyIsIm5vU3dpcGluZ0NsYXNzIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJwYXNzaXZlTGlzdGVuZXJzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsInNsaWRlQ2xhc3MiLCJzbGlkZUJsYW5rQ2xhc3MiLCJ3cmFwcGVyQ2xhc3MiLCJwcm90b3R5cGVzIiwiYXR0YWNoRXZlbnRzIiwidG91Y2hFdmVudHMiLCJ3cmFwcGVyRWwiLCJvblRvdWNoU3RhcnQiLCJzdGFydFgiLCJzdGFydFkiLCJwcmV2ZW50RGVmYXVsdCIsInNob3VsZFByZXZlbnREZWZhdWx0IiwidG91Y2hFdmVudHNEYXRhIiwidG91Y2hlcyIsIm9yaWdpbmFsRXZlbnQiLCJpc1RvdWNoRXZlbnQiLCJ0eXBlIiwid2hpY2giLCJidXR0b24iLCJpc1RvdWNoZWQiLCJpc01vdmVkIiwiYWxsb3dDbGljayIsImN1cnJlbnRYIiwidGFyZ2V0VG91Y2hlcyIsInBhZ2VYIiwiY3VycmVudFkiLCJwYWdlWSIsImlPU0VkZ2VTd2lwZURldGVjdGlvbiIsImlPU0VkZ2VTd2lwZVRocmVzaG9sZCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvcm1FbGVtZW50cyIsIm9uVG91Y2hNb3ZlIiwicHJldmVudGVkQnlOZXN0ZWRTd2lwZXIiLCJkaWZmWCIsImRpZmZZIiwic3FydCIsInBvdyIsImF0YW4yIiwiUEkiLCJuZXN0ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJzdGFydFRyYW5zbGF0ZSIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwidmVsb2NpdGllcyIsInBvc2l0aW9uIiwidGltZSIsIm9uVG91Y2hFbmQiLCJjdXJyZW50UG9zIiwibGFzdE1vdmVFdmVudCIsInZlbG9jaXR5RXZlbnQiLCJkaXN0YW5jZSIsInRvdWNoRW5kVGltZSIsInRpbWVEaWZmIiwibGFzdENsaWNrVGltZSIsImNsaWNrVGltZW91dCIsInBvcCIsInZlbG9jaXR5IiwibW9tZW50dW1EdXJhdGlvbiIsIm1vbWVudHVtRGlzdGFuY2UiLCJuZXdQb3NpdGlvbiIsImFmdGVyQm91bmNlUG9zaXRpb24iLCJuZWVkc0xvb3BGaXgiLCJkb0JvdW5jZSIsImJvdW5jZUFtb3VudCIsInN0b3BJbmRleCIsImdyb3VwU2l6ZSIsInJhdGlvIiwib25DbGljayIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0YXJ0IiwicGFzc2l2ZSIsIm1vdmUiLCJlbmQiLCJkZXRhY2hFdmVudHMiLCJicmVha3BvaW50IiwiYnJlYWtwb2ludE9ubHlQYXJhbXMiLCJicmVha3BvaW50UGFyYW1zIiwiZGlyZWN0aW9uQ2hhbmdlZCIsIm5lZWRzUmVMb29wIiwiZ2V0QnJlYWtwb2ludCIsImN1cnJlbnRCcmVha3BvaW50IiwicGFyYW1WYWx1ZSIsIm9yaWdpbmFsUGFyYW1zIiwiY2hhbmdlRGlyZWN0aW9uIiwicG9pbnRzIiwicG9pbnQiLCJzb3J0IiwiYiIsImlubmVyV2lkdGgiLCJ3YXNMb2NrZWQiLCJuYXZpZ2F0aW9uIiwiYWRkQ2xhc3NlcyIsImNsYXNzTmFtZXMiLCJzdWZmaXhlcyIsInN1ZmZpeCIsInJlbW92ZUNsYXNzZXMiLCJpbWFnZXMiLCJsb2FkSW1hZ2UiLCJpbWFnZUVsIiwic3JjIiwic3Jjc2V0Iiwic2l6ZXMiLCJjaGVja0ZvckNvbXBsZXRlIiwiaW1hZ2UiLCJvblJlYWR5IiwiY29tcGxldGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiaW1hZ2VzTG9hZGVkIiwiaW1hZ2VzVG9Mb2FkIiwiY3VycmVudFNyYyIsImV4dGVuZGVkRGVmYXVsdHMiLCJwcm90b3R5cGVHcm91cCIsInByb3RvTWV0aG9kIiwibW9kdWxlUGFyYW1OYW1lIiwic3dpcGVyUGFyYW1zIiwicGFzc2VkUGFyYW1zIiwic3dpcGVycyIsImNvbnRhaW5lckVsIiwibmV3UGFyYW1zIiwidG91Y2hFdmVudHNUb3VjaCIsInRvdWNoRXZlbnRzRGVza3RvcCIsIl9fcHJvdG9fXyIsInNwdiIsImJyZWFrTG9vcCIsInRyYW5zbGF0ZVZhbHVlIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJzbGlkZUVsIiwiZGVzdHJveSIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJleHRlbmREZWZhdWx0cyIsIm5ld0RlZmF1bHRzIiwiRGV2aWNlJDEiLCJTdXBwb3J0JDEiLCJzdXBwb3J0IiwiQnJvd3NlciQxIiwiYnJvd3NlciIsIlJlc2l6ZSIsInJlc2l6ZSIsInJlc2l6ZUhhbmRsZXIiLCJvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIiLCJPYnNlcnZlciIsImZ1bmMiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsImF0dGFjaCIsIm9wdGlvbnMiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVycyIsIm9ic2VydmVQYXJlbnRzIiwiY29udGFpbmVyUGFyZW50cyIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiZGlzY29ubmVjdCIsIk9ic2VydmVyJDEiLCJWaXJ0dWFsIiwiZm9yY2UiLCJyZWYiLCJyZWYkMSIsImFkZFNsaWRlc0JlZm9yZSIsImFkZFNsaWRlc0FmdGVyIiwicmVmJDIiLCJwcmV2aW91c0Zyb20iLCJmcm9tIiwicHJldmlvdXNUbyIsInByZXZpb3VzU2xpZGVzR3JpZCIsInJlbmRlclNsaWRlIiwicHJldmlvdXNPZmZzZXQiLCJzbGlkZXNBZnRlciIsIm9mZnNldFByb3AiLCJzbGlkZXNCZWZvcmUiLCJvblJlbmRlcmVkIiwibGF6eSIsImxvYWQiLCJyZW5kZXJFeHRlcm5hbCIsInNsaWRlc1RvUmVuZGVyIiwicHJlcGVuZEluZGV4ZXMiLCJhcHBlbmRJbmRleGVzIiwiY2FjaGUiLCIkc2xpZGVFbCIsIm5ld0NhY2hlIiwibnVtYmVyT2ZOZXdTbGlkZXMiLCJjYWNoZWRJbmRleCIsIlZpcnR1YWwkMSIsImJlZm9yZUluaXQiLCJvdmVyd3JpdGVQYXJhbXMiLCJLZXlib2FyZCIsImhhbmRsZSIsImtjIiwia2V5Q29kZSIsImNoYXJDb2RlIiwic2hpZnRLZXkiLCJhbHRLZXkiLCJjdHJsS2V5IiwibWV0YUtleSIsImtleWJvYXJkIiwib25seUluVmlld3BvcnQiLCJpblZpZXciLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsImlubmVySGVpZ2h0Iiwic3dpcGVyT2Zmc2V0Iiwic3dpcGVyQ29vcmQiLCJyZXR1cm5WYWx1ZSIsImVuYWJsZSIsImRpc2FibGUiLCJLZXlib2FyZCQxIiwiZWxlbWVudCIsImlzU3VwcG9ydGVkIiwiTW91c2V3aGVlbCIsImxhc3RTY3JvbGxUaW1lIiwiaW1wbGVtZW50YXRpb24iLCJoYXNGZWF0dXJlIiwic1giLCJzWSIsInBYIiwicFkiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJwaXhlbFgiLCJwaXhlbFkiLCJoYW5kbGVNb3VzZUVudGVyIiwibW91c2VFbnRlcmVkIiwiaGFuZGxlTW91c2VMZWF2ZSIsIm1vdXNld2hlZWwiLCJyZWxlYXNlT25FZGdlcyIsImRlbHRhIiwicnRsRmFjdG9yIiwiZm9yY2VUb0F4aXMiLCJpbnZlcnQiLCJzZW5zaXRpdml0eSIsInRpbWVvdXQiLCJhdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uIiwic3RvcCIsImdldFRpbWUiLCJldmVudHNUYXJnZWQiLCJOYXZpZ2F0aW9uIiwiJG5leHRFbCIsIiRwcmV2RWwiLCJkaXNhYmxlZENsYXNzIiwibG9ja0NsYXNzIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsIm5leHRFbCIsInByZXZFbCIsIlBhZ2luYXRpb24iLCJwYWdpbmF0aW9uIiwiY3VycmVudCIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJ0b3RhbCIsInBhZ2luYXRpb25UeXBlIiwiYnVsbGV0cyIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJtaWRJbmRleCIsImR5bmFtaWNCdWxsZXRzTGVuZ3RoIiwiYnVsbGV0c09mZnNldCIsImR5bmFtaWNCdWxsZXRzIiwiYnVsbGV0U2l6ZSIsImR5bmFtaWNNYWluQnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImJ1bGxldCIsIiRidWxsZXQiLCJidWxsZXRJbmRleCIsImJ1bGxldEFjdGl2ZUNsYXNzIiwiJGZpcnN0RGlzcGxheWVkQnVsbGV0IiwiJGxhc3REaXNwbGF5ZWRCdWxsZXQiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJmb3JtYXRGcmFjdGlvblRvdGFsIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZSIsInJlbmRlckN1c3RvbSIsInJlbmRlciIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwicmVuZGVyQnVsbGV0IiwiYnVsbGV0Q2xhc3MiLCJyZW5kZXJGcmFjdGlvbiIsImN1cnJlbnRDbGFzcyIsInRvdGFsQ2xhc3MiLCJyZW5kZXJQcm9ncmVzc2JhciIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwiY2xpY2thYmxlIiwiY2xpY2thYmxlQ2xhc3MiLCJtb2RpZmllckNsYXNzIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzIiwiaGlkZGVuQ2xhc3MiLCJTY3JvbGxiYXIiLCJzY3JvbGxiYXIiLCJkcmFnU2l6ZSIsInRyYWNrU2l6ZSIsIiRkcmFnRWwiLCJuZXdTaXplIiwibmV3UG9zIiwiaGlkZSIsIm9wYWNpdHkiLCJkaXZpZGVyIiwibW92ZURpdmlkZXIiLCJkaXNwbGF5IiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJzZXREcmFnUG9zaXRpb24iLCJkcmFnU3RhcnRQb3MiLCJwb3NpdGlvblJhdGlvIiwib25EcmFnU3RhcnQiLCJkcmFnVGltZW91dCIsIm9uRHJhZ01vdmUiLCJvbkRyYWdFbmQiLCJzbmFwT25SZWxlYXNlIiwiZW5hYmxlRHJhZ2dhYmxlIiwiYWN0aXZlTGlzdGVuZXIiLCJkaXNhYmxlRHJhZ2dhYmxlIiwiJHN3aXBlckVsIiwiZHJhZ0VsIiwiZHJhZ2dhYmxlIiwiUGFyYWxsYXgiLCJzZXRUcmFuc2Zvcm0iLCJjdXJyZW50T3BhY2l0eSIsImN1cnJlbnRTY2FsZSIsInAiLCJwYXJhbGxheCIsInBhcmFsbGF4RWwiLCIkcGFyYWxsYXhFbCIsInBhcmFsbGF4RHVyYXRpb24iLCJab29tIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyIsIngxIiwieTEiLCJ4MiIsInkyIiwib25HZXN0dXJlU3RhcnQiLCJ6b29tIiwiZ2VzdHVyZSIsImZha2VHZXN0dXJlVG91Y2hlZCIsImZha2VHZXN0dXJlTW92ZWQiLCJzY2FsZVN0YXJ0IiwiJGltYWdlRWwiLCIkaW1hZ2VXcmFwRWwiLCJtYXhSYXRpbyIsImlzU2NhbGluZyIsIm9uR2VzdHVyZUNoYW5nZSIsInNjYWxlTW92ZSIsIm1pblJhdGlvIiwib25HZXN0dXJlRW5kIiwiY2hhbmdlZFRvdWNoZXMiLCJ0b3VjaGVzU3RhcnQiLCJzbGlkZVdpZHRoIiwic2xpZGVIZWlnaHQiLCJzY2FsZWRXaWR0aCIsInNjYWxlZEhlaWdodCIsIm1pblgiLCJtYXhYIiwibWluWSIsIm1heFkiLCJ0b3VjaGVzQ3VycmVudCIsInByZXZQb3NpdGlvblgiLCJwcmV2UG9zaXRpb25ZIiwicHJldlRpbWUiLCJtb21lbnR1bUR1cmF0aW9uWCIsIm1vbWVudHVtRHVyYXRpb25ZIiwibW9tZW50dW1EaXN0YW5jZVgiLCJuZXdQb3NpdGlvblgiLCJtb21lbnR1bURpc3RhbmNlWSIsIm5ld1Bvc2l0aW9uWSIsIm9uVHJhbnNpdGlvbkVuZCIsIm91dCIsImluIiwidG91Y2hYIiwidG91Y2hZIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJ0cmFuc2xhdGVNaW5YIiwidHJhbnNsYXRlTWluWSIsInRyYW5zbGF0ZU1heFgiLCJ0cmFuc2xhdGVNYXhZIiwiTGF6eSIsImxvYWRJblNsaWRlIiwibG9hZEluRHVwbGljYXRlIiwiJGltYWdlcyIsImVsZW1lbnRDbGFzcyIsImxvYWRlZENsYXNzIiwibG9hZGluZ0NsYXNzIiwiaW1hZ2VJbmRleCIsImJhY2tncm91bmQiLCJzbGlkZU9yaWdpbmFsSW5kZXgiLCJvcmlnaW5hbFNsaWRlIiwiZHVwbGljYXRlZFNsaWRlIiwic2xpZGVFeGlzdCIsImluaXRpYWxJbWFnZUxvYWRlZCIsImVsSW5kZXgiLCJsb2FkUHJldk5leHQiLCJsb2FkUHJldk5leHRBbW91bnQiLCJhbW91bnQiLCJtYXhJbmRleCIsIm1pbkluZGV4IiwiQ29udHJvbGxlciIsIkxpbmVhclNwbGluZSIsImd1ZXNzIiwiaTEiLCJpMyIsImJpbmFyeVNlYXJjaCIsImFycmF5IiwiaW50ZXJwb2xhdGUiLCJnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uIiwiYyIsImNvbnRyb2xsZXIiLCJzcGxpbmUiLCJzZXRUcmFuc2xhdGUkMSIsIm11bHRpcGxpZXIiLCJjb250cm9sbGVkVHJhbnNsYXRlIiwiY29udHJvbGxlZCIsImNvbnRyb2wiLCJzZXRDb250cm9sbGVkVHJhbnNsYXRlIiwiYnkiLCJpbnZlcnNlIiwic2V0Q29udHJvbGxlZFRyYW5zaXRpb24iLCJhMTF5IiwibWFrZUVsRm9jdXNhYmxlIiwiYWRkRWxSb2xlIiwicm9sZSIsImFkZEVsTGFiZWwiLCJsYWJlbCIsImRpc2FibGVFbCIsImVuYWJsZUVsIiwib25FbnRlcktleSIsIiR0YXJnZXRFbCIsIm5vdGlmeSIsImxhc3RTbGlkZU1lc3NhZ2UiLCJuZXh0U2xpZGVNZXNzYWdlIiwiZmlyc3RTbGlkZU1lc3NhZ2UiLCJwcmV2U2xpZGVNZXNzYWdlIiwiY2xpY2siLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwibGl2ZVJlZ2lvbiIsInVwZGF0ZU5hdmlnYXRpb24iLCJ1cGRhdGVQYWdpbmF0aW9uIiwiYnVsbGV0RWwiLCIkYnVsbGV0RWwiLCJwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZSIsIkhpc3RvcnkiLCJwdXNoU3RhdGUiLCJoYXNoTmF2aWdhdGlvbiIsInBhdGhzIiwiZ2V0UGF0aFZhbHVlcyIsInNjcm9sbFRvU2xpZGUiLCJyZXBsYWNlU3RhdGUiLCJzZXRIaXN0b3J5UG9wU3RhdGUiLCJwYXRoQXJyYXkiLCJwYXRobmFtZSIsInBhcnQiLCJzZXRIaXN0b3J5IiwiY3VycmVudFN0YXRlIiwic2x1Z2lmeSIsImluY2x1ZGVzIiwic3RhdGUiLCJIYXNoTmF2aWdhdGlvbiIsIm9uSGFzaENhbmdlIiwibmV3SGFzaCIsInNldEhhc2giLCJ3YXRjaFN0YXRlIiwiQXV0b3BsYXkiLCIkYWN0aXZlU2xpZGVFbCIsInJldmVyc2VEaXJlY3Rpb24iLCJzdG9wT25MYXN0U2xpZGUiLCJwYXVzZSIsIndhaXRGb3JUcmFuc2l0aW9uIiwiRmFkZSIsInR4IiwidHkiLCJzbGlkZU9wYWNpdHkiLCJmYWRlRWZmZWN0IiwiY3Jvc3NGYWRlIiwiZXZlbnRUcmlnZ2VyZWQiLCJ0cmlnZ2VyRXZlbnRzIiwiQ3ViZSIsIiRjdWJlU2hhZG93RWwiLCJzd2lwZXJXaWR0aCIsInN3aXBlckhlaWdodCIsImN1YmVFZmZlY3QiLCJ3cmFwcGVyUm90YXRlIiwic2hhZG93Iiwic2hhZG93QW5nbGUiLCJzY2FsZTEiLCJzY2FsZTIiLCJzbGlkZUFuZ2xlIiwicm91bmQiLCJ0eiIsInNoYWRvd0JlZm9yZSIsInNoYWRvd0FmdGVyIiwic2xpZGVTaGFkb3dzIiwiLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luIiwiLW1vei10cmFuc2Zvcm0tb3JpZ2luIiwiLW1zLXRyYW5zZm9ybS1vcmlnaW4iLCJ0cmFuc2Zvcm0tb3JpZ2luIiwic2hhZG93T2Zmc2V0Iiwic2luIiwiY29zIiwic2hhZG93U2NhbGUiLCJ6RmFjdG9yIiwiRmxpcCIsImZsaXBFZmZlY3QiLCJsaW1pdFJvdGF0aW9uIiwicm90YXRlWSIsInJvdGF0ZVgiLCJ6SW5kZXgiLCJDb3ZlcmZsb3ciLCJjb3ZlcmZsb3dFZmZlY3QiLCJjZW50ZXIiLCJyb3RhdGUiLCJkZXB0aCIsIm9mZnNldE11bHRpcGxpZXIiLCJtb2RpZmllciIsInRyYW5zbGF0ZVoiLCJzdHJldGNoIiwiJHNoYWRvd0JlZm9yZUVsIiwiJHNoYWRvd0FmdGVyRWwiLCJzbGlkZVRyYW5zZm9ybSIsInBlcnNwZWN0aXZlT3JpZ2luIiwiVGh1bWJzIiwidGh1bWJzUGFyYW1zIiwidGh1bWJzIiwic3dpcGVyQ3JlYXRlZCIsInRodW1ic0NvbnRhaW5lckNsYXNzIiwib25UaHVtYkNsaWNrIiwiY3VycmVudEluZGV4IiwidGh1bWJzU3dpcGVyIiwic2xpZGVUaHVtYkFjdGl2ZUNsYXNzIiwiaW5pdGlhbCIsImN1cnJlbnRUaHVtYnNJbmRleCIsInByZXZUaHVtYnNJbmRleCIsIm5leHRUaHVtYnNJbmRleCIsIm5ld1RodW1ic0luZGV4IiwidGh1bWJzVG9BY3RpdmF0ZSIsInRodW1iQWN0aXZlQ2xhc3MiLCJoaWRlT25DbGljayIsInRvRWRnZSIsImZyb21FZGdlIiwiaXNIaWRkZW4iLCJidWxsZXRFbGVtZW50IiwibnVtYmVyIiwiYWN0aXZlSW5kZXhDaGFuZ2UiLCJzbmFwSW5kZXhDaGFuZ2UiLCJzbGlkZXNMZW5ndGhDaGFuZ2UiLCJzbmFwR3JpZExlbmd0aENoYW5nZSIsImRyYWdDbGFzcyIsImNvbnRhaW5lckNsYXNzIiwiem9vbWVkU2xpZGVDbGFzcyIsInRvdWNoU3RhcnQiLCJ0b3VjaEVuZCIsImRvdWJsZVRhcCIsImxvYWRPblRyYW5zaXRpb25TdGFydCIsInByZWxvYWRlckNsYXNzIiwic2Nyb2xsIiwic2Nyb2xsYmFyRHJhZ01vdmUiLCJub3RpZmljYXRpb25DbGFzcyIsInBhZ2luYXRpb25VcGRhdGUiLCJkaXNhYmxlT25JbnRlcmFjdGlvbiIsImJlZm9yZVRyYW5zaXRpb25TdGFydCIsInNsaWRlckZpcnN0TW92ZSIsInNsaWRlQ2hhbmdlIiwiYmVmb3JlRGVzdHJveSJdLCJtYXBwaW5ncyI6IkNBWUEsU0FBQUEsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxvQkFBQUMsT0FBQUEsT0FBQUQsUUFBQUQsSUFDQSxtQkFBQUcsUUFBQUEsT0FBQUMsSUFBQUQsT0FBQUgsSUFDQUQsRUFBQUEsR0FBQU0sTUFBQUMsT0FBQU4sSUFIQSxDQUlBTyxLQUFBLHdCQWFBLElBQUFD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dnVCLEtBQ0F1bkMsT0FBQS96QixRQURBeFQsS0FFQXVuQyxPQUFBajBCLFVBRUEyYixlQUFBLFdBQ0FqdkIsS0FDQXVuQyxPQUFBL3pCLFFBREF4VCxLQUVBdW5DLE9BQUFqMEIsVUFFQWtHLGNBQUEsU0FBQS9ULEdBQ0EsSUFDQW1pQyxFQURBNW5DLEtBQ0F1bkMsT0FBQS96QixPQUNBbzBCLEdBQ0FBLEVBQUFwdUIsY0FBQS9ULElBRUFza0MsY0FBQSxXQUNBLElBQ0FuQyxFQURBNW5DLEtBQ0F1bkMsT0FBQS96QixPQUNBbzBCLEdBRkE1bkMsS0FHQXVuQyxPQUFBQyxlQUFBSSxHQUNBQSxFQUFBaGEsY0EwQ0EsWUFQQSxJQUFBN3RCLEVBQUE4UyxNQUNBOVMsRUFBQThTLElBQUE5UyxFQUFBMEQsTUFBQW9QLElBQ0E5UyxFQUFBK1MsY0FBQS9TLEVBQUEwRCxNQUFBcVAsZUFHQS9TLEVBQUE4UyxJQUFBMUIsSUFFQXBSIiwiZmlsZSI6InBsdWdpbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN3aXBlciA0LjUuMVxuICogTW9zdCBtb2Rlcm4gbW9iaWxlIHRvdWNoIHNsaWRlciBhbmQgZnJhbWV3b3JrIHdpdGggaGFyZHdhcmUgYWNjZWxlcmF0ZWQgdHJhbnNpdGlvbnNcbiAqIGh0dHA6Ly93d3cuaWRhbmdlcm8udXMvc3dpcGVyL1xuICpcbiAqIENvcHlyaWdodCAyMDE0LTIwMTkgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBSZWxlYXNlZCBvbjogU2VwdGVtYmVyIDEzLCAyMDE5XG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC5Td2lwZXIgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCBmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogU1NSIFdpbmRvdyAxLjAuMVxuICAgKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICAgKlxuICAgKiBDb3B5cmlnaHQgMjAxOCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAgICpcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUXG4gICAqXG4gICAqIFJlbGVhc2VkIG9uOiBKdWx5IDE4LCAyMDE4XG4gICAqL1xuICB2YXIgZG9jID0gKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpID8ge1xuICAgIGJvZHk6IHt9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gICAgYWN0aXZlRWxlbWVudDoge1xuICAgICAgYmx1cjogZnVuY3Rpb24gYmx1cigpIHt9LFxuICAgICAgbm9kZU5hbWU6ICcnLFxuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24gcXVlcnlTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24gcXVlcnlTZWxlY3RvckFsbCgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIGdldEVsZW1lbnRCeUlkOiBmdW5jdGlvbiBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgY3JlYXRlRXZlbnQ6IGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdEV2ZW50OiBmdW5jdGlvbiBpbml0RXZlbnQoKSB7fSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICBzZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uIHNldEF0dHJpYnV0ZSgpIHt9LFxuICAgICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogZnVuY3Rpb24gZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICAgIGxvY2F0aW9uOiB7IGhhc2g6ICcnIH0sXG4gIH0gOiBkb2N1bWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIHZhciB3aW4gPSAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpID8ge1xuICAgIGRvY3VtZW50OiBkb2MsXG4gICAgbmF2aWdhdG9yOiB7XG4gICAgICB1c2VyQWdlbnQ6ICcnLFxuICAgIH0sXG4gICAgbG9jYXRpb246IHt9LFxuICAgIGhpc3Rvcnk6IHt9LFxuICAgIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICBnZXRDb21wdXRlZFN0eWxlOiBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gICAgSW1hZ2U6IGZ1bmN0aW9uIEltYWdlKCkge30sXG4gICAgRGF0ZTogZnVuY3Rpb24gRGF0ZSgpIHt9LFxuICAgIHNjcmVlbjoge30sXG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gc2V0VGltZW91dCgpIHt9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gY2xlYXJUaW1lb3V0KCkge30sXG4gIH0gOiB3aW5kb3c7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAvKipcbiAgICogRG9tNyAyLjEuM1xuICAgKiBNaW5pbWFsaXN0aWMgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBET00gbWFuaXB1bGF0aW9uLCB3aXRoIGEgalF1ZXJ5LWNvbXBhdGlibGUgQVBJXG4gICAqIGh0dHA6Ly9mcmFtZXdvcms3LmlvL2RvY3MvZG9tLmh0bWxcbiAgICpcbiAgICogQ29weXJpZ2h0IDIwMTksIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gICAqIFRoZSBpRGFuZ2Vyby51c1xuICAgKiBodHRwOi8vd3d3LmlkYW5nZXJvLnVzL1xuICAgKlxuICAgKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAgICpcbiAgICogUmVsZWFzZWQgb246IEZlYnJ1YXJ5IDExLCAyMDE5XG4gICAqL1xuXG4gIHZhciBEb203ID0gZnVuY3Rpb24gRG9tNyhhcnIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgLy8gQ3JlYXRlIGFycmF5LWxpa2Ugb2JqZWN0XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHNlbGZbaV0gPSBhcnJbaV07XG4gICAgfVxuICAgIHNlbGYubGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICAvLyBSZXR1cm4gY29sbGVjdGlvbiB3aXRoIG1ldGhvZHNcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBmdW5jdGlvbiAkKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICBpZiAoc2VsZWN0b3IgJiYgIWNvbnRleHQpIHtcbiAgICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgLy8gU3RyaW5nXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgZWxzO1xuICAgICAgICB2YXIgdGVtcFBhcmVudDtcbiAgICAgICAgdmFyIGh0bWwgPSBzZWxlY3Rvci50cmltKCk7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzwnKSA+PSAwICYmIGh0bWwuaW5kZXhPZignPicpID49IDApIHtcbiAgICAgICAgICB2YXIgdG9DcmVhdGUgPSAnZGl2JztcbiAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8bGknKSA9PT0gMCkgeyB0b0NyZWF0ZSA9ICd1bCc7IH1cbiAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dHInKSA9PT0gMCkgeyB0b0NyZWF0ZSA9ICd0Ym9keSc7IH1cbiAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGQnKSA9PT0gMCB8fCBodG1sLmluZGV4T2YoJzx0aCcpID09PSAwKSB7IHRvQ3JlYXRlID0gJ3RyJzsgfVxuICAgICAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0Ym9keScpID09PSAwKSB7IHRvQ3JlYXRlID0gJ3RhYmxlJzsgfVxuICAgICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxvcHRpb24nKSA9PT0gMCkgeyB0b0NyZWF0ZSA9ICdzZWxlY3QnOyB9XG4gICAgICAgICAgdGVtcFBhcmVudCA9IGRvYy5jcmVhdGVFbGVtZW50KHRvQ3JlYXRlKTtcbiAgICAgICAgICB0ZW1wUGFyZW50LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRlbXBQYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgYXJyLnB1c2godGVtcFBhcmVudC5jaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjb250ZXh0ICYmIHNlbGVjdG9yWzBdID09PSAnIycgJiYgIXNlbGVjdG9yLm1hdGNoKC9bIC48Pjp+XS8pKSB7XG4gICAgICAgICAgICAvLyBQdXJlIElEIHNlbGVjdG9yXG4gICAgICAgICAgICBlbHMgPSBbZG9jLmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yLnRyaW0oKS5zcGxpdCgnIycpWzFdKV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE90aGVyIHNlbGVjdG9yc1xuICAgICAgICAgICAgZWxzID0gKGNvbnRleHQgfHwgZG9jKS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yLnRyaW0oKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChlbHNbaV0pIHsgYXJyLnB1c2goZWxzW2ldKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciA9PT0gd2luIHx8IHNlbGVjdG9yID09PSBkb2MpIHtcbiAgICAgICAgLy8gTm9kZS9lbGVtZW50XG4gICAgICAgIGFyci5wdXNoKHNlbGVjdG9yKTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IubGVuZ3RoID4gMCAmJiBzZWxlY3RvclswXS5ub2RlVHlwZSkge1xuICAgICAgICAvLyBBcnJheSBvZiBlbGVtZW50cyBvciBpbnN0YW5jZSBvZiBEb21cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlbGVjdG9yLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgYXJyLnB1c2goc2VsZWN0b3JbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRG9tNyhhcnIpO1xuICB9XG5cbiAgJC5mbiA9IERvbTcucHJvdG90eXBlO1xuICAkLkNsYXNzID0gRG9tNztcbiAgJC5Eb203ID0gRG9tNztcblxuICBmdW5jdGlvbiB1bmlxdWUoYXJyKSB7XG4gICAgdmFyIHVuaXF1ZUFycmF5ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh1bmlxdWVBcnJheS5pbmRleE9mKGFycltpXSkgPT09IC0xKSB7IHVuaXF1ZUFycmF5LnB1c2goYXJyW2ldKTsgfVxuICAgIH1cbiAgICByZXR1cm4gdW5pcXVlQXJyYXk7XG4gIH1cblxuICAvLyBDbGFzc2VzIGFuZCBhdHRyaWJ1dGVzXG4gIGZ1bmN0aW9uIGFkZENsYXNzKGNsYXNzTmFtZSkge1xuICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2pdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpc1tqXS5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB7IHRoaXNbal0uY2xhc3NMaXN0LmFkZChjbGFzc2VzW2ldKTsgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVDbGFzcyhjbGFzc05hbWUpIHtcbiAgICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpc1tqXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykgeyB0aGlzW2pdLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3Nlc1tpXSk7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gaGFzQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgaWYgKCF0aGlzWzBdKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIHJldHVybiB0aGlzWzBdLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICB9XG4gIGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSkge1xuICAgIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2pdICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpc1tqXS5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnKSB7IHRoaXNbal0uY2xhc3NMaXN0LnRvZ2dsZShjbGFzc2VzW2ldKTsgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBhdHRyKGF0dHJzLCB2YWx1ZSkge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhdHRycyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIEdldCBhdHRyXG4gICAgICBpZiAodGhpc1swXSkgeyByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpOyB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIFNldCBhdHRyc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGFyZ3VtZW50cyQxLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAvLyBTdHJpbmdcbiAgICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0cnMsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9iamVjdFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgZm9yICh2YXIgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgICB0aGlzW2ldW2F0dHJOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgZnVuY3Rpb24gcmVtb3ZlQXR0cihhdHRyKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVsO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlbCA9IHRoaXNbMF07XG4gICAgICAvLyBHZXQgdmFsdWVcbiAgICAgIGlmIChlbCkge1xuICAgICAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiAoa2V5IGluIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpKSB7XG4gICAgICAgICAgcmV0dXJuIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkYXRhS2V5ID0gZWwuZ2V0QXR0cmlidXRlKChcImRhdGEtXCIgKyBrZXkpKTtcbiAgICAgICAgaWYgKGRhdGFLZXkpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YUtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBTZXQgdmFsdWVcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGVsID0gdGhpc1tpXTtcbiAgICAgIGlmICghZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkgeyBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlID0ge307IH1cbiAgICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvLyBUcmFuc2Zvcm1zXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBmdW5jdGlvbiB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgZWxTdHlsZSA9IHRoaXNbaV0uc3R5bGU7XG4gICAgICBlbFN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIGVsU3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiB0cmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgaWYgKHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGR1cmF0aW9uID0gZHVyYXRpb24gKyBcIm1zXCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgZWxTdHlsZSA9IHRoaXNbaV0uc3R5bGU7XG4gICAgICBlbFN0eWxlLndlYmtpdFRyYW5zaXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgICAgZWxTdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLy8gRXZlbnRzXG4gIGZ1bmN0aW9uIG9uKCkge1xuICAgIHZhciBhc3NpZ247XG5cbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG4gICAgdmFyIGV2ZW50VHlwZSA9IGFyZ3NbMF07XG4gICAgdmFyIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXTtcbiAgICB2YXIgbGlzdGVuZXIgPSBhcmdzWzJdO1xuICAgIHZhciBjYXB0dXJlID0gYXJnc1szXTtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIChhc3NpZ24gPSBhcmdzLCBldmVudFR5cGUgPSBhc3NpZ25bMF0sIGxpc3RlbmVyID0gYXNzaWduWzFdLCBjYXB0dXJlID0gYXNzaWduWzJdKTtcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoIWNhcHR1cmUpIHsgY2FwdHVyZSA9IGZhbHNlOyB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVMaXZlRXZlbnQoZSkge1xuICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgaWYgKCF0YXJnZXQpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgZXZlbnREYXRhID0gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXTtcbiAgICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHtcbiAgICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgICB9XG4gICAgICBpZiAoJCh0YXJnZXQpLmlzKHRhcmdldFNlbGVjdG9yKSkgeyBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGV2ZW50RGF0YSk7IH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgcGFyZW50cyA9ICQodGFyZ2V0KS5wYXJlbnRzKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBwYXJlbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICAgICAgaWYgKCQocGFyZW50c1trXSkuaXModGFyZ2V0U2VsZWN0b3IpKSB7IGxpc3RlbmVyLmFwcGx5KHBhcmVudHNba10sIGV2ZW50RGF0YSk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVFdmVudChlKSB7XG4gICAgICB2YXIgZXZlbnREYXRhID0gZSAmJiBlLnRhcmdldCA/IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW10gOiBbXTtcbiAgICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHtcbiAgICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgICB9XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudERhdGEpO1xuICAgIH1cbiAgICB2YXIgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gICAgdmFyIGo7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzW2ldO1xuICAgICAgaWYgKCF0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgZXZlbnRzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgdmFyIGV2ZW50ID0gZXZlbnRzW2pdO1xuICAgICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVycykgeyBlbC5kb203TGlzdGVuZXJzID0ge307IH1cbiAgICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdKSB7IGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdID0gW107IH1cbiAgICAgICAgICBlbC5kb203TGlzdGVuZXJzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUV2ZW50LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTGl2ZSBldmVudHNcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHZhciBldmVudCQxID0gZXZlbnRzW2pdO1xuICAgICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIHsgZWwuZG9tN0xpdmVMaXN0ZW5lcnMgPSB7fTsgfVxuICAgICAgICAgIGlmICghZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnQkMV0pIHsgZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnQkMV0gPSBbXTsgfVxuICAgICAgICAgIGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50JDFdLnB1c2goe1xuICAgICAgICAgICAgbGlzdGVuZXI6IGxpc3RlbmVyLFxuICAgICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlTGl2ZUV2ZW50LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQkMSwgaGFuZGxlTGl2ZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBvZmYoKSB7XG4gICAgdmFyIGFzc2lnbjtcblxuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcbiAgICB2YXIgZXZlbnRUeXBlID0gYXJnc1swXTtcbiAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBhcmdzWzFdO1xuICAgIHZhciBsaXN0ZW5lciA9IGFyZ3NbMl07XG4gICAgdmFyIGNhcHR1cmUgPSBhcmdzWzNdO1xuICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgKGFzc2lnbiA9IGFyZ3MsIGV2ZW50VHlwZSA9IGFzc2lnblswXSwgbGlzdGVuZXIgPSBhc3NpZ25bMV0sIGNhcHR1cmUgPSBhc3NpZ25bMl0pO1xuICAgICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICghY2FwdHVyZSkgeyBjYXB0dXJlID0gZmFsc2U7IH1cblxuICAgIHZhciBldmVudHMgPSBldmVudFR5cGUuc3BsaXQoJyAnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGV2ZW50ID0gZXZlbnRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXNbal07XG4gICAgICAgIHZhciBoYW5kbGVycyA9ICh2b2lkIDApO1xuICAgICAgICBpZiAoIXRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXN0ZW5lcnMpIHtcbiAgICAgICAgICBoYW5kbGVycyA9IGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXZlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZXJzICYmIGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAodmFyIGsgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBrID49IDA7IGsgLT0gMSkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBoYW5kbGVyc1trXTtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgZXZlbnRzID0gYXJnc1swXS5zcGxpdCgnICcpO1xuICAgIHZhciBldmVudERhdGEgPSBhcmdzWzFdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgZXZlbnQgPSBldmVudHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdmFyIGVsID0gdGhpc1tqXTtcbiAgICAgICAgdmFyIGV2dCA9ICh2b2lkIDApO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGV2dCA9IG5ldyB3aW4uQ3VzdG9tRXZlbnQoZXZlbnQsIHtcbiAgICAgICAgICAgIGRldGFpbDogZXZlbnREYXRhLFxuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBldnQgPSBkb2MuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgICAgZXZ0LmluaXRFdmVudChldmVudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgZXZ0LmRldGFpbCA9IGV2ZW50RGF0YTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgZWwuZG9tN0V2ZW50RGF0YSA9IGFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChkYXRhLCBkYXRhSW5kZXgpIHsgcmV0dXJuIGRhdGFJbmRleCA+IDA7IH0pO1xuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBbXTtcbiAgICAgICAgZGVsZXRlIGVsLmRvbTdFdmVudERhdGE7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoY2FsbGJhY2spIHtcbiAgICB2YXIgZXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcbiAgICB2YXIgZG9tID0gdGhpcztcbiAgICB2YXIgaTtcbiAgICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgICAgLyoganNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHsgcmV0dXJuOyB9XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGUpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBkb20ub2ZmKGV2ZW50c1tpXSwgZmlyZUNhbGxCYWNrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGRvbS5vbihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIG91dGVyV2lkdGgoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHZhciBzdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuICAgICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGg7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIG91dGVySGVpZ2h0KGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICB2YXIgc3R5bGVzID0gdGhpcy5zdHlsZXMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0ICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgICAgdmFyIGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGJvZHkgPSBkb2MuYm9keTtcbiAgICAgIHZhciBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgICAgIHZhciBjbGllbnRMZWZ0ID0gZWwuY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcbiAgICAgIHZhciBzY3JvbGxUb3AgPSBlbCA9PT0gd2luID8gd2luLnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW4gPyB3aW4uc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IChib3gudG9wICsgc2Nyb2xsVG9wKSAtIGNsaWVudFRvcCxcbiAgICAgICAgbGVmdDogKGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCkgLSBjbGllbnRMZWZ0LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBzdHlsZXMoKSB7XG4gICAgaWYgKHRoaXNbMF0pIHsgcmV0dXJuIHdpbi5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpOyB9XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNzcyhwcm9wcywgdmFsdWUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHRoaXNbMF0pIHsgcmV0dXJuIHdpbi5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcHMpOyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHRoaXNbaV0uc3R5bGVbcHJvcHNdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBjb2xsZWN0aW9uIHBhc3NpbmcgZWxlbWVudHMgdG8gYGNhbGxiYWNrYFxuICBmdW5jdGlvbiBlYWNoKGNhbGxiYWNrKSB7XG4gICAgLy8gRG9uJ3QgYm90aGVyIGNvbnRpbnVpbmcgd2l0aG91dCBhIGNhbGxiYWNrXG4gICAgaWYgKCFjYWxsYmFjaykgeyByZXR1cm4gdGhpczsgfVxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgY3VycmVudCBjb2xsZWN0aW9uXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAvLyBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpc1tpXSwgaSwgdGhpc1tpXSkgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIEVuZCB0aGUgbG9vcCBlYXJseVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmV0dXJuIGB0aGlzYCB0byBhbGxvdyBjaGFpbmVkIERPTSBvcGVyYXRpb25zXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGZ1bmN0aW9uIGh0bWwoaHRtbCkge1xuICAgIGlmICh0eXBlb2YgaHRtbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLmlubmVySFRNTCA9IGh0bWw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBmdW5jdGlvbiB0ZXh0KHRleHQpIHtcbiAgICBpZiAodHlwZW9mIHRleHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodGhpc1swXSkge1xuICAgICAgICByZXR1cm4gdGhpc1swXS50ZXh0Q29udGVudC50cmltKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRoaXNbaV0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgdmFyIGNvbXBhcmVXaXRoO1xuICAgIHZhciBpO1xuICAgIGlmICghZWwgfHwgdHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGVsLm1hdGNoZXMpIHsgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpOyB9XG4gICAgICBlbHNlIGlmIChlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHsgcmV0dXJuIGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7IH1cbiAgICAgIGVsc2UgaWYgKGVsLm1zTWF0Y2hlc1NlbGVjdG9yKSB7IHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7IH1cblxuICAgICAgY29tcGFyZVdpdGggPSAkKHNlbGVjdG9yKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChzZWxlY3RvciA9PT0gZG9jKSB7IHJldHVybiBlbCA9PT0gZG9jOyB9XG4gICAgZWxzZSBpZiAoc2VsZWN0b3IgPT09IHdpbikgeyByZXR1cm4gZWwgPT09IHdpbjsgfVxuXG4gICAgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgY29tcGFyZVdpdGggPSBzZWxlY3Rvci5ub2RlVHlwZSA/IFtzZWxlY3Rvcl0gOiBzZWxlY3RvcjtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBpbmRleCgpIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzWzBdO1xuICAgIHZhciBpO1xuICAgIGlmIChjaGlsZCkge1xuICAgICAgaSA9IDA7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgeyBpICs9IDE7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBmdW5jdGlvbiBlcShpbmRleCkge1xuICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSB7IHJldHVybiB0aGlzOyB9XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciByZXR1cm5JbmRleDtcbiAgICBpZiAoaW5kZXggPiBsZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgIH1cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm5JbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgICAgaWYgKHJldHVybkluZGV4IDwgMCkgeyByZXR1cm4gbmV3IERvbTcoW10pOyB9XG4gICAgICByZXR1cm4gbmV3IERvbTcoW3RoaXNbcmV0dXJuSW5kZXhdXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRG9tNyhbdGhpc1tpbmRleF1dKTtcbiAgfVxuICBmdW5jdGlvbiBhcHBlbmQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIG5ld0NoaWxkO1xuXG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBhcmdzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICBuZXdDaGlsZCA9IGFyZ3Nba107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB2YXIgdGVtcERpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkO1xuICAgICAgICAgIHdoaWxlICh0ZW1wRGl2LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZFtqXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gcHJlcGVuZChuZXdDaGlsZCkge1xuICAgIHZhciBpO1xuICAgIHZhciBqO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdGVtcERpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcbiAgICAgICAgZm9yIChqID0gdGVtcERpdi5jaGlsZE5vZGVzLmxlbmd0aCAtIDE7IGogPj0gMDsgaiAtPSAxKSB7XG4gICAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUodGVtcERpdi5jaGlsZE5vZGVzW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZFtqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGQsIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIG5leHQoc2VsZWN0b3IpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nICYmICQodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgRG9tNyhbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpIHsgcmV0dXJuIG5ldyBEb203KFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pOyB9XG4gICAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICB9XG4gIGZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgICB2YXIgbmV4dEVscyA9IFtdO1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgeyByZXR1cm4gbmV3IERvbTcoW10pOyB9XG4gICAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgICAgdmFyIG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJChuZXh0KS5pcyhzZWxlY3RvcikpIHsgbmV4dEVscy5wdXNoKG5leHQpOyB9XG4gICAgICB9IGVsc2UgeyBuZXh0RWxzLnB1c2gobmV4dCk7IH1cbiAgICAgIGVsID0gbmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEb203KG5leHRFbHMpO1xuICB9XG4gIGZ1bmN0aW9uIHByZXYoc2VsZWN0b3IpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICQoZWwucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBEb203KFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHsgcmV0dXJuIG5ldyBEb203KFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7IH1cbiAgICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gIH1cbiAgZnVuY3Rpb24gcHJldkFsbChzZWxlY3Rvcikge1xuICAgIHZhciBwcmV2RWxzID0gW107XG4gICAgdmFyIGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSB7IHJldHVybiBuZXcgRG9tNyhbXSk7IH1cbiAgICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgICAgdmFyIHByZXYgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQocHJldikuaXMoc2VsZWN0b3IpKSB7IHByZXZFbHMucHVzaChwcmV2KTsgfVxuICAgICAgfSBlbHNlIHsgcHJldkVscy5wdXNoKHByZXYpOyB9XG4gICAgICBlbCA9IHByZXY7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRG9tNyhwcmV2RWxzKTtcbiAgfVxuICBmdW5jdGlvbiBwYXJlbnQoc2VsZWN0b3IpIHtcbiAgICB2YXIgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpc1tpXS5wYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIGlmICgkKHRoaXNbaV0ucGFyZW50Tm9kZSkuaXMoc2VsZWN0b3IpKSB7IHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICQodW5pcXVlKHBhcmVudHMpKTtcbiAgfVxuICBmdW5jdGlvbiBwYXJlbnRzKHNlbGVjdG9yKSB7XG4gICAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXNbaV0ucGFyZW50Tm9kZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICBpZiAoJChwYXJlbnQpLmlzKHNlbGVjdG9yKSkgeyBwYXJlbnRzLnB1c2gocGFyZW50KTsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJCh1bmlxdWUocGFyZW50cykpO1xuICB9XG4gIGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgICB2YXIgY2xvc2VzdCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICB9XG4gICAgaWYgKCFjbG9zZXN0LmlzKHNlbGVjdG9yKSkge1xuICAgICAgY2xvc2VzdCA9IGNsb3Nlc3QucGFyZW50cyhzZWxlY3RvcikuZXEoMCk7XG4gICAgfVxuICAgIHJldHVybiBjbG9zZXN0O1xuICB9XG4gIGZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcbiAgICB2YXIgZm91bmRFbGVtZW50cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZm91bmQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgZm91bmRFbGVtZW50cy5wdXNoKGZvdW5kW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEb203KGZvdW5kRWxlbWVudHMpO1xuICB9XG4gIGZ1bmN0aW9uIGNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBjaGlsZE5vZGVzID0gdGhpc1tpXS5jaGlsZE5vZGVzO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICAgIGlmIChjaGlsZE5vZGVzW2pdLm5vZGVUeXBlID09PSAxKSB7IGNoaWxkcmVuLnB1c2goY2hpbGROb2Rlc1tqXSk7IH1cbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZE5vZGVzW2pdLm5vZGVUeXBlID09PSAxICYmICQoY2hpbGROb2Rlc1tqXSkuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IERvbTcodW5pcXVlKGNoaWxkcmVuKSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSkgeyB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7IH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gYWRkKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciBkb20gPSB0aGlzO1xuICAgIHZhciBpO1xuICAgIHZhciBqO1xuICAgIGZvciAoaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgdG9BZGQgPSAkKGFyZ3NbaV0pO1xuICAgICAgZm9yIChqID0gMDsgaiA8IHRvQWRkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGRvbVtkb20ubGVuZ3RoXSA9IHRvQWRkW2pdO1xuICAgICAgICBkb20ubGVuZ3RoICs9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkb207XG4gIH1cblxuICB2YXIgTWV0aG9kcyA9IHtcbiAgICBhZGRDbGFzczogYWRkQ2xhc3MsXG4gICAgcmVtb3ZlQ2xhc3M6IHJlbW92ZUNsYXNzLFxuICAgIGhhc0NsYXNzOiBoYXNDbGFzcyxcbiAgICB0b2dnbGVDbGFzczogdG9nZ2xlQ2xhc3MsXG4gICAgYXR0cjogYXR0cixcbiAgICByZW1vdmVBdHRyOiByZW1vdmVBdHRyLFxuICAgIGRhdGE6IGRhdGEsXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgICBvbjogb24sXG4gICAgb2ZmOiBvZmYsXG4gICAgdHJpZ2dlcjogdHJpZ2dlcixcbiAgICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLFxuICAgIG91dGVyV2lkdGg6IG91dGVyV2lkdGgsXG4gICAgb3V0ZXJIZWlnaHQ6IG91dGVySGVpZ2h0LFxuICAgIG9mZnNldDogb2Zmc2V0LFxuICAgIGNzczogY3NzLFxuICAgIGVhY2g6IGVhY2gsXG4gICAgaHRtbDogaHRtbCxcbiAgICB0ZXh0OiB0ZXh0LFxuICAgIGlzOiBpcyxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZXE6IGVxLFxuICAgIGFwcGVuZDogYXBwZW5kLFxuICAgIHByZXBlbmQ6IHByZXBlbmQsXG4gICAgbmV4dDogbmV4dCxcbiAgICBuZXh0QWxsOiBuZXh0QWxsLFxuICAgIHByZXY6IHByZXYsXG4gICAgcHJldkFsbDogcHJldkFsbCxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBwYXJlbnRzOiBwYXJlbnRzLFxuICAgIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gICAgZmluZDogZmluZCxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgYWRkOiBhZGQsXG4gICAgc3R5bGVzOiBzdHlsZXMsXG4gIH07XG5cbiAgT2JqZWN0LmtleXMoTWV0aG9kcykuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgICQuZm5bbWV0aG9kTmFtZV0gPSAkLmZuW21ldGhvZE5hbWVdIHx8IE1ldGhvZHNbbWV0aG9kTmFtZV07XG4gIH0pO1xuXG4gIHZhciBVdGlscyA9IHtcbiAgICBkZWxldGVQcm9wczogZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gb2JqO1xuICAgICAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvYmplY3Rba2V5XSA9IG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG5leHRUaWNrOiBmdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgICAgIGlmICggZGVsYXkgPT09IHZvaWQgMCApIGRlbGF5ID0gMDtcblxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbiAgICB9LFxuICAgIG5vdzogZnVuY3Rpb24gbm93KCkge1xuICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgfSxcbiAgICBnZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcykge1xuICAgICAgaWYgKCBheGlzID09PSB2b2lkIDAgKSBheGlzID0gJ3gnO1xuXG4gICAgICB2YXIgbWF0cml4O1xuICAgICAgdmFyIGN1clRyYW5zZm9ybTtcbiAgICAgIHZhciB0cmFuc2Zvcm1NYXRyaXg7XG5cbiAgICAgIHZhciBjdXJTdHlsZSA9IHdpbi5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcblxuICAgICAgaWYgKHdpbi5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICAgICAgY3VyVHJhbnNmb3JtID0gY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICAgICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLnJlcGxhY2UoJywnLCAnLicpOyB9KS5qb2luKCcsICcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIFdlYmtpdCBjaG9rZSB3aGVuICdub25lJyBpcyBwYXNzZWQ7IHBhc3NcbiAgICAgICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG4gICAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW4uV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICAgICAgaWYgKHdpbi5XZWJLaXRDU1NNYXRyaXgpIHsgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTsgfVxuICAgICAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgICAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgeyBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pOyB9XG4gICAgICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgICAgICBlbHNlIHsgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pOyB9XG4gICAgICB9XG4gICAgICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgICAgIGlmICh3aW4uV2ViS2l0Q1NTTWF0cml4KSB7IGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDI7IH1cbiAgICAgICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICAgICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIHsgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTNdKTsgfVxuICAgICAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgICAgZWxzZSB7IGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xuICAgIH0sXG4gICAgcGFyc2VVcmxRdWVyeTogZnVuY3Rpb24gcGFyc2VVcmxRdWVyeSh1cmwpIHtcbiAgICAgIHZhciBxdWVyeSA9IHt9O1xuICAgICAgdmFyIHVybFRvUGFyc2UgPSB1cmwgfHwgd2luLmxvY2F0aW9uLmhyZWY7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBwYXJhbXM7XG4gICAgICB2YXIgcGFyYW07XG4gICAgICB2YXIgbGVuZ3RoO1xuICAgICAgaWYgKHR5cGVvZiB1cmxUb1BhcnNlID09PSAnc3RyaW5nJyAmJiB1cmxUb1BhcnNlLmxlbmd0aCkge1xuICAgICAgICB1cmxUb1BhcnNlID0gdXJsVG9QYXJzZS5pbmRleE9mKCc/JykgPiAtMSA/IHVybFRvUGFyc2UucmVwbGFjZSgvXFxTKlxcPy8sICcnKSA6ICcnO1xuICAgICAgICBwYXJhbXMgPSB1cmxUb1BhcnNlLnNwbGl0KCcmJykuZmlsdGVyKGZ1bmN0aW9uIChwYXJhbXNQYXJ0KSB7IHJldHVybiBwYXJhbXNQYXJ0ICE9PSAnJzsgfSk7XG4gICAgICAgIGxlbmd0aCA9IHBhcmFtcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgcGFyYW0gPSBwYXJhbXNbaV0ucmVwbGFjZSgvI1xcUysvZywgJycpLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgcXVlcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtWzBdKV0gPSB0eXBlb2YgcGFyYW1bMV0gPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtWzFdKSB8fCAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgIH0sXG4gICAgaXNPYmplY3Q6IGZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIG8uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgICB9LFxuICAgIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuJDEgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4kMS0tICkgYXJnc1sgbGVuJDEgXSA9IGFyZ3VtZW50c1sgbGVuJDEgXTtcblxuICAgICAgdmFyIHRvID0gT2JqZWN0KGFyZ3NbMF0pO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBuZXh0U291cmNlID0gYXJnc1tpXTtcbiAgICAgICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG4gICAgICAgICAgZm9yICh2YXIgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICAgICAgdmFyIG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgICAgIGlmIChVdGlscy5pc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgVXRpbHMuaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgICBVdGlscy5leHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFVdGlscy5pc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgVXRpbHMuaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuICAgICAgICAgICAgICAgIFV0aWxzLmV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdG87XG4gICAgfSxcbiAgfTtcblxuICB2YXIgU3VwcG9ydCA9IChmdW5jdGlvbiBTdXBwb3J0KCkge1xuICAgIHZhciB0ZXN0RGl2ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJldHVybiB7XG4gICAgICB0b3VjaDogKHdpbi5Nb2Rlcm5penIgJiYgd2luLk1vZGVybml6ci50b3VjaCA9PT0gdHJ1ZSkgfHwgKGZ1bmN0aW9uIGNoZWNrVG91Y2goKSB7XG4gICAgICAgIHJldHVybiAhISgod2luLm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApIHx8ICgnb250b3VjaHN0YXJ0JyBpbiB3aW4pIHx8ICh3aW4uRG9jdW1lbnRUb3VjaCAmJiBkb2MgaW5zdGFuY2VvZiB3aW4uRG9jdW1lbnRUb3VjaCkpO1xuICAgICAgfSgpKSxcblxuICAgICAgcG9pbnRlckV2ZW50czogISEod2luLm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCB8fCB3aW4uUG9pbnRlckV2ZW50IHx8ICgnbWF4VG91Y2hQb2ludHMnIGluIHdpbi5uYXZpZ2F0b3IgJiYgd2luLm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApKSxcbiAgICAgIHByZWZpeGVkUG9pbnRlckV2ZW50czogISF3aW4ubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQsXG5cbiAgICAgIHRyYW5zaXRpb246IChmdW5jdGlvbiBjaGVja1RyYW5zaXRpb24oKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHRlc3REaXYuc3R5bGU7XG4gICAgICAgIHJldHVybiAoJ3RyYW5zaXRpb24nIGluIHN0eWxlIHx8ICd3ZWJraXRUcmFuc2l0aW9uJyBpbiBzdHlsZSB8fCAnTW96VHJhbnNpdGlvbicgaW4gc3R5bGUpO1xuICAgICAgfSgpKSxcbiAgICAgIHRyYW5zZm9ybXMzZDogKHdpbi5Nb2Rlcm5penIgJiYgd2luLk1vZGVybml6ci5jc3N0cmFuc2Zvcm1zM2QgPT09IHRydWUpIHx8IChmdW5jdGlvbiBjaGVja1RyYW5zZm9ybXMzZCgpIHtcbiAgICAgICAgdmFyIHN0eWxlID0gdGVzdERpdi5zdHlsZTtcbiAgICAgICAgcmV0dXJuICgnd2Via2l0UGVyc3BlY3RpdmUnIGluIHN0eWxlIHx8ICdNb3pQZXJzcGVjdGl2ZScgaW4gc3R5bGUgfHwgJ09QZXJzcGVjdGl2ZScgaW4gc3R5bGUgfHwgJ01zUGVyc3BlY3RpdmUnIGluIHN0eWxlIHx8ICdwZXJzcGVjdGl2ZScgaW4gc3R5bGUpO1xuICAgICAgfSgpKSxcblxuICAgICAgZmxleGJveDogKGZ1bmN0aW9uIGNoZWNrRmxleGJveCgpIHtcbiAgICAgICAgdmFyIHN0eWxlID0gdGVzdERpdi5zdHlsZTtcbiAgICAgICAgdmFyIHN0eWxlcyA9ICgnYWxpZ25JdGVtcyB3ZWJraXRBbGlnbkl0ZW1zIHdlYmtpdEJveEFsaWduIG1zRmxleEFsaWduIG1vekJveEFsaWduIHdlYmtpdEZsZXhEaXJlY3Rpb24gbXNGbGV4RGlyZWN0aW9uIG1vekJveERpcmVjdGlvbiBtb3pCb3hPcmllbnQgd2Via2l0Qm94RGlyZWN0aW9uIHdlYmtpdEJveE9yaWVudCcpLnNwbGl0KCcgJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHN0eWxlc1tpXSBpbiBzdHlsZSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0oKSksXG5cbiAgICAgIG9ic2VydmVyOiAoZnVuY3Rpb24gY2hlY2tPYnNlcnZlcigpIHtcbiAgICAgICAgcmV0dXJuICgnTXV0YXRpb25PYnNlcnZlcicgaW4gd2luIHx8ICdXZWJraXRNdXRhdGlvbk9ic2VydmVyJyBpbiB3aW4pO1xuICAgICAgfSgpKSxcblxuICAgICAgcGFzc2l2ZUxpc3RlbmVyOiAoZnVuY3Rpb24gY2hlY2tQYXNzaXZlTGlzdGVuZXIoKSB7XG4gICAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gTm8gc3VwcG9ydFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgICB9KCkpLFxuXG4gICAgICBnZXN0dXJlczogKGZ1bmN0aW9uIGNoZWNrR2VzdHVyZXMoKSB7XG4gICAgICAgIHJldHVybiAnb25nZXN0dXJlc3RhcnQnIGluIHdpbjtcbiAgICAgIH0oKSksXG4gICAgfTtcbiAgfSgpKTtcblxuICB2YXIgQnJvd3NlciA9IChmdW5jdGlvbiBCcm93c2VyKCkge1xuICAgIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgICAgdmFyIHVhID0gd2luLm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiAodWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBpc0lFOiAhIXdpbi5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9UcmlkZW50L2cpIHx8ICEhd2luLm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL01TSUUvZyksXG4gICAgICBpc0VkZ2U6ICEhd2luLm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0VkZ2UvZyksXG4gICAgICBpc1NhZmFyaTogaXNTYWZhcmkoKSxcbiAgICAgIGlzVWlXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luLm5hdmlnYXRvci51c2VyQWdlbnQpLFxuICAgIH07XG4gIH0oKSk7XG5cbiAgdmFyIFN3aXBlckNsYXNzID0gZnVuY3Rpb24gU3dpcGVyQ2xhc3MocGFyYW1zKSB7XG4gICAgaWYgKCBwYXJhbXMgPT09IHZvaWQgMCApIHBhcmFtcyA9IHt9O1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYucGFyYW1zID0gcGFyYW1zO1xuXG4gICAgLy8gRXZlbnRzXG4gICAgc2VsZi5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcblxuICAgIGlmIChzZWxmLnBhcmFtcyAmJiBzZWxmLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc2VsZi5wYXJhbXMub24pLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICBzZWxmLm9uKGV2ZW50TmFtZSwgc2VsZi5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0YXRpY0FjY2Vzc29ycyA9IHsgY29tcG9uZW50czogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gIFN3aXBlckNsYXNzLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uIChldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gc2VsZjsgfVxuICAgIHZhciBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHsgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107IH1cbiAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XVttZXRob2RdKGhhbmRsZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIFN3aXBlckNsYXNzLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSAoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIHNlbGY7IH1cbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuICAgICAgaWYgKG9uY2VIYW5kbGVyLmY3cHJveHkpIHtcbiAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLmY3cHJveHk7XG4gICAgICB9XG4gICAgfVxuICAgIG9uY2VIYW5kbGVyLmY3cHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfTtcblxuICBTd2lwZXJDbGFzcy5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gb2ZmIChldmVudHMsIGhhbmRsZXIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgeyByZXR1cm4gc2VsZjsgfVxuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyLCBpbmRleCkge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgKGV2ZW50SGFuZGxlci5mN3Byb3h5ICYmIGV2ZW50SGFuZGxlci5mN3Byb3h5ID09PSBoYW5kbGVyKSkge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICBTd2lwZXJDbGFzcy5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQgKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgeyByZXR1cm4gc2VsZjsgfVxuICAgIHZhciBldmVudHM7XG4gICAgdmFyIGRhdGE7XG4gICAgdmFyIGNvbnRleHQ7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgZGF0YSA9IGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGgpO1xuICAgICAgY29udGV4dCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF0uZXZlbnRzO1xuICAgICAgZGF0YSA9IGFyZ3NbMF0uZGF0YTtcbiAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjtcbiAgICB9XG4gICAgdmFyIGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgZXZlbnRzQXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gW107XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgICAgICAgICBoYW5kbGVycy5wdXNoKGV2ZW50SGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9O1xuXG4gIFN3aXBlckNsYXNzLnByb3RvdHlwZS51c2VNb2R1bGVzUGFyYW1zID0gZnVuY3Rpb24gdXNlTW9kdWxlc1BhcmFtcyAoaW5zdGFuY2VQYXJhbXMpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgIGlmICghaW5zdGFuY2UubW9kdWxlcykgeyByZXR1cm47IH1cbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgIC8vIEV4dGVuZCBwYXJhbXNcbiAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgIFV0aWxzLmV4dGVuZChpbnN0YW5jZVBhcmFtcywgbW9kdWxlLnBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgU3dpcGVyQ2xhc3MucHJvdG90eXBlLnVzZU1vZHVsZXMgPSBmdW5jdGlvbiB1c2VNb2R1bGVzIChtb2R1bGVzUGFyYW1zKSB7XG4gICAgICBpZiAoIG1vZHVsZXNQYXJhbXMgPT09IHZvaWQgMCApIG1vZHVsZXNQYXJhbXMgPSB7fTtcblxuICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSB7IHJldHVybjsgfVxuICAgIE9iamVjdC5rZXlzKGluc3RhbmNlLm1vZHVsZXMpLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZU5hbWUpIHtcbiAgICAgIHZhciBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgdmFyIG1vZHVsZVBhcmFtcyA9IG1vZHVsZXNQYXJhbXNbbW9kdWxlTmFtZV0gfHwge307XG4gICAgICAvLyBFeHRlbmQgaW5zdGFuY2UgbWV0aG9kcyBhbmQgcHJvcHNcbiAgICAgIGlmIChtb2R1bGUuaW5zdGFuY2UpIHtcbiAgICAgICAgT2JqZWN0LmtleXMobW9kdWxlLmluc3RhbmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVQcm9wTmFtZSkge1xuICAgICAgICAgIHZhciBtb2R1bGVQcm9wID0gbW9kdWxlLmluc3RhbmNlW21vZHVsZVByb3BOYW1lXTtcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGluc3RhbmNlW21vZHVsZVByb3BOYW1lXSA9IG1vZHVsZVByb3AuYmluZChpbnN0YW5jZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluc3RhbmNlW21vZHVsZVByb3BOYW1lXSA9IG1vZHVsZVByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICAgIGlmIChtb2R1bGUub24gJiYgaW5zdGFuY2Uub24pIHtcbiAgICAgICAgT2JqZWN0LmtleXMobW9kdWxlLm9uKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVFdmVudE5hbWUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5vbihtb2R1bGVFdmVudE5hbWUsIG1vZHVsZS5vblttb2R1bGVFdmVudE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1vZHVsZSBjcmVhdGUgY2FsbGJhY2tcbiAgICAgIGlmIChtb2R1bGUuY3JlYXRlKSB7XG4gICAgICAgIG1vZHVsZS5jcmVhdGUuYmluZChpbnN0YW5jZSkobW9kdWxlUGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBzdGF0aWNBY2Nlc3NvcnMuY29tcG9uZW50cy5zZXQgPSBmdW5jdGlvbiAoY29tcG9uZW50cykge1xuICAgIHZhciBDbGFzcyA9IHRoaXM7XG4gICAgaWYgKCFDbGFzcy51c2UpIHsgcmV0dXJuOyB9XG4gICAgQ2xhc3MudXNlKGNvbXBvbmVudHMpO1xuICB9O1xuXG4gIFN3aXBlckNsYXNzLmluc3RhbGxNb2R1bGUgPSBmdW5jdGlvbiBpbnN0YWxsTW9kdWxlIChtb2R1bGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoIGxlbi0tID4gMCApIHBhcmFtc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgIHZhciBDbGFzcyA9IHRoaXM7XG4gICAgaWYgKCFDbGFzcy5wcm90b3R5cGUubW9kdWxlcykgeyBDbGFzcy5wcm90b3R5cGUubW9kdWxlcyA9IHt9OyB9XG4gICAgdmFyIG5hbWUgPSBtb2R1bGUubmFtZSB8fCAoKChPYmplY3Qua2V5cyhDbGFzcy5wcm90b3R5cGUubW9kdWxlcykubGVuZ3RoKSArIFwiX1wiICsgKFV0aWxzLm5vdygpKSkpO1xuICAgIENsYXNzLnByb3RvdHlwZS5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuICAgIC8vIFByb3RvdHlwZVxuICAgIGlmIChtb2R1bGUucHJvdG8pIHtcbiAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5wcm90bykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIENsYXNzLnByb3RvdHlwZVtrZXldID0gbW9kdWxlLnByb3RvW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ2xhc3NcbiAgICBpZiAobW9kdWxlLnN0YXRpYykge1xuICAgICAgT2JqZWN0LmtleXMobW9kdWxlLnN0YXRpYykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIENsYXNzW2tleV0gPSBtb2R1bGUuc3RhdGljW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ2FsbGJhY2tcbiAgICBpZiAobW9kdWxlLmluc3RhbGwpIHtcbiAgICAgIG1vZHVsZS5pbnN0YWxsLmFwcGx5KENsYXNzLCBwYXJhbXMpO1xuICAgIH1cbiAgICByZXR1cm4gQ2xhc3M7XG4gIH07XG5cbiAgU3dpcGVyQ2xhc3MudXNlID0gZnVuY3Rpb24gdXNlIChtb2R1bGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoIGxlbi0tID4gMCApIHBhcmFtc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICAgIHZhciBDbGFzcyA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0dXJuIENsYXNzLmluc3RhbGxNb2R1bGUobSk7IH0pO1xuICAgICAgcmV0dXJuIENsYXNzO1xuICAgIH1cbiAgICByZXR1cm4gQ2xhc3MuaW5zdGFsbE1vZHVsZS5hcHBseShDbGFzcywgWyBtb2R1bGUgXS5jb25jYXQoIHBhcmFtcyApKTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3dpcGVyQ2xhc3MsIHN0YXRpY0FjY2Vzc29ycyApO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNpemUgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB3aWR0aDtcbiAgICB2YXIgaGVpZ2h0O1xuICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgd2lkdGggPSAkZWxbMF0uY2xpZW50V2lkdGg7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVpZ2h0ID0gJGVsWzBdLmNsaWVudEhlaWdodDtcbiAgICB9XG4gICAgaWYgKCh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHx8IChoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuICAgIHdpZHRoID0gd2lkdGggLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWxlZnQnKSwgMTApIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1yaWdodCcpLCAxMCk7XG4gICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy10b3AnKSwgMTApIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1ib3R0b20nKSwgMTApO1xuXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodCxcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcyAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG5cbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciBzd2lwZXJTaXplID0gc3dpcGVyLnNpemU7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgdmFyIHdyb25nUlRMID0gc3dpcGVyLndyb25nUlRMO1xuICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIHZhciBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICB2YXIgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSkpO1xuICAgIHZhciBzbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDtcbiAgICB2YXIgc25hcEdyaWQgPSBbXTtcbiAgICB2YXIgc2xpZGVzR3JpZCA9IFtdO1xuICAgIHZhciBzbGlkZXNTaXplc0dyaWQgPSBbXTtcblxuICAgIHZhciBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlO1xuICAgIGlmICh0eXBlb2Ygb2Zmc2V0QmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgICB9XG5cbiAgICB2YXIgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gICAgaWYgKHR5cGVvZiBvZmZzZXRBZnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICB2YXIgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcblxuICAgIHZhciBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIHZhciBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgICB2YXIgcHJldlNsaWRlU2l6ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHNwYWNlQmV0d2VlbiA9IChwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCkgKiBzd2lwZXJTaXplO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47XG5cbiAgICAvLyByZXNldCBtYXJnaW5zXG4gICAgaWYgKHJ0bCkgeyBzbGlkZXMuY3NzKHsgbWFyZ2luTGVmdDogJycsIG1hcmdpblRvcDogJycgfSk7IH1cbiAgICBlbHNlIHsgc2xpZGVzLmNzcyh7IG1hcmdpblJpZ2h0OiAnJywgbWFyZ2luQm90dG9tOiAnJyB9KTsgfVxuXG4gICAgdmFyIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICBpZiAoTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSA9PT0gc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IHNsaWRlc0xlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnKSB7XG4gICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBwYXJhbXMuc2xpZGVzUGVyVmlldyAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENhbGMgc2xpZGVzXG4gICAgdmFyIHNsaWRlU2l6ZTtcbiAgICB2YXIgc2xpZGVzUGVyQ29sdW1uID0gcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICB2YXIgc2xpZGVzUGVyUm93ID0gc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHNsaWRlc1BlckNvbHVtbjtcbiAgICB2YXIgbnVtRnVsbENvbHVtbnMgPSBNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgICB2YXIgc2xpZGUgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICAgICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgICAgICB2YXIgbmV3U2xpZGVPcmRlckluZGV4ID0gKHZvaWQgMCk7XG4gICAgICAgIHZhciBjb2x1bW4gPSAodm9pZCAwKTtcbiAgICAgICAgdmFyIHJvdyA9ICh2b2lkIDApO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJylcbiAgICAgICAgICB8fCAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICAgICAgIGNvbHVtbiA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlckNvbHVtbik7XG4gICAgICAgICAgICByb3cgPSBpIC0gKGNvbHVtbiAqIHNsaWRlc1BlckNvbHVtbik7XG4gICAgICAgICAgICBpZiAoY29sdW1uID4gbnVtRnVsbENvbHVtbnMgfHwgKGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSBzbGlkZXNQZXJDb2x1bW4gLSAxKSkge1xuICAgICAgICAgICAgICByb3cgKz0gMTtcbiAgICAgICAgICAgICAgaWYgKHJvdyA+PSBzbGlkZXNQZXJDb2x1bW4pIHtcbiAgICAgICAgICAgICAgICByb3cgPSAwO1xuICAgICAgICAgICAgICAgIGNvbHVtbiArPSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBncm91cEluZGV4ID0gTWF0aC5mbG9vcihpIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3KSAtIGdyb3VwSW5kZXggKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICAgICAgICAgICAgY29sdW1uID0gaSAtIHJvdyAqIHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gZ3JvdXBJbmRleCAqIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdTbGlkZU9yZGVySW5kZXggPSBjb2x1bW4gKyAoKHJvdyAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MpIC8gc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgICAgICBzbGlkZVxuICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICctd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgICAnLW1vei1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICAgJy1tcy1mbGV4LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgICAnLXdlYmtpdC1vcmRlcic6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICAgb3JkZXI6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlclJvdyk7XG4gICAgICAgICAgY29sdW1uID0gaSAtIChyb3cgKiBzbGlkZXNQZXJSb3cpO1xuICAgICAgICB9XG4gICAgICAgIHNsaWRlXG4gICAgICAgICAgLmNzcyhcbiAgICAgICAgICAgIChcIm1hcmdpbi1cIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndG9wJyA6ICdsZWZ0JykpLFxuICAgICAgICAgICAgKHJvdyAhPT0gMCAmJiBwYXJhbXMuc3BhY2VCZXR3ZWVuKSAmJiAoKChwYXJhbXMuc3BhY2VCZXR3ZWVuKSArIFwicHhcIikpXG4gICAgICAgICAgKVxuICAgICAgICAgIC5hdHRyKCdkYXRhLXN3aXBlci1jb2x1bW4nLCBjb2x1bW4pXG4gICAgICAgICAgLmF0dHIoJ2RhdGEtc3dpcGVyLXJvdycsIHJvdyk7XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGUuY3NzKCdkaXNwbGF5JykgPT09ICdub25lJykgeyBjb250aW51ZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIHZhciBzbGlkZVN0eWxlcyA9IHdpbi5nZXRDb21wdXRlZFN0eWxlKHNsaWRlWzBdLCBudWxsKTtcbiAgICAgICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIHZhciBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKVxuICAgICAgICAgICAgPyBzbGlkZS5vdXRlcldpZHRoKHRydWUpXG4gICAgICAgICAgICA6IHNsaWRlLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSk7XG4gICAgICAgICAgICB2YXIgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpKTtcbiAgICAgICAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSk7XG4gICAgICAgICAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSk7XG4gICAgICAgICAgICB2YXIgbWFyZ2luUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKTtcbiAgICAgICAgICAgIHZhciBib3hTaXppbmcgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG4gICAgICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnICYmICFCcm93c2VyLmlzSUUpIHtcbiAgICAgICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSk7XG4gICAgICAgICAgICB2YXIgcGFkZGluZ1RvcCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy10b3AnKSk7XG4gICAgICAgICAgICB2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1ib3R0b20nKSk7XG4gICAgICAgICAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tdG9wJykpO1xuICAgICAgICAgICAgdmFyIG1hcmdpbkJvdHRvbSA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWJvdHRvbScpKTtcbiAgICAgICAgICAgIHZhciBib3hTaXppbmckMSA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgICAgIGlmIChib3hTaXppbmckMSAmJiBib3hTaXppbmckMSA9PT0gJ2JvcmRlci1ib3gnICYmICFCcm93c2VyLmlzSUUpIHtcbiAgICAgICAgICAgICAgc2xpZGVTaXplID0gaGVpZ2h0ICsgbWFyZ2luVG9wICsgbWFyZ2luQm90dG9tO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2xpZGVTaXplID0gaGVpZ2h0ICsgcGFkZGluZ1RvcCArIHBhZGRpbmdCb3R0b20gKyBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgICAgc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHsgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpOyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtICgocGFyYW1zLnNsaWRlc1BlclZpZXcgLSAxKSAqIHNwYWNlQmV0d2VlbikpIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7IHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTsgfVxuXG4gICAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBzbGlkZXNbaV0uc3R5bGUud2lkdGggPSBzbGlkZVNpemUgKyBcInB4XCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS5oZWlnaHQgPSBzbGlkZVNpemUgKyBcInB4XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgICB9XG4gICAgICBzbGlkZXNTaXplc0dyaWQucHVzaChzbGlkZVNpemUpO1xuXG5cbiAgICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyAoc2xpZGVTaXplIC8gMikgKyAocHJldlNsaWRlU2l6ZSAvIDIpICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgICBpZiAocHJldlNsaWRlU2l6ZSA9PT0gMCAmJiBpICE9PSAwKSB7IHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gKHN3aXBlclNpemUgLyAyKSAtIHNwYWNlQmV0d2VlbjsgfVxuICAgICAgICBpZiAoaSA9PT0gMCkgeyBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIChzd2lwZXJTaXplIC8gMikgLSBzcGFjZUJldHdlZW47IH1cbiAgICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHsgc2xpZGVQb3NpdGlvbiA9IDA7IH1cbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHsgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7IH1cbiAgICAgICAgaWYgKChpbmRleCkgJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHsgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTsgfVxuICAgICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgeyBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTsgfVxuICAgICAgICBpZiAoKGluZGV4KSAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgeyBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pOyB9XG4gICAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG5cbiAgICAgIHByZXZTbGlkZVNpemUgPSBzbGlkZVNpemU7XG5cbiAgICAgIGluZGV4ICs9IDE7XG4gICAgfVxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KHN3aXBlci52aXJ0dWFsU2l6ZSwgc3dpcGVyU2l6ZSkgKyBvZmZzZXRBZnRlcjtcbiAgICB2YXIgbmV3U2xpZGVzR3JpZDtcblxuICAgIGlmIChcbiAgICAgIHJ0bCAmJiB3cm9uZ1JUTCAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnY292ZXJmbG93JykpIHtcbiAgICAgICR3cmFwcGVyRWwuY3NzKHsgd2lkdGg6ICgoc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKyBcInB4XCIpIH0pO1xuICAgIH1cbiAgICBpZiAoIVN1cHBvcnQuZmxleGJveCB8fCBwYXJhbXMuc2V0V3JhcHBlclNpemUpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHsgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogKChzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKSArIFwicHhcIikgfSk7IH1cbiAgICAgIGVsc2UgeyAkd3JhcHBlckVsLmNzcyh7IGhlaWdodDogKChzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKSArIFwicHhcIikgfSk7IH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IChzbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKSAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gICAgICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLmNlaWwoc3dpcGVyLnZpcnR1YWxTaXplIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgLSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgeyAkd3JhcHBlckVsLmNzcyh7IHdpZHRoOiAoKHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICsgXCJweFwiKSB9KTsgfVxuICAgICAgZWxzZSB7ICR3cmFwcGVyRWwuY3NzKHsgaGVpZ2h0OiAoKHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICsgXCJweFwiKSB9KTsgfVxuICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBuZXdTbGlkZXNHcmlkID0gW107XG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHNuYXBHcmlkLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICAgICB2YXIgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpJDFdO1xuICAgICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7IHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7IH1cbiAgICAgICAgICBpZiAoc25hcEdyaWRbaSQxXSA8IHN3aXBlci52aXJ0dWFsU2l6ZSArIHNuYXBHcmlkWzBdKSB7IG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7IH1cbiAgICAgICAgfVxuICAgICAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcbiAgICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQyID0gMDsgaSQyIDwgc25hcEdyaWQubGVuZ3RoOyBpJDIgKz0gMSkge1xuICAgICAgICB2YXIgc2xpZGVzR3JpZEl0ZW0kMSA9IHNuYXBHcmlkW2kkMl07XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7IHNsaWRlc0dyaWRJdGVtJDEgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtJDEpOyB9XG4gICAgICAgIGlmIChzbmFwR3JpZFtpJDJdIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0kMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHsgc25hcEdyaWQgPSBbMF07IH1cblxuICAgIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChydGwpIHsgc2xpZGVzLmNzcyh7IG1hcmdpbkxlZnQ6IChzcGFjZUJldHdlZW4gKyBcInB4XCIpIH0pOyB9XG4gICAgICAgIGVsc2UgeyBzbGlkZXMuY3NzKHsgbWFyZ2luUmlnaHQ6IChzcGFjZUJldHdlZW4gKyBcInB4XCIpIH0pOyB9XG4gICAgICB9IGVsc2UgeyBzbGlkZXMuY3NzKHsgbWFyZ2luQm90dG9tOiAoc3BhY2VCZXR3ZWVuICsgXCJweFwiKSB9KTsgfVxuICAgIH1cblxuICAgIGlmIChwYXJhbXMuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgICB2YXIgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc2xpZGVTaXplVmFsdWUpIHtcbiAgICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgICAgfSk7XG4gICAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgICBpZiAoYWxsU2xpZGVzU2l6ZSA8IHN3aXBlclNpemUpIHtcbiAgICAgICAgdmFyIGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gYWxsU2xpZGVzU2l6ZSkgLyAyO1xuICAgICAgICBzbmFwR3JpZC5mb3JFYWNoKGZ1bmN0aW9uIChzbmFwLCBzbmFwSW5kZXgpIHtcbiAgICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgICAgfSk7XG4gICAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaChmdW5jdGlvbiAoc25hcCwgc25hcEluZGV4KSB7XG4gICAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgc2xpZGVzOiBzbGlkZXMsXG4gICAgICBzbmFwR3JpZDogc25hcEdyaWQsXG4gICAgICBzbGlkZXNHcmlkOiBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBzbGlkZXNTaXplc0dyaWQsXG4gICAgfSk7XG5cbiAgICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICAgIH1cbiAgICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7IHN3aXBlci5jaGVja092ZXJmbG93KCk7IH1cbiAgICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICAgIH1cbiAgICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUF1dG9IZWlnaHQgKHNwZWVkKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGFjdGl2ZVNsaWRlcyA9IFtdO1xuICAgIHZhciBuZXdIZWlnaHQgPSAwO1xuICAgIHZhciBpO1xuICAgIGlmICh0eXBlb2Ygc3BlZWQgPT09ICdudW1iZXInKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gICAgfVxuICAgIC8vIEZpbmQgc2xpZGVzIGN1cnJlbnRseSBpbiB2aWV3XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICAgIGlmIChpbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoKSB7IGJyZWFrOyB9XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpWzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpWzBdKTtcbiAgICB9XG5cbiAgICAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcbiAgICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlc1tpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IGFjdGl2ZVNsaWRlc1tpXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgSGVpZ2h0XG4gICAgaWYgKG5ld0hlaWdodCkgeyBzd2lwZXIuJHdyYXBwZXJFbC5jc3MoJ2hlaWdodCcsIChuZXdIZWlnaHQgKyBcInB4XCIpKTsgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0ICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzICh0cmFuc2xhdGUpIHtcbiAgICBpZiAoIHRyYW5zbGF0ZSA9PT0gdm9pZCAwICkgdHJhbnNsYXRlID0gKHRoaXMgJiYgdGhpcy50cmFuc2xhdGUpIHx8IDA7XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuXG4gICAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQgPT09ICd1bmRlZmluZWQnKSB7IHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTsgfVxuXG4gICAgdmFyIG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gICAgaWYgKHJ0bCkgeyBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7IH1cblxuICAgIC8vIFZpc2libGUgU2xpZGVzXG4gICAgc2xpZGVzLnJlbW92ZUNsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG5cbiAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICAgIHZhciBzbGlkZVByb2dyZXNzID0gKFxuICAgICAgICAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApKSAtIHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0XG4gICAgICApIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pO1xuICAgICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICAgICAgdmFyIHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldCk7XG4gICAgICAgIHZhciBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgICB2YXIgaXNWaXNpYmxlID0gKHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEpXG4gICAgICAgICAgICAgICAgICB8fCAoc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSlcbiAgICAgICAgICAgICAgICAgIHx8IChzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemUpO1xuICAgICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgIH1cbiAgICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9ICQoc3dpcGVyLnZpc2libGVTbGlkZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3MgKHRyYW5zbGF0ZSkge1xuICAgIGlmICggdHJhbnNsYXRlID09PSB2b2lkIDAgKSB0cmFuc2xhdGUgPSAodGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSkgfHwgMDtcblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gICAgdmFyIHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIHZhciBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcztcbiAgICB2YXIgaXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgdmFyIGlzRW5kID0gc3dpcGVyLmlzRW5kO1xuICAgIHZhciB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgICB2YXIgd2FzRW5kID0gaXNFbmQ7XG4gICAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgICBwcm9ncmVzcyA9IDA7XG4gICAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgICBpc0VuZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyAodHJhbnNsYXRlc0RpZmYpO1xuICAgICAgaXNCZWdpbm5pbmcgPSBwcm9ncmVzcyA8PSAwO1xuICAgICAgaXNFbmQgPSBwcm9ncmVzcyA+PSAxO1xuICAgIH1cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBwcm9ncmVzczogcHJvZ3Jlc3MsXG4gICAgICBpc0JlZ2lubmluZzogaXNCZWdpbm5pbmcsXG4gICAgICBpc0VuZDogaXNFbmQsXG4gICAgfSk7XG5cbiAgICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkgeyBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTsgfVxuXG4gICAgaWYgKGlzQmVnaW5uaW5nICYmICF3YXNCZWdpbm5pbmcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgICB9XG4gICAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgICB9XG4gICAgaWYgKCh3YXNCZWdpbm5pbmcgJiYgIWlzQmVnaW5uaW5nKSB8fCAod2FzRW5kICYmICFpc0VuZCkpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdwcm9ncmVzcycsIHByb2dyZXNzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIHJlYWxJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgICBzbGlkZXMucmVtb3ZlQ2xhc3MoKChwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykgKyBcIiBcIiArIChwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpICsgXCIgXCIgKyAocGFyYW1zLnNsaWRlUHJldkNsYXNzKSArIFwiIFwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKSArIFwiIFwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcykgKyBcIiBcIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpKSk7XG5cbiAgICB2YXIgYWN0aXZlU2xpZGU7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBhY3RpdmVJbmRleCArIFwiXFxcIl1cIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IHNsaWRlcy5lcShhY3RpdmVJbmRleCk7XG4gICAgfVxuXG4gICAgLy8gQWN0aXZlIGNsYXNzZXNcbiAgICBhY3RpdmVTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgICAgaWYgKGFjdGl2ZVNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAkd3JhcHBlckVsXG4gICAgICAgICAgLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIjpub3QoLlwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdXCIpKVxuICAgICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkd3JhcHBlckVsXG4gICAgICAgICAgLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIi5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdXCIpKVxuICAgICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE5leHQgU2xpZGVcbiAgICB2YXIgbmV4dFNsaWRlID0gYWN0aXZlU2xpZGUubmV4dEFsbCgoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpKSkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgICBpZiAocGFyYW1zLmxvb3AgJiYgbmV4dFNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbmV4dFNsaWRlID0gc2xpZGVzLmVxKDApO1xuICAgICAgbmV4dFNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgfVxuICAgIC8vIFByZXYgU2xpZGVcbiAgICB2YXIgcHJldlNsaWRlID0gYWN0aXZlU2xpZGUucHJldkFsbCgoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpKSkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgICBpZiAocGFyYW1zLmxvb3AgJiYgcHJldlNsaWRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcHJldlNsaWRlID0gc2xpZGVzLmVxKC0xKTtcbiAgICAgIHByZXZTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgICAgaWYgKG5leHRTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAgIC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCI6bm90KC5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIilbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKG5leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpKSArIFwiXFxcIl1cIikpXG4gICAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkd3JhcHBlckVsXG4gICAgICAgICAgLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIi5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyAobmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpICsgXCJcXFwiXVwiKSlcbiAgICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgICAuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiOm5vdCguXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCIpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIChwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSkgKyBcIlxcXCJdXCIpKVxuICAgICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAgIC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCIuXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKHByZXZTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpKSArIFwiXFxcIl1cIikpXG4gICAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXggKG5ld0FjdGl2ZUluZGV4KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gICAgdmFyIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZDtcbiAgICB2YXIgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHByZXZpb3VzSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIHByZXZpb3VzUmVhbEluZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICB2YXIgcHJldmlvdXNTbmFwSW5kZXggPSBzd2lwZXIuc25hcEluZGV4O1xuICAgIHZhciBhY3RpdmVJbmRleCA9IG5ld0FjdGl2ZUluZGV4O1xuICAgIHZhciBzbmFwSW5kZXg7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtICgoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpKSB7XG4gICAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICAgICAgYWN0aXZlSW5kZXggPSBpICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gICAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICAgICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7IGFjdGl2ZUluZGV4ID0gMDsgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICAgIHNuYXBJbmRleCA9IHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc25hcEluZGV4ID0gTWF0aC5mbG9vcihhY3RpdmVJbmRleCAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgfVxuICAgIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSB7IHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7IH1cbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICAgIHN3aXBlci5zbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBHZXQgcmVhbCBpbmRleFxuICAgIHZhciByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LCAxMCk7XG5cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBzbmFwSW5kZXg6IHNuYXBJbmRleCxcbiAgICAgIHJlYWxJbmRleDogcmVhbEluZGV4LFxuICAgICAgcHJldmlvdXNJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICAgIGFjdGl2ZUluZGV4OiBhY3RpdmVJbmRleCxcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnYWN0aXZlSW5kZXhDaGFuZ2UnKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgaWYgKHByZXZpb3VzUmVhbEluZGV4ICE9PSByZWFsSW5kZXgpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdyZWFsSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2UnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUgKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgc2xpZGUgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykpKVswXTtcbiAgICB2YXIgc2xpZGVGb3VuZCA9IGZhbHNlO1xuICAgIGlmIChzbGlkZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkgeyBzbGlkZUZvdW5kID0gdHJ1ZTsgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG4gICAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KCQoc2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSAkKHNsaWRlKS5pbmRleCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHVwZGF0ZSA9IHtcbiAgICB1cGRhdGVTaXplOiB1cGRhdGVTaXplLFxuICAgIHVwZGF0ZVNsaWRlczogdXBkYXRlU2xpZGVzLFxuICAgIHVwZGF0ZUF1dG9IZWlnaHQ6IHVwZGF0ZUF1dG9IZWlnaHQsXG4gICAgdXBkYXRlU2xpZGVzT2Zmc2V0OiB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gICAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3M6IHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICAgIHVwZGF0ZVByb2dyZXNzOiB1cGRhdGVQcm9ncmVzcyxcbiAgICB1cGRhdGVTbGlkZXNDbGFzc2VzOiB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICAgIHVwZGF0ZUFjdGl2ZUluZGV4OiB1cGRhdGVBY3RpdmVJbmRleCxcbiAgICB1cGRhdGVDbGlja2VkU2xpZGU6IHVwZGF0ZUNsaWNrZWRTbGlkZSxcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRUcmFuc2xhdGUgKGF4aXMpIHtcbiAgICBpZiAoIGF4aXMgPT09IHZvaWQgMCApIGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICB2YXIgdHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuXG4gICAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudFRyYW5zbGF0ZSA9IFV0aWxzLmdldFRyYW5zbGF0ZSgkd3JhcHBlckVsWzBdLCBheGlzKTtcbiAgICBpZiAocnRsKSB7IGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTsgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRUcmFuc2xhdGUgfHwgMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSAodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciBwcm9ncmVzcyA9IHN3aXBlci5wcm9ncmVzcztcbiAgICB2YXIgeCA9IDA7XG4gICAgdmFyIHkgPSAwO1xuICAgIHZhciB6ID0gMDtcblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggPSBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ID0gdHJhbnNsYXRlO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICAgIGlmIChTdXBwb3J0LnRyYW5zZm9ybXMzZCkgeyAkd3JhcHBlckVsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCBcIiArIHogKyBcInB4KVwiKSk7IH1cbiAgICAgIGVsc2UgeyAkd3JhcHBlckVsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweClcIikpOyB9XG4gICAgfVxuICAgIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5O1xuXG4gICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcbiAgICB2YXIgbmV3UHJvZ3Jlc3M7XG4gICAgdmFyIHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gKHRyYW5zbGF0ZXNEaWZmKTtcbiAgICB9XG4gICAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG4gIH1cblxuICBmdW5jdGlvbiBtaW5UcmFuc2xhdGUgKCkge1xuICAgIHJldHVybiAoLXRoaXMuc25hcEdyaWRbMF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbWF4VHJhbnNsYXRlICgpIHtcbiAgICByZXR1cm4gKC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV0pO1xuICB9XG5cbiAgdmFyIHRyYW5zbGF0ZSA9IHtcbiAgICBnZXRUcmFuc2xhdGU6IGdldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2xhdGU6IHNldFRyYW5zbGF0ZSxcbiAgICBtaW5UcmFuc2xhdGU6IG1pblRyYW5zbGF0ZSxcbiAgICBtYXhUcmFuc2xhdGU6IG1heFRyYW5zbGF0ZSxcbiAgfTtcblxuICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uIChkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcblxuICAgIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQgKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gICAgaWYgKCBydW5DYWxsYmFja3MgPT09IHZvaWQgMCApIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleDtcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuXG4gICAgdmFyIGRpciA9IGRpcmVjdGlvbjtcbiAgICBpZiAoIWRpcikge1xuICAgICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgeyBkaXIgPSAnbmV4dCc7IH1cbiAgICAgIGVsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgeyBkaXIgPSAncHJldic7IH1cbiAgICAgIGVsc2UgeyBkaXIgPSAncmVzZXQnOyB9XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuXG4gICAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgICBzd2lwZXIuZW1pdCgnc2xpZGVSZXNldFRyYW5zaXRpb25TdGFydCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuZW1pdCgnc2xpZGVQcmV2VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCQxIChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG4gICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuXG4gICAgdmFyIGRpciA9IGRpcmVjdGlvbjtcbiAgICBpZiAoIWRpcikge1xuICAgICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgeyBkaXIgPSAnbmV4dCc7IH1cbiAgICAgIGVsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgeyBkaXIgPSAncHJldic7IH1cbiAgICAgIGVsc2UgeyBkaXIgPSAncmVzZXQnOyB9XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcblxuICAgIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uRW5kJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZVRyYW5zaXRpb25FbmQnKTtcbiAgICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvbkVuZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUHJldlRyYW5zaXRpb25FbmQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbiQxID0ge1xuICAgIHNldFRyYW5zaXRpb246IHNldFRyYW5zaXRpb24sXG4gICAgdHJhbnNpdGlvblN0YXJ0OiB0cmFuc2l0aW9uU3RhcnQsXG4gICAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCQxLFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNsaWRlVG8gKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gMDtcbiAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNsaWRlSW5kZXggPSBpbmRleDtcbiAgICBpZiAoc2xpZGVJbmRleCA8IDApIHsgc2xpZGVJbmRleCA9IDA7IH1cblxuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcbiAgICB2YXIgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkO1xuICAgIHZhciBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgc25hcEluZGV4ID0gTWF0aC5mbG9vcihzbGlkZUluZGV4IC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgeyBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxOyB9XG5cbiAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IHBhcmFtcy5pbml0aWFsU2xpZGUgfHwgMCkgPT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgICB9XG5cbiAgICB2YXIgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG5cbiAgICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICAgIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gICAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCkgPj0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKSkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaXJlY3Rpb247XG4gICAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgeyBkaXJlY3Rpb24gPSAnbmV4dCc7IH1cbiAgICBlbHNlIGlmIChzbGlkZUluZGV4IDwgYWN0aXZlSW5kZXgpIHsgZGlyZWN0aW9uID0gJ3ByZXYnOyB9XG4gICAgZWxzZSB7IGRpcmVjdGlvbiA9ICdyZXNldCc7IH1cblxuXG4gICAgLy8gVXBkYXRlIEluZGV4XG4gICAgaWYgKChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkgfHwgKCFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgICAgLy8gVXBkYXRlIEhlaWdodFxuICAgICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChzcGVlZCA9PT0gMCB8fCAhU3VwcG9ydC50cmFuc2l0aW9uKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKCFzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBzbGlkZVRvTG9vcCAoaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgaWYgKCBpbmRleCA9PT0gdm9pZCAwICkgaW5kZXggPSAwO1xuICAgIGlmICggc3BlZWQgPT09IHZvaWQgMCApIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gICAgaWYgKCBydW5DYWxsYmFja3MgPT09IHZvaWQgMCApIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgbmV3SW5kZXggPSBpbmRleDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBuZXdJbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIH1cblxuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG4gIGZ1bmN0aW9uIHNsaWRlTmV4dCAoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIGFuaW1hdGluZyA9IHN3aXBlci5hbmltYXRpbmc7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBpZiAoYW5pbWF0aW5nKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIHBhcmFtcy5zbGlkZXNQZXJHcm91cCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG4gIGZ1bmN0aW9uIHNsaWRlUHJldiAoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIGFuaW1hdGluZyA9IHN3aXBlci5hbmltYXRpbmc7XG4gICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgIHZhciBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQ7XG4gICAgdmFyIHJ0bFRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChhbmltYXRpbmcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgIH1cbiAgICB2YXIgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICAgIGlmICh2YWwgPCAwKSB7IHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTsgfVxuICAgICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgICB9XG4gICAgdmFyIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgICB2YXIgbm9ybWFsaXplZFNuYXBHcmlkID0gc25hcEdyaWQubWFwKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG5vcm1hbGl6ZSh2YWwpOyB9KTtcbiAgICB2YXIgbm9ybWFsaXplZFNsaWRlc0dyaWQgPSBzbGlkZXNHcmlkLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBub3JtYWxpemUodmFsKTsgfSk7XG5cbiAgICB2YXIgY3VycmVudFNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKV07XG4gICAgdmFyIHByZXZTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSkgLSAxXTtcbiAgICB2YXIgcHJldkluZGV4O1xuICAgIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgICAgaWYgKHByZXZJbmRleCA8IDApIHsgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTsgfVxuICAgIH1cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cblxuICAvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbiAgZnVuY3Rpb24gc2xpZGVSZXNldCAoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG4gIGZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0IChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICAgIGlmICggc3BlZWQgPT09IHZvaWQgMCApIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gICAgaWYgKCBydW5DYWxsYmFja3MgPT09IHZvaWQgMCApIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIHNuYXBJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcblxuICAgIGlmIChzbmFwSW5kZXggPCBzd2lwZXIuc25hcEdyaWQubGVuZ3RoIC0gMSkge1xuICAgICAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgICAgIHZhciBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgICAgdmFyIG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuXG4gICAgICBpZiAoKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwKSA+IChuZXh0U25hcCAtIGN1cnJlbnRTbmFwKSAvIDIpIHtcbiAgICAgICAgaW5kZXggPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcblxuICAgIHZhciBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgdmFyIHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gICAgdmFyIHJlYWxJbmRleDtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7IHJldHVybjsgfVxuICAgICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoJChzd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIChzbGlkZXNQZXJWaWV3IC8gMikpXG4gICAgICAgICAgfHwgKHNsaWRlVG9JbmRleCA+IChzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMpICsgKHNsaWRlc1BlclZpZXcgLyAyKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsXG4gICAgICAgICAgICAuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHJlYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIilcIikpXG4gICAgICAgICAgICAuZXEoMClcbiAgICAgICAgICAgIC5pbmRleCgpO1xuXG4gICAgICAgICAgVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc2xpZGVzUGVyVmlldykge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsXG4gICAgICAgICAgLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdOm5vdCguXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCIpXCIpKVxuICAgICAgICAgIC5lcSgwKVxuICAgICAgICAgIC5pbmRleCgpO1xuXG4gICAgICAgIFV0aWxzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNsaWRlID0ge1xuICAgIHNsaWRlVG86IHNsaWRlVG8sXG4gICAgc2xpZGVUb0xvb3A6IHNsaWRlVG9Mb29wLFxuICAgIHNsaWRlTmV4dDogc2xpZGVOZXh0LFxuICAgIHNsaWRlUHJldjogc2xpZGVQcmV2LFxuICAgIHNsaWRlUmVzZXQ6IHNsaWRlUmVzZXQsXG4gICAgc2xpZGVUb0Nsb3Nlc3Q6IHNsaWRlVG9DbG9zZXN0LFxuICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IHNsaWRlVG9DbGlja2VkU2xpZGUsXG4gIH07XG5cbiAgZnVuY3Rpb24gbG9vcENyZWF0ZSAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAvLyBSZW1vdmUgZHVwbGljYXRlZCBzbGlkZXNcbiAgICAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIi5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpKS5yZW1vdmUoKTtcblxuICAgIHZhciBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykpKTtcblxuICAgIGlmIChwYXJhbXMubG9vcEZpbGxHcm91cFdpdGhCbGFuaykge1xuICAgICAgdmFyIGJsYW5rU2xpZGVzTnVtID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwIC0gKHNsaWRlcy5sZW5ndGggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgaWYgKGJsYW5rU2xpZGVzTnVtICE9PSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibGFua1NsaWRlc051bTsgaSArPSAxKSB7XG4gICAgICAgICAgdmFyIGJsYW5rTm9kZSA9ICQoZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hZGRDbGFzcygoKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiIFwiICsgKHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3MpKSk7XG4gICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoYmxhbmtOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBzbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiAhcGFyYW1zLmxvb3BlZFNsaWRlcykgeyBwYXJhbXMubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDsgfVxuXG4gICAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IHBhcnNlSW50KHBhcmFtcy5sb29wZWRTbGlkZXMgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKTtcbiAgICBzd2lwZXIubG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcbiAgICBpZiAoc3dpcGVyLmxvb3BlZFNsaWRlcyA+IHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBwcmVwZW5kU2xpZGVzID0gW107XG4gICAgdmFyIGFwcGVuZFNsaWRlcyA9IFtdO1xuICAgIHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWwpIHtcbiAgICAgIHZhciBzbGlkZSA9ICQoZWwpO1xuICAgICAgaWYgKGluZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcykgeyBhcHBlbmRTbGlkZXMucHVzaChlbCk7IH1cbiAgICAgIGlmIChpbmRleCA8IHNsaWRlcy5sZW5ndGggJiYgaW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIHsgcHJlcGVuZFNsaWRlcy5wdXNoKGVsKTsgfVxuICAgICAgc2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gICAgfSk7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgYXBwZW5kU2xpZGVzLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICR3cmFwcGVyRWwuYXBwZW5kKCQoYXBwZW5kU2xpZGVzW2kkMV0uY2xvbmVOb2RlKHRydWUpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpJDIgPSBwcmVwZW5kU2xpZGVzLmxlbmd0aCAtIDE7IGkkMiA+PSAwOyBpJDIgLT0gMSkge1xuICAgICAgJHdyYXBwZXJFbC5wcmVwZW5kKCQocHJlcGVuZFNsaWRlc1tpJDJdLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb29wRml4ICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgdmFyIGxvb3BlZFNsaWRlcyA9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgdmFyIGFsbG93U2xpZGVQcmV2ID0gc3dpcGVyLmFsbG93U2xpZGVQcmV2O1xuICAgIHZhciBhbGxvd1NsaWRlTmV4dCA9IHN3aXBlci5hbGxvd1NsaWRlTmV4dDtcbiAgICB2YXIgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgdmFyIG5ld0luZGV4O1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcblxuICAgIHZhciBzbmFwVHJhbnNsYXRlID0gLXNuYXBHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICB2YXIgZGlmZiA9IHNuYXBUcmFuc2xhdGUgLSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG5cblxuICAgIC8vIEZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcbiAgICBpZiAoYWN0aXZlSW5kZXggPCBsb29wZWRTbGlkZXMpIHtcbiAgICAgIG5ld0luZGV4ID0gKHNsaWRlcy5sZW5ndGggLSAobG9vcGVkU2xpZGVzICogMykpICsgYWN0aXZlSW5kZXg7XG4gICAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgICB2YXIgc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIGlmIChzbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBhY3RpdmVJbmRleCA+PSBsb29wZWRTbGlkZXMgKiAyKSB8fCAoYWN0aXZlSW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcykpIHtcbiAgICAgIC8vIEZpeCBGb3IgUG9zaXRpdmUgT3ZlcnNsaWRpbmdcbiAgICAgIG5ld0luZGV4ID0gLXNsaWRlcy5sZW5ndGggKyBhY3RpdmVJbmRleCArIGxvb3BlZFNsaWRlcztcbiAgICAgIG5ld0luZGV4ICs9IGxvb3BlZFNsaWRlcztcbiAgICAgIHZhciBzbGlkZUNoYW5nZWQkMSA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICBpZiAoc2xpZGVDaGFuZ2VkJDEgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKChydGwgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpIC0gZGlmZik7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gbG9vcERlc3Ryb3kgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCIuXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCIsLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiLlwiICsgKHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3MpKSkucmVtb3ZlKCk7XG4gICAgc2xpZGVzLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gIH1cblxuICB2YXIgbG9vcCA9IHtcbiAgICBsb29wQ3JlYXRlOiBsb29wQ3JlYXRlLFxuICAgIGxvb3BGaXg6IGxvb3BGaXgsXG4gICAgbG9vcERlc3Ryb3k6IGxvb3BEZXN0cm95LFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldEdyYWJDdXJzb3IgKG1vdmluZykge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChTdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQpKSB7IHJldHVybjsgfVxuICAgIHZhciBlbCA9IHN3aXBlci5lbDtcbiAgICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gICAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy13ZWJraXQtZ3JhYmJpbmcnIDogJy13ZWJraXQtZ3JhYic7XG4gICAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy1tb3otZ3JhYmJpbicgOiAnLW1vei1ncmFiJztcbiAgICBlbC5zdHlsZS5jdXJzb3IgPSBtb3ZpbmcgPyAnZ3JhYmJpbmcnIDogJ2dyYWInO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoU3VwcG9ydC50b3VjaCB8fCAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCkpIHsgcmV0dXJuOyB9XG4gICAgc3dpcGVyLmVsLnN0eWxlLmN1cnNvciA9ICcnO1xuICB9XG5cbiAgdmFyIGdyYWJDdXJzb3IgPSB7XG4gICAgc2V0R3JhYkN1cnNvcjogc2V0R3JhYkN1cnNvcixcbiAgICB1bnNldEdyYWJDdXJzb3I6IHVuc2V0R3JhYkN1cnNvcixcbiAgfTtcblxuICBmdW5jdGlvbiBhcHBlbmRTbGlkZSAoc2xpZGVzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSB7ICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tpXSk7IH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cbiAgICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgU3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVwZW5kU2xpZGUgKHNsaWRlcykge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0pIHsgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlc1tpXSk7IH1cbiAgICAgIH1cbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsLnByZXBlbmQoc2xpZGVzKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cbiAgICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgU3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICB9XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFNsaWRlIChpbmRleCwgc2xpZGVzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgdmFyIGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpKSk7XG4gICAgfVxuICAgIHZhciBiYXNlTGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgaWYgKGluZGV4IDw9IDApIHtcbiAgICAgIHN3aXBlci5wcmVwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGluZGV4ID49IGJhc2VMZW5ndGgpIHtcbiAgICAgIHN3aXBlci5hcHBlbmRTbGlkZShzbGlkZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyAxIDogYWN0aXZlSW5kZXhCdWZmZXI7XG5cbiAgICB2YXIgc2xpZGVzQnVmZmVyID0gW107XG4gICAgZm9yICh2YXIgaSA9IGJhc2VMZW5ndGggLSAxOyBpID49IGluZGV4OyBpIC09IDEpIHtcbiAgICAgIHZhciBjdXJyZW50U2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgY3VycmVudFNsaWRlLnJlbW92ZSgpO1xuICAgICAgc2xpZGVzQnVmZmVyLnVuc2hpZnQoY3VycmVudFNsaWRlKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBzbGlkZXMubGVuZ3RoOyBpJDEgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2kkMV0pIHsgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2kkMV0pOyB9XG4gICAgICB9XG4gICAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIHNsaWRlcy5sZW5ndGggOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCBzbGlkZXNCdWZmZXIubGVuZ3RoOyBpJDIgKz0gMSkge1xuICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzQnVmZmVyW2kkMl0pO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG4gICAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgICBzd2lwZXIudXBkYXRlKCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlU2xpZGUgKHNsaWRlc0luZGV4ZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICAgIHZhciBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSkpO1xuICAgIH1cbiAgICB2YXIgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgICB2YXIgaW5kZXhUb1JlbW92ZTtcblxuICAgIGlmICh0eXBlb2Ygc2xpZGVzSW5kZXhlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzSW5kZXhlcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNJbmRleGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzW2ldO1xuICAgICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgeyBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpOyB9XG4gICAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIHsgbmV3QWN0aXZlSW5kZXggLT0gMTsgfVxuICAgICAgfVxuICAgICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzO1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHsgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTsgfVxuICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgeyBuZXdBY3RpdmVJbmRleCAtPSAxOyB9XG4gICAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuXG4gICAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgICBzd2lwZXIudXBkYXRlKCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIHZhciBzbGlkZXNJbmRleGVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgfVxuICAgIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbiAgfVxuXG4gIHZhciBtYW5pcHVsYXRpb24gPSB7XG4gICAgYXBwZW5kU2xpZGU6IGFwcGVuZFNsaWRlLFxuICAgIHByZXBlbmRTbGlkZTogcHJlcGVuZFNsaWRlLFxuICAgIGFkZFNsaWRlOiBhZGRTbGlkZSxcbiAgICByZW1vdmVTbGlkZTogcmVtb3ZlU2xpZGUsXG4gICAgcmVtb3ZlQWxsU2xpZGVzOiByZW1vdmVBbGxTbGlkZXMsXG4gIH07XG5cbiAgdmFyIERldmljZSA9IChmdW5jdGlvbiBEZXZpY2UoKSB7XG4gICAgdmFyIHVhID0gd2luLm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgICB2YXIgZGV2aWNlID0ge1xuICAgICAgaW9zOiBmYWxzZSxcbiAgICAgIGFuZHJvaWQ6IGZhbHNlLFxuICAgICAgYW5kcm9pZENocm9tZTogZmFsc2UsXG4gICAgICBkZXNrdG9wOiBmYWxzZSxcbiAgICAgIHdpbmRvd3M6IGZhbHNlLFxuICAgICAgaXBob25lOiBmYWxzZSxcbiAgICAgIGlwb2Q6IGZhbHNlLFxuICAgICAgaXBhZDogZmFsc2UsXG4gICAgICBjb3Jkb3ZhOiB3aW4uY29yZG92YSB8fCB3aW4ucGhvbmVnYXAsXG4gICAgICBwaG9uZWdhcDogd2luLmNvcmRvdmEgfHwgd2luLnBob25lZ2FwLFxuICAgIH07XG5cbiAgICB2YXIgd2luZG93cyA9IHVhLm1hdGNoKC8oV2luZG93cyBQaG9uZSk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgdmFyIGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICAgIHZhciBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgICB2YXIgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG5cblxuICAgIC8vIFdpbmRvd3NcbiAgICBpZiAod2luZG93cykge1xuICAgICAgZGV2aWNlLm9zID0gJ3dpbmRvd3MnO1xuICAgICAgZGV2aWNlLm9zVmVyc2lvbiA9IHdpbmRvd3NbMl07XG4gICAgICBkZXZpY2Uud2luZG93cyA9IHRydWU7XG4gICAgfVxuICAgIC8vIEFuZHJvaWRcbiAgICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgICAgZGV2aWNlLm9zVmVyc2lvbiA9IGFuZHJvaWRbMl07XG4gICAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gICAgICBkZXZpY2UuYW5kcm9pZENocm9tZSA9IHVhLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignY2hyb21lJykgPj0gMDtcbiAgICB9XG4gICAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgICAgZGV2aWNlLmlvcyA9IHRydWU7XG4gICAgfVxuICAgIC8vIGlPU1xuICAgIGlmIChpcGhvbmUgJiYgIWlwb2QpIHtcbiAgICAgIGRldmljZS5vc1ZlcnNpb24gPSBpcGhvbmVbMl0ucmVwbGFjZSgvXy9nLCAnLicpO1xuICAgICAgZGV2aWNlLmlwaG9uZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChpcGFkKSB7XG4gICAgICBkZXZpY2Uub3NWZXJzaW9uID0gaXBhZFsyXS5yZXBsYWNlKC9fL2csICcuJyk7XG4gICAgICBkZXZpY2UuaXBhZCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChpcG9kKSB7XG4gICAgICBkZXZpY2Uub3NWZXJzaW9uID0gaXBvZFszXSA/IGlwb2RbM10ucmVwbGFjZSgvXy9nLCAnLicpIDogbnVsbDtcbiAgICAgIGRldmljZS5pcGhvbmUgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBpT1MgOCsgY2hhbmdlZCBVQVxuICAgIGlmIChkZXZpY2UuaW9zICYmIGRldmljZS5vc1ZlcnNpb24gJiYgdWEuaW5kZXhPZignVmVyc2lvbi8nKSA+PSAwKSB7XG4gICAgICBpZiAoZGV2aWNlLm9zVmVyc2lvbi5zcGxpdCgnLicpWzBdID09PSAnMTAnKSB7XG4gICAgICAgIGRldmljZS5vc1ZlcnNpb24gPSB1YS50b0xvd2VyQ2FzZSgpLnNwbGl0KCd2ZXJzaW9uLycpWzFdLnNwbGl0KCcgJylbMF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVza3RvcFxuICAgIGRldmljZS5kZXNrdG9wID0gIShkZXZpY2Uub3MgfHwgZGV2aWNlLmFuZHJvaWQgfHwgZGV2aWNlLndlYlZpZXcpO1xuXG4gICAgLy8gV2Vidmlld1xuICAgIGRldmljZS53ZWJWaWV3ID0gKGlwaG9uZSB8fCBpcGFkIHx8IGlwb2QpICYmIHVhLm1hdGNoKC8uKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kpO1xuXG4gICAgLy8gTWluaW1hbCBVSVxuICAgIGlmIChkZXZpY2Uub3MgJiYgZGV2aWNlLm9zID09PSAnaW9zJykge1xuICAgICAgdmFyIG9zVmVyc2lvbkFyciA9IGRldmljZS5vc1ZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICAgIHZhciBtZXRhVmlld3BvcnQgPSBkb2MucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwidmlld3BvcnRcIl0nKTtcbiAgICAgIGRldmljZS5taW5pbWFsVWkgPSAhZGV2aWNlLndlYlZpZXdcbiAgICAgICAgJiYgKGlwb2QgfHwgaXBob25lKVxuICAgICAgICAmJiAob3NWZXJzaW9uQXJyWzBdICogMSA9PT0gNyA/IG9zVmVyc2lvbkFyclsxXSAqIDEgPj0gMSA6IG9zVmVyc2lvbkFyclswXSAqIDEgPiA3KVxuICAgICAgICAmJiBtZXRhVmlld3BvcnQgJiYgbWV0YVZpZXdwb3J0LmdldEF0dHJpYnV0ZSgnY29udGVudCcpLmluZGV4T2YoJ21pbmltYWwtdWknKSA+PSAwO1xuICAgIH1cblxuICAgIC8vIFBpeGVsIFJhdGlvXG4gICAgZGV2aWNlLnBpeGVsUmF0aW8gPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gICAgLy8gRXhwb3J0IG9iamVjdFxuICAgIHJldHVybiBkZXZpY2U7XG4gIH0oKSk7XG5cbiAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0IChldmVudCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGUgPSBldmVudDtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSB7IGUgPSBlLm9yaWdpbmFsRXZlbnQ7IH1cbiAgICBkYXRhLmlzVG91Y2hFdmVudCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnO1xuICAgIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHsgcmV0dXJuOyB9XG4gICAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgeyByZXR1cm47IH1cbiAgICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSB7IHJldHVybjsgfVxuICAgIGlmIChwYXJhbXMubm9Td2lwaW5nICYmICQoZS50YXJnZXQpLmNsb3Nlc3QocGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogKFwiLlwiICsgKHBhcmFtcy5ub1N3aXBpbmdDbGFzcykpKVswXSkge1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnN3aXBlSGFuZGxlcikge1xuICAgICAgaWYgKCEkKGUpLmNsb3Nlc3QocGFyYW1zLnN3aXBlSGFuZGxlcilbMF0pIHsgcmV0dXJuOyB9XG4gICAgfVxuXG4gICAgdG91Y2hlcy5jdXJyZW50WCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIHZhciBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgIHZhciBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gICAgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCAoVUlXZWJWaWV3KSBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgICB2YXIgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbiB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uO1xuICAgIHZhciBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7XG4gICAgaWYgKFxuICAgICAgZWRnZVN3aXBlRGV0ZWN0aW9uXG4gICAgICAmJiAoKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQpXG4gICAgICB8fCAoc3RhcnRYID49IHdpbi5zY3JlZW4ud2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIFV0aWxzLmV4dGVuZChkYXRhLCB7XG4gICAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgICBpc01vdmVkOiBmYWxzZSxcbiAgICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICB9KTtcblxuICAgIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICAgIHRvdWNoZXMuc3RhcnRZID0gc3RhcnRZO1xuICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBVdGlscy5ub3coKTtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gZmFsc2U7IH1cbiAgICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHZhciBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICBpZiAoJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSB7IHByZXZlbnREZWZhdWx0ID0gZmFsc2U7IH1cbiAgICAgIGlmIChcbiAgICAgICAgZG9jLmFjdGl2ZUVsZW1lbnRcbiAgICAgICAgJiYgJChkb2MuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpXG4gICAgICAgICYmIGRvYy5hY3RpdmVFbGVtZW50ICE9PSBlLnRhcmdldFxuICAgICAgKSB7XG4gICAgICAgIGRvYy5hY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG4gICAgICBpZiAocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hNb3ZlIChldmVudCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgdG91Y2hlcyA9IHN3aXBlci50b3VjaGVzO1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgIHZhciBlID0gZXZlbnQ7XG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgeyBlID0gZS5vcmlnaW5hbEV2ZW50OyB9XG4gICAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGUudHlwZSA9PT0gJ21vdXNlbW92ZScpIHsgcmV0dXJuOyB9XG4gICAgdmFyIHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgdmFyIHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgaWYgKGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIpIHtcbiAgICAgIHRvdWNoZXMuc3RhcnRYID0gcGFnZVg7XG4gICAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgICAgLy8gaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICAgIFV0aWxzLmV4dGVuZCh0b3VjaGVzLCB7XG4gICAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgICBjdXJyZW50WTogcGFnZVksXG4gICAgICAgIH0pO1xuICAgICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gVXRpbHMubm93KCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcyAmJiAhcGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAgIC8vIFZlcnRpY2FsXG4gICAgICAgIGlmIChcbiAgICAgICAgICAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSlcbiAgICAgICAgICB8fCAocGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKVxuICAgICAgICB8fCAocGFnZVggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBkb2MuYWN0aXZlRWxlbWVudCkge1xuICAgICAgaWYgKGUudGFyZ2V0ID09PSBkb2MuYWN0aXZlRWxlbWVudCAmJiAkKGUudGFyZ2V0KS5pcyhkYXRhLmZvcm1FbGVtZW50cykpIHtcbiAgICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gICAgfVxuICAgIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHsgcmV0dXJuOyB9XG5cbiAgICB0b3VjaGVzLmN1cnJlbnRYID0gcGFnZVg7XG4gICAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuXG4gICAgdmFyIGRpZmZYID0gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYO1xuICAgIHZhciBkaWZmWSA9IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KChNYXRoLnBvdyggZGlmZlgsIDIgKSkgKyAoTWF0aC5wb3coIGRpZmZZLCAyICkpKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSB7IHJldHVybjsgfVxuXG4gICAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHRvdWNoQW5nbGU7XG4gICAgICBpZiAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRZID09PSB0b3VjaGVzLnN0YXJ0WSkgfHwgKHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpKSB7XG4gICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBpZiAoKGRpZmZYICogZGlmZlgpICsgKGRpZmZZICogZGlmZlkpID49IDI1KSB7XG4gICAgICAgICAgdG91Y2hBbmdsZSA9IChNYXRoLmF0YW4yKE1hdGguYWJzKGRpZmZZKSwgTWF0aC5hYnMoZGlmZlgpKSAqIDE4MCkgLyBNYXRoLlBJO1xuICAgICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGUgOiAoOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRvdWNoZXMuY3VycmVudFggIT09IHRvdWNoZXMuc3RhcnRYIHx8IHRvdWNoZXMuY3VycmVudFkgIT09IHRvdWNoZXMuc3RhcnRZKSB7XG4gICAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLnRyaWdnZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZCcpO1xuICAgICAgfVxuICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgICAvLyBHcmFiIEN1cnNvclxuICAgICAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlck1vdmUnLCBlKTtcbiAgICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuXG4gICAgdmFyIGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICAgIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG5cbiAgICBkaWZmICo9IHBhcmFtcy50b3VjaFJhdGlvO1xuICAgIGlmIChydGwpIHsgZGlmZiA9IC1kaWZmOyB9XG5cbiAgICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkaWZmICsgZGF0YS5zdGFydFRyYW5zbGF0ZTtcblxuICAgIHZhciBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgICB2YXIgcmVzaXN0YW5jZVJhdGlvID0gcGFyYW1zLnJlc2lzdGFuY2VSYXRpbztcbiAgICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gICAgfVxuICAgIGlmICgoZGlmZiA+IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IChzd2lwZXIubWluVHJhbnNsYXRlKCkgLSAxKSArIChNYXRoLnBvdyggKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZiksIHJlc2lzdGFuY2VSYXRpbyApKTsgfVxuICAgIH0gZWxzZSBpZiAoZGlmZiA8IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHsgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEpIC0gKE1hdGgucG93KCAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpLCByZXNpc3RhbmNlUmF0aW8gKSk7IH1cbiAgICB9XG5cbiAgICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlcikge1xuICAgICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgfVxuXG5cbiAgICAvLyBUaHJlc2hvbGRcbiAgICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlcikgeyByZXR1cm47IH1cblxuICAgIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZSB8fCBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIC8vIFZlbG9jaXR5XG4gICAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgICAgdGltZTogZGF0YS50b3VjaFN0YXJ0VGltZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdjdXJyZW50WCcgOiAnY3VycmVudFknXSxcbiAgICAgICAgdGltZTogVXRpbHMubm93KCksXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gVXBkYXRlIHByb2dyZXNzXG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG4gICAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQgKGV2ZW50KSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuXG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcztcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQ7XG4gICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgIHZhciBlID0gZXZlbnQ7XG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgeyBlID0gZS5vcmlnaW5hbEV2ZW50OyB9XG4gICAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gICAgfVxuICAgIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuICAgIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIGlmIChkYXRhLmlzTW92ZWQgJiYgcGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgICAgfVxuICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gVGltZSBkaWZmXG4gICAgdmFyIHRvdWNoRW5kVGltZSA9IFV0aWxzLm5vdygpO1xuICAgIHZhciB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7XG5cbiAgICAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcbiAgICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUoZSk7XG4gICAgICBzd2lwZXIuZW1pdCgndGFwJywgZSk7XG4gICAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgKHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSkgPiAzMDApIHtcbiAgICAgICAgaWYgKGRhdGEuY2xpY2tUaW1lb3V0KSB7IGNsZWFyVGltZW91dChkYXRhLmNsaWNrVGltZW91dCk7IH1cbiAgICAgICAgZGF0YS5jbGlja1RpbWVvdXQgPSBVdGlscy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBzd2lwZXIuZW1pdCgnY2xpY2snLCBlKTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiAodG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lKSA8IDMwMCkge1xuICAgICAgICBpZiAoZGF0YS5jbGlja1RpbWVvdXQpIHsgY2xlYXJUaW1lb3V0KGRhdGEuY2xpY2tUaW1lb3V0KTsgfVxuICAgICAgICBzd2lwZXIuZW1pdCgnZG91YmxlVGFwJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gVXRpbHMubm93KCk7XG4gICAgVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSB7IHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTsgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFkYXRhLmlzVG91Y2hlZCB8fCAhZGF0YS5pc01vdmVkIHx8ICFzd2lwZXIuc3dpcGVEaXJlY3Rpb24gfHwgdG91Y2hlcy5kaWZmID09PSAwIHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcblxuICAgIHZhciBjdXJyZW50UG9zO1xuICAgIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA8IC1zd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRQb3MgPiAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA8IHNuYXBHcmlkLmxlbmd0aCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNuYXBHcmlkLmxlbmd0aCAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW0pIHtcbiAgICAgICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdmFyIGxhc3RNb3ZlRXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgICAgdmFyIHZlbG9jaXR5RXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG5cbiAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBsYXN0TW92ZUV2ZW50LnBvc2l0aW9uIC0gdmVsb2NpdHlFdmVudC5wb3NpdGlvbjtcbiAgICAgICAgICB2YXIgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSBkaXN0YW5jZSAvIHRpbWU7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5IC89IDI7XG4gICAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgPCBwYXJhbXMuZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkpIHtcbiAgICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGEgZmluZ2VyIHRoZW4gcmVsZWFzZWQuXG4gICAgICAgICAgLy8gVGhlcmUgd291bGQgYmUgbm8gZXZlbnRzIHdpdGggZGlzdGFuY2UgemVybywgc28gdGhlIGxhc3QgZXZlbnQgaXMgc3RhbGUuXG4gICAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgKFV0aWxzLm5vdygpIC0gbGFzdE1vdmVFdmVudC50aW1lKSA+IDMwMCkge1xuICAgICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvO1xuXG4gICAgICAgIGRhdGEudmVsb2NpdGllcy5sZW5ndGggPSAwO1xuICAgICAgICB2YXIgbW9tZW50dW1EdXJhdGlvbiA9IDEwMDAgKiBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bVJhdGlvO1xuICAgICAgICB2YXIgbW9tZW50dW1EaXN0YW5jZSA9IHN3aXBlci52ZWxvY2l0eSAqIG1vbWVudHVtRHVyYXRpb247XG5cbiAgICAgICAgdmFyIG5ld1Bvc2l0aW9uID0gc3dpcGVyLnRyYW5zbGF0ZSArIG1vbWVudHVtRGlzdGFuY2U7XG4gICAgICAgIGlmIChydGwpIHsgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247IH1cblxuICAgICAgICB2YXIgZG9Cb3VuY2UgPSBmYWxzZTtcbiAgICAgICAgdmFyIGFmdGVyQm91bmNlUG9zaXRpb247XG4gICAgICAgIHZhciBib3VuY2VBbW91bnQgPSBNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpICogMjAgKiBwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZVJhdGlvO1xuICAgICAgICB2YXIgbmVlZHNMb29wRml4O1xuICAgICAgICBpZiAobmV3UG9zaXRpb24gPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UpIHtcbiAgICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHsgbmVlZHNMb29wRml4ID0gdHJ1ZTsgfVxuICAgICAgICB9IGVsc2UgaWYgKG5ld1Bvc2l0aW9uID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgICBpZiAobmV3UG9zaXRpb24gLSBzd2lwZXIubWluVHJhbnNsYXRlKCkgPiBib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHsgbmVlZHNMb29wRml4ID0gdHJ1ZTsgfVxuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIHZhciBuZXh0U2xpZGU7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzbmFwR3JpZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNuYXBHcmlkW2pdID4gLW5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgIG5leHRTbGlkZSA9IGo7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGVdIC0gbmV3UG9zaXRpb24pIDwgTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlIC0gMV0gLSBuZXdQb3NpdGlvbikgfHwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5lZWRzTG9vcEZpeCkge1xuICAgICAgICAgIHN3aXBlci5vbmNlKCd0cmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaXggZHVyYXRpb25cbiAgICAgICAgaWYgKHN3aXBlci52ZWxvY2l0eSAhPT0gMCkge1xuICAgICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygoLW5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnbW9tZW50dW1Cb3VuY2UnKTtcblxuICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24ocGFyYW1zLnNwZWVkKTtcbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnZlbG9jaXR5KSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHRydWUsIHN3aXBlci5zd2lwZURpcmVjdGlvbik7XG4gICAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSB8fCB0aW1lRGlmZiA+PSBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGaW5kIGN1cnJlbnQgc2xpZGVcbiAgICB2YXIgc3RvcEluZGV4ID0gMDtcbiAgICB2YXIgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCkge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXBdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXBdKSB7XG4gICAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXBdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG4gICAgdmFyIHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuXG4gICAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgICBpZiAoIXBhcmFtcy5sb25nU3dpcGVzKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgeyBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApOyB9XG4gICAgICAgIGVsc2UgeyBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpOyB9XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgaWYgKHJhdGlvID4gKDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSkgeyBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApOyB9XG4gICAgICAgIGVsc2UgeyBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpOyB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNob3J0IHN3aXBlc1xuICAgICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblJlc2l6ZSAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgZWwgPSBzd2lwZXIuZWw7XG5cbiAgICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgICAvLyBCcmVha3BvaW50c1xuICAgIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgLy8gU2F2ZSBsb2Nrc1xuICAgIHZhciBhbGxvd1NsaWRlTmV4dCA9IHN3aXBlci5hbGxvd1NsaWRlTmV4dDtcbiAgICB2YXIgYWxsb3dTbGlkZVByZXYgPSBzd2lwZXIuYWxsb3dTbGlkZVByZXY7XG4gICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuXG4gICAgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG5cbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcblxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHZhciBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heChzd2lwZXIudHJhbnNsYXRlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2xpY2sgKGUpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHRvdWNoRXZlbnRzID0gc3dpcGVyLnRvdWNoRXZlbnRzO1xuICAgIHZhciBlbCA9IHN3aXBlci5lbDtcbiAgICB2YXIgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbDtcblxuICAgIHtcbiAgICAgIHN3aXBlci5vblRvdWNoU3RhcnQgPSBvblRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICAgICAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICAgICAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgICB9XG5cbiAgICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuXG4gICAgdmFyIHRhcmdldCA9IHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBlbCA6IHdyYXBwZXJFbDtcbiAgICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDtcblxuICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgIHtcbiAgICAgIGlmICghU3VwcG9ydC50b3VjaCAmJiAoU3VwcG9ydC5wb2ludGVyRXZlbnRzIHx8IFN1cHBvcnQucHJlZml4ZWRQb2ludGVyRXZlbnRzKSkge1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoU3VwcG9ydC50b3VjaCkge1xuICAgICAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGNhcHR1cmUgfSA6IGNhcHR1cmUpO1xuICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhRGV2aWNlLmlvcyAmJiAhRGV2aWNlLmFuZHJvaWQpIHx8IChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhU3VwcG9ydC50b3VjaCAmJiBEZXZpY2UuaW9zKSkge1xuICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICAgICAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlc2l6ZSBoYW5kbGVyXG4gICAgc3dpcGVyLm9uKChEZXZpY2UuaW9zIHx8IERldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJyksIG9uUmVzaXplLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciB0b3VjaEV2ZW50cyA9IHN3aXBlci50b3VjaEV2ZW50cztcbiAgICB2YXIgZWwgPSBzd2lwZXIuZWw7XG4gICAgdmFyIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG5cbiAgICB2YXIgdGFyZ2V0ID0gcGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/IGVsIDogd3JhcHBlckVsO1xuICAgIHZhciBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuXG4gICAgLy8gVG91Y2ggRXZlbnRzXG4gICAge1xuICAgICAgaWYgKCFTdXBwb3J0LnRvdWNoICYmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMgfHwgU3VwcG9ydC5wcmVmaXhlZFBvaW50ZXJFdmVudHMpKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChTdXBwb3J0LnRvdWNoKSB7XG4gICAgICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IHRvdWNoRXZlbnRzLnN0YXJ0ID09PSAnb25Ub3VjaFN0YXJ0JyAmJiBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFEZXZpY2UuaW9zICYmICFEZXZpY2UuYW5kcm9pZCkgfHwgKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFTdXBwb3J0LnRvdWNoICYmIERldmljZS5pb3MpKSB7XG4gICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gICAgICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVzaXplIGhhbmRsZXJcbiAgICBzd2lwZXIub2ZmKChEZXZpY2UuaW9zIHx8IERldmljZS5hbmRyb2lkID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZScgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJyksIG9uUmVzaXplKTtcbiAgfVxuXG4gIHZhciBldmVudHMgPSB7XG4gICAgYXR0YWNoRXZlbnRzOiBhdHRhY2hFdmVudHMsXG4gICAgZGV0YWNoRXZlbnRzOiBkZXRhY2hFdmVudHMsXG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0QnJlYWtwb2ludCAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBpbml0aWFsaXplZCA9IHN3aXBlci5pbml0aWFsaXplZDtcbiAgICB2YXIgbG9vcGVkU2xpZGVzID0gc3dpcGVyLmxvb3BlZFNsaWRlczsgaWYgKCBsb29wZWRTbGlkZXMgPT09IHZvaWQgMCApIGxvb3BlZFNsaWRlcyA9IDA7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICAgIGlmICghYnJlYWtwb2ludHMgfHwgKGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApKSB7IHJldHVybjsgfVxuXG4gICAgLy8gU2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcbiAgICB2YXIgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzKTtcblxuICAgIGlmIChicmVha3BvaW50ICYmIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCAhPT0gYnJlYWtwb2ludCkge1xuICAgICAgdmFyIGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKGJyZWFrcG9pbnRPbmx5UGFyYW1zKSB7XG4gICAgICAgIFsnc2xpZGVzUGVyVmlldycsICdzcGFjZUJldHdlZW4nLCAnc2xpZGVzUGVyR3JvdXAnXS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgIHZhciBwYXJhbVZhbHVlID0gYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dO1xuICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1WYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycgJiYgKHBhcmFtVmFsdWUgPT09ICdBVVRPJyB8fCBwYXJhbVZhbHVlID09PSAnYXV0bycpKSB7XG4gICAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSAnYXV0byc7XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJhbSA9PT0gJ3NsaWRlc1BlclZpZXcnKSB7XG4gICAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSBwYXJzZUZsb2F0KHBhcmFtVmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSBwYXJzZUludChwYXJhbVZhbHVlLCAxMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gICAgICB2YXIgZGlyZWN0aW9uQ2hhbmdlZCA9IGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICYmIGJyZWFrcG9pbnRQYXJhbXMuZGlyZWN0aW9uICE9PSBwYXJhbXMuZGlyZWN0aW9uO1xuICAgICAgdmFyIG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG5cbiAgICAgIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgICAgIH1cblxuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIGJyZWFrcG9pbnRQYXJhbXMpO1xuXG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICB9KTtcblxuICAgICAgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID0gYnJlYWtwb2ludDtcblxuICAgICAgaWYgKG5lZWRzUmVMb29wICYmIGluaXRpYWxpemVkKSB7XG4gICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKChhY3RpdmVJbmRleCAtIGxvb3BlZFNsaWRlcykgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QnJlYWtwb2ludCAoYnJlYWtwb2ludHMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoXG4gICAgaWYgKCFicmVha3BvaW50cykgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gICAgdmFyIGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgICB2YXIgcG9pbnRzID0gW107XG4gICAgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmZvckVhY2goZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICBwb2ludHMucHVzaChwb2ludCk7XG4gICAgfSk7XG4gICAgcG9pbnRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIHBhcnNlSW50KGEsIDEwKSAtIHBhcnNlSW50KGIsIDEwKTsgfSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzSW52ZXJzZSkge1xuICAgICAgICBpZiAocG9pbnQgPD0gd2luLmlubmVyV2lkdGgpIHtcbiAgICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocG9pbnQgPj0gd2luLmlubmVyV2lkdGggJiYgIWJyZWFrcG9pbnQpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4JztcbiAgfVxuXG4gIHZhciBicmVha3BvaW50cyA9IHsgc2V0QnJlYWtwb2ludDogc2V0QnJlYWtwb2ludCwgZ2V0QnJlYWtwb2ludDogZ2V0QnJlYWtwb2ludCB9O1xuXG4gIGZ1bmN0aW9uIGFkZENsYXNzZXMgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBjbGFzc05hbWVzID0gc3dpcGVyLmNsYXNzTmFtZXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgdmFyIHN1ZmZpeGVzID0gW107XG5cbiAgICBzdWZmaXhlcy5wdXNoKCdpbml0aWFsaXplZCcpO1xuICAgIHN1ZmZpeGVzLnB1c2gocGFyYW1zLmRpcmVjdGlvbik7XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICBzdWZmaXhlcy5wdXNoKCdmcmVlLW1vZGUnKTtcbiAgICB9XG4gICAgaWYgKCFTdXBwb3J0LmZsZXhib3gpIHtcbiAgICAgIHN1ZmZpeGVzLnB1c2goJ25vLWZsZXhib3gnKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzdWZmaXhlcy5wdXNoKCdhdXRvaGVpZ2h0Jyk7XG4gICAgfVxuICAgIGlmIChydGwpIHtcbiAgICAgIHN1ZmZpeGVzLnB1c2goJ3J0bCcpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICAgIHN1ZmZpeGVzLnB1c2goJ211bHRpcm93Jyk7XG4gICAgfVxuICAgIGlmIChEZXZpY2UuYW5kcm9pZCkge1xuICAgICAgc3VmZml4ZXMucHVzaCgnYW5kcm9pZCcpO1xuICAgIH1cbiAgICBpZiAoRGV2aWNlLmlvcykge1xuICAgICAgc3VmZml4ZXMucHVzaCgnaW9zJyk7XG4gICAgfVxuICAgIC8vIFdQOCBUb3VjaCBFdmVudHMgRml4XG4gICAgaWYgKChCcm93c2VyLmlzSUUgfHwgQnJvd3Nlci5pc0VkZ2UpICYmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMgfHwgU3VwcG9ydC5wcmVmaXhlZFBvaW50ZXJFdmVudHMpKSB7XG4gICAgICBzdWZmaXhlcy5wdXNoKChcIndwOC1cIiArIChwYXJhbXMuZGlyZWN0aW9uKSkpO1xuICAgIH1cblxuICAgIHN1ZmZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHN1ZmZpeCkge1xuICAgICAgY2xhc3NOYW1lcy5wdXNoKHBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzICsgc3VmZml4KTtcbiAgICB9KTtcblxuICAgICRlbC5hZGRDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVDbGFzc2VzICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICB2YXIgY2xhc3NOYW1lcyA9IHN3aXBlci5jbGFzc05hbWVzO1xuXG4gICAgJGVsLnJlbW92ZUNsYXNzKGNsYXNzTmFtZXMuam9pbignICcpKTtcbiAgfVxuXG4gIHZhciBjbGFzc2VzID0geyBhZGRDbGFzc2VzOiBhZGRDbGFzc2VzLCByZW1vdmVDbGFzc2VzOiByZW1vdmVDbGFzc2VzIH07XG5cbiAgZnVuY3Rpb24gbG9hZEltYWdlIChpbWFnZUVsLCBzcmMsIHNyY3NldCwgc2l6ZXMsIGNoZWNrRm9yQ29tcGxldGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGltYWdlO1xuICAgIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIHsgY2FsbGJhY2soKTsgfVxuICAgIH1cbiAgICBpZiAoIWltYWdlRWwuY29tcGxldGUgfHwgIWNoZWNrRm9yQ29tcGxldGUpIHtcbiAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgaW1hZ2UgPSBuZXcgd2luLkltYWdlKCk7XG4gICAgICAgIGltYWdlLm9ubG9hZCA9IG9uUmVhZHk7XG4gICAgICAgIGltYWdlLm9uZXJyb3IgPSBvblJlYWR5O1xuICAgICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcmNzZXQpIHtcbiAgICAgICAgICBpbWFnZS5zcmNzZXQgPSBzcmNzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25SZWFkeSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbWFnZSBhbHJlYWR5IGxvYWRlZC4uLlxuICAgICAgb25SZWFkeSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWxvYWRJbWFnZXMgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5pbWFnZXNUb0xvYWQgPSBzd2lwZXIuJGVsLmZpbmQoJ2ltZycpO1xuICAgIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgeyByZXR1cm47IH1cbiAgICAgIGlmIChzd2lwZXIuaW1hZ2VzTG9hZGVkICE9PSB1bmRlZmluZWQpIHsgc3dpcGVyLmltYWdlc0xvYWRlZCArPSAxOyB9XG4gICAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCA9PT0gc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudXBkYXRlT25JbWFnZXNSZWFkeSkgeyBzd2lwZXIudXBkYXRlKCk7IH1cbiAgICAgICAgc3dpcGVyLmVtaXQoJ2ltYWdlc1JlYWR5Jyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLmltYWdlc1RvTG9hZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGltYWdlRWwgPSBzd2lwZXIuaW1hZ2VzVG9Mb2FkW2ldO1xuICAgICAgc3dpcGVyLmxvYWRJbWFnZShcbiAgICAgICAgaW1hZ2VFbCxcbiAgICAgICAgaW1hZ2VFbC5jdXJyZW50U3JjIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmMnKSxcbiAgICAgICAgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLFxuICAgICAgICBpbWFnZUVsLnNpemVzIHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzaXplcycpLFxuICAgICAgICB0cnVlLFxuICAgICAgICBvblJlYWR5XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbWFnZXMgPSB7XG4gICAgbG9hZEltYWdlOiBsb2FkSW1hZ2UsXG4gICAgcHJlbG9hZEltYWdlczogcHJlbG9hZEltYWdlcyxcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB3YXNMb2NrZWQgPSBzd2lwZXIuaXNMb2NrZWQ7XG5cbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcblxuICAgIC8vIGV2ZW50c1xuICAgIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkgeyBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7IH1cblxuICAgIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGNoZWNrT3ZlcmZsb3ckMSA9IHsgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyB9O1xuXG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICBpbml0OiB0cnVlLFxuICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICAgIHRvdWNoRXZlbnRzVGFyZ2V0OiAnY29udGFpbmVyJyxcbiAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgc3BlZWQ6IDMwMCxcbiAgICAvL1xuICAgIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG5cbiAgICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCwgd2l0aCBVSVdlYlZpZXcpLlxuICAgIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gICAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcblxuICAgIC8vIEZyZWUgbW9kZVxuICAgIGZyZWVNb2RlOiBmYWxzZSxcbiAgICBmcmVlTW9kZU1vbWVudHVtOiB0cnVlLFxuICAgIGZyZWVNb2RlTW9tZW50dW1SYXRpbzogMSxcbiAgICBmcmVlTW9kZU1vbWVudHVtQm91bmNlOiB0cnVlLFxuICAgIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbzogMSxcbiAgICBmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbzogMSxcbiAgICBmcmVlTW9kZVN0aWNreTogZmFsc2UsXG4gICAgZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHk6IDAuMDIsXG5cbiAgICAvLyBBdXRvaGVpZ2h0XG4gICAgYXV0b0hlaWdodDogZmFsc2UsXG5cbiAgICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICAgIHNldFdyYXBwZXJTaXplOiBmYWxzZSxcblxuICAgIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gICAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG5cbiAgICAvLyBFZmZlY3RzXG4gICAgZWZmZWN0OiAnc2xpZGUnLCAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG5cbiAgICAvLyBCcmVha3BvaW50c1xuICAgIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gICAgYnJlYWtwb2ludHNJbnZlcnNlOiBmYWxzZSxcblxuICAgIC8vIFNsaWRlcyBncmlkXG4gICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgIHNsaWRlc1BlckNvbHVtbkZpbGw6ICdjb2x1bW4nLFxuICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsIC8vIGluIHB4XG4gICAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsIC8vIGluIHB4XG4gICAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuXG4gICAgLy8gRGlzYWJsZSBzd2lwZXIgYW5kIGhpZGUgbmF2aWdhdGlvbiB3aGVuIGNvbnRhaW5lciBub3Qgb3ZlcmZsb3dcbiAgICB3YXRjaE92ZXJmbG93OiBmYWxzZSxcblxuICAgIC8vIFJvdW5kIGxlbmd0aFxuICAgIHJvdW5kTGVuZ3RoczogZmFsc2UsXG5cbiAgICAvLyBUb3VjaGVzXG4gICAgdG91Y2hSYXRpbzogMSxcbiAgICB0b3VjaEFuZ2xlOiA0NSxcbiAgICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICAgIHNob3J0U3dpcGVzOiB0cnVlLFxuICAgIGxvbmdTd2lwZXM6IHRydWUsXG4gICAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gICAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gICAgZm9sbG93RmluZ2VyOiB0cnVlLFxuICAgIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICAgIHRocmVzaG9sZDogMCxcbiAgICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246IHRydWUsXG4gICAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICAgIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcblxuICAgIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gICAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG5cbiAgICAvLyBSZXNpc3RhbmNlXG4gICAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgICByZXNpc3RhbmNlUmF0aW86IDAuODUsXG5cbiAgICAvLyBQcm9ncmVzc1xuICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICAgIHdhdGNoU2xpZGVzVmlzaWJpbGl0eTogZmFsc2UsXG5cbiAgICAvLyBDdXJzb3JcbiAgICBncmFiQ3Vyc29yOiBmYWxzZSxcblxuICAgIC8vIENsaWNrc1xuICAgIHByZXZlbnRDbGlja3M6IHRydWUsXG4gICAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuXG4gICAgLy8gSW1hZ2VzXG4gICAgcHJlbG9hZEltYWdlczogdHJ1ZSxcbiAgICB1cGRhdGVPbkltYWdlc1JlYWR5OiB0cnVlLFxuXG4gICAgLy8gbG9vcFxuICAgIGxvb3A6IGZhbHNlLFxuICAgIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAwLFxuICAgIGxvb3BlZFNsaWRlczogbnVsbCxcbiAgICBsb29wRmlsbEdyb3VwV2l0aEJsYW5rOiBmYWxzZSxcblxuICAgIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICAgIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICAgIGFsbG93U2xpZGVOZXh0OiB0cnVlLFxuICAgIHN3aXBlSGFuZGxlcjogbnVsbCwgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgICBub1N3aXBpbmc6IHRydWUsXG4gICAgbm9Td2lwaW5nQ2xhc3M6ICdzd2lwZXItbm8tc3dpcGluZycsXG4gICAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG5cbiAgICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICAgIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG5cbiAgICAvLyBOU1xuICAgIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLScsIC8vIE5FV1xuICAgIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICAgIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1pbnZpc2libGUtYmxhbmsnLFxuICAgIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgICBzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1hY3RpdmUnLFxuICAgIHNsaWRlVmlzaWJsZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXZpc2libGUnLFxuICAgIHNsaWRlRHVwbGljYXRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlJyxcbiAgICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgICBzbGlkZUR1cGxpY2F0ZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtbmV4dCcsXG4gICAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gICAgc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLXByZXYnLFxuICAgIHdyYXBwZXJDbGFzczogJ3N3aXBlci13cmFwcGVyJyxcblxuICAgIC8vIENhbGxiYWNrc1xuICAgIHJ1bkNhbGxiYWNrc09uSW5pdDogdHJ1ZSxcbiAgfTtcblxuICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IFwib2ZmXCIgKi9cblxuICB2YXIgcHJvdG90eXBlcyA9IHtcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uJDEsXG4gICAgc2xpZGU6IHNsaWRlLFxuICAgIGxvb3A6IGxvb3AsXG4gICAgZ3JhYkN1cnNvcjogZ3JhYkN1cnNvcixcbiAgICBtYW5pcHVsYXRpb246IG1hbmlwdWxhdGlvbixcbiAgICBldmVudHM6IGV2ZW50cyxcbiAgICBicmVha3BvaW50czogYnJlYWtwb2ludHMsXG4gICAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgaW1hZ2VzOiBpbWFnZXMsXG4gIH07XG5cbiAgdmFyIGV4dGVuZGVkRGVmYXVsdHMgPSB7fTtcblxuICB2YXIgU3dpcGVyID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU3dpcGVyQ2xhc3MpIHtcbiAgICBmdW5jdGlvbiBTd2lwZXIoKSB7XG4gICAgICB2YXIgYXNzaWduO1xuXG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcbiAgICAgIHZhciBlbDtcbiAgICAgIHZhciBwYXJhbXM7XG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIChhc3NpZ24gPSBhcmdzLCBlbCA9IGFzc2lnblswXSwgcGFyYW1zID0gYXNzaWduWzFdKTtcbiAgICAgIH1cbiAgICAgIGlmICghcGFyYW1zKSB7IHBhcmFtcyA9IHt9OyB9XG5cbiAgICAgIHBhcmFtcyA9IFV0aWxzLmV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSB7IHBhcmFtcy5lbCA9IGVsOyB9XG5cbiAgICAgIFN3aXBlckNsYXNzLmNhbGwodGhpcywgcGFyYW1zKTtcblxuICAgICAgT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChmdW5jdGlvbiAocHJvdG90eXBlR3JvdXApIHtcbiAgICAgICAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2goZnVuY3Rpb24gKHByb3RvTWV0aG9kKSB7XG4gICAgICAgICAgaWYgKCFTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSkge1xuICAgICAgICAgICAgU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0gPSBwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXVtwcm90b01ldGhvZF07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHR5cGVvZiBzd2lwZXIubW9kdWxlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3dpcGVyLm1vZHVsZXMgPSB7fTtcbiAgICAgIH1cbiAgICAgIE9iamVjdC5rZXlzKHN3aXBlci5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBzd2lwZXIubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgICAgaWYgKG1vZHVsZS5wYXJhbXMpIHtcbiAgICAgICAgICB2YXIgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMobW9kdWxlLnBhcmFtcylbMF07XG4gICAgICAgICAgdmFyIG1vZHVsZVBhcmFtcyA9IG1vZHVsZS5wYXJhbXNbbW9kdWxlUGFyYW1OYW1lXTtcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHsgZW5hYmxlZDogdHJ1ZSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnXG4gICAgICAgICAgICAmJiAhKCdlbmFibGVkJyBpbiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSB7IHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0geyBlbmFibGVkOiBmYWxzZSB9OyB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgICAgdmFyIHN3aXBlclBhcmFtcyA9IFV0aWxzLmV4dGVuZCh7fSwgZGVmYXVsdHMpO1xuICAgICAgc3dpcGVyLnVzZU1vZHVsZXNQYXJhbXMoc3dpcGVyUGFyYW1zKTtcblxuICAgICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgICAgc3dpcGVyLnBhcmFtcyA9IFV0aWxzLmV4dGVuZCh7fSwgc3dpcGVyUGFyYW1zLCBleHRlbmRlZERlZmF1bHRzLCBwYXJhbXMpO1xuICAgICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAgIC8vIFNhdmUgRG9tIGxpYlxuICAgICAgc3dpcGVyLiQgPSAkO1xuXG4gICAgICAvLyBGaW5kIGVsXG4gICAgICB2YXIgJGVsID0gJChzd2lwZXIucGFyYW1zLmVsKTtcbiAgICAgIGVsID0gJGVsWzBdO1xuXG4gICAgICBpZiAoIWVsKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgc3dpcGVycyA9IFtdO1xuICAgICAgICAkZWwuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGNvbnRhaW5lckVsKSB7XG4gICAgICAgICAgdmFyIG5ld1BhcmFtcyA9IFV0aWxzLmV4dGVuZCh7fSwgcGFyYW1zLCB7IGVsOiBjb250YWluZXJFbCB9KTtcbiAgICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgICAgfVxuXG4gICAgICBlbC5zd2lwZXIgPSBzd2lwZXI7XG4gICAgICAkZWwuZGF0YSgnc3dpcGVyJywgc3dpcGVyKTtcblxuICAgICAgLy8gRmluZCBXcmFwcGVyXG4gICAgICB2YXIgJHdyYXBwZXJFbCA9ICRlbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MpKSk7XG5cbiAgICAgIC8vIEV4dGVuZCBTd2lwZXJcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgJGVsOiAkZWwsXG4gICAgICAgIGVsOiBlbCxcbiAgICAgICAgJHdyYXBwZXJFbDogJHdyYXBwZXJFbCxcbiAgICAgICAgd3JhcHBlckVsOiAkd3JhcHBlckVsWzBdLFxuXG4gICAgICAgIC8vIENsYXNzZXNcbiAgICAgICAgY2xhc3NOYW1lczogW10sXG5cbiAgICAgICAgLy8gU2xpZGVzXG4gICAgICAgIHNsaWRlczogJCgpLFxuICAgICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgICBzbGlkZXNTaXplc0dyaWQ6IFtdLFxuXG4gICAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICAgIGlzSG9yaXpvbnRhbDogZnVuY3Rpb24gaXNIb3Jpem9udGFsKCkge1xuICAgICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgICB9LFxuICAgICAgICBpc1ZlcnRpY2FsOiBmdW5jdGlvbiBpc1ZlcnRpY2FsKCkge1xuICAgICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUlRMXG4gICAgICAgIHJ0bDogKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgICB3cm9uZ1JUTDogJHdyYXBwZXJFbC5jc3MoJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94JyxcblxuICAgICAgICAvLyBJbmRleGVzXG4gICAgICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgICAgICByZWFsSW5kZXg6IDAsXG5cbiAgICAgICAgLy9cbiAgICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICAgIGlzRW5kOiBmYWxzZSxcblxuICAgICAgICAvLyBQcm9wc1xuICAgICAgICB0cmFuc2xhdGU6IDAsXG4gICAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgICBwcm9ncmVzczogMCxcbiAgICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG5cbiAgICAgICAgLy8gTG9ja3NcbiAgICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuXG4gICAgICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgICAgICB0b3VjaEV2ZW50czogKGZ1bmN0aW9uIHRvdWNoRXZlbnRzKCkge1xuICAgICAgICAgIHZhciB0b3VjaCA9IFsndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnXTtcbiAgICAgICAgICB2YXIgZGVza3RvcCA9IFsnbW91c2Vkb3duJywgJ21vdXNlbW92ZScsICdtb3VzZXVwJ107XG4gICAgICAgICAgaWYgKFN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgICAgICAgICAgZGVza3RvcCA9IFsncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJ107XG4gICAgICAgICAgfSBlbHNlIGlmIChTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykge1xuICAgICAgICAgICAgZGVza3RvcCA9IFsnTVNQb2ludGVyRG93bicsICdNU1BvaW50ZXJNb3ZlJywgJ01TUG9pbnRlclVwJ107XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c1RvdWNoID0ge1xuICAgICAgICAgICAgc3RhcnQ6IHRvdWNoWzBdLFxuICAgICAgICAgICAgbW92ZTogdG91Y2hbMV0sXG4gICAgICAgICAgICBlbmQ6IHRvdWNoWzJdLFxuICAgICAgICAgIH07XG4gICAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzRGVza3RvcCA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLFxuICAgICAgICAgICAgbW92ZTogZGVza3RvcFsxXSxcbiAgICAgICAgICAgIGVuZDogZGVza3RvcFsyXSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBTdXBwb3J0LnRvdWNoIHx8ICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggPyBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA6IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3A7XG4gICAgICAgIH0oKSksXG4gICAgICAgIHRvdWNoRXZlbnRzRGF0YToge1xuICAgICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB1bmRlZmluZWQsXG4gICAgICAgICAgdG91Y2hTdGFydFRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICAgIGN1cnJlbnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzdGFydFRyYW5zbGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAgIC8vIEZvcm0gZWxlbWVudHMgdG8gbWF0Y2hcbiAgICAgICAgICBmb3JtRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvJyxcbiAgICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgICBsYXN0Q2xpY2tUaW1lOiBVdGlscy5ub3coKSxcbiAgICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAvLyBWZWxvY2l0aWVzXG4gICAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICAgIGlzVG91Y2hFdmVudDogdW5kZWZpbmVkLFxuICAgICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gQ2xpY2tzXG4gICAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG5cbiAgICAgICAgLy8gVG91Y2hlc1xuICAgICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcblxuICAgICAgICB0b3VjaGVzOiB7XG4gICAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICAgIHN0YXJ0WTogMCxcbiAgICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgICBkaWZmOiAwLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEltYWdlc1xuICAgICAgICBpbWFnZXNUb0xvYWQ6IFtdLFxuICAgICAgICBpbWFnZXNMb2FkZWQ6IDAsXG5cbiAgICAgIH0pO1xuXG4gICAgICAvLyBJbnN0YWxsIE1vZHVsZXNcbiAgICAgIHN3aXBlci51c2VNb2R1bGVzKCk7XG5cbiAgICAgIC8vIEluaXRcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG5cbiAgICBpZiAoIFN3aXBlckNsYXNzICkgU3dpcGVyLl9fcHJvdG9fXyA9IFN3aXBlckNsYXNzO1xuICAgIFN3aXBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTd2lwZXJDbGFzcyAmJiBTd2lwZXJDbGFzcy5wcm90b3R5cGUgKTtcbiAgICBTd2lwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3dpcGVyO1xuXG4gICAgdmFyIHN0YXRpY0FjY2Vzc29ycyA9IHsgZXh0ZW5kZWREZWZhdWx0czogeyBjb25maWd1cmFibGU6IHRydWUgfSxkZWZhdWx0czogeyBjb25maWd1cmFibGU6IHRydWUgfSxDbGFzczogeyBjb25maWd1cmFibGU6IHRydWUgfSwkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgICBTd2lwZXIucHJvdG90eXBlLnNsaWRlc1BlclZpZXdEeW5hbWljID0gZnVuY3Rpb24gc2xpZGVzUGVyVmlld0R5bmFtaWMgKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgdmFyIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZDtcbiAgICAgIHZhciBzd2lwZXJTaXplID0gc3dpcGVyLnNpemU7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgc3B2ID0gMTtcbiAgICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgdmFyIHNsaWRlU2l6ZSA9IHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICB2YXIgYnJlYWtMb29wO1xuICAgICAgICBmb3IgKHZhciBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIHsgYnJlYWtMb29wID0gdHJ1ZTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpJDEgPSBhY3RpdmVJbmRleCAtIDE7IGkkMSA+PSAwOyBpJDEgLT0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaSQxXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2kkMV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgeyBicmVha0xvb3AgPSB0cnVlOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpJDIgPSBhY3RpdmVJbmRleCArIDE7IGkkMiA8IHNsaWRlcy5sZW5ndGg7IGkkMiArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc0dyaWRbaSQyXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3B2O1xuICAgIH07XG5cbiAgICBTd2lwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgICB9XG4gICAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICB2YXIgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICB9XG4gICAgICB2YXIgdHJhbnNsYXRlZDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdHJhbnNsYXRlZCkge1xuICAgICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLmVtaXQoJ3VwZGF0ZScpO1xuICAgIH07XG5cbiAgICBTd2lwZXIucHJvdG90eXBlLmNoYW5nZURpcmVjdGlvbiA9IGZ1bmN0aW9uIGNoYW5nZURpcmVjdGlvbiAobmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlKSB7XG4gICAgICBpZiAoIG5lZWRVcGRhdGUgPT09IHZvaWQgMCApIG5lZWRVcGRhdGUgPSB0cnVlO1xuXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBjdXJyZW50RGlyZWN0aW9uID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb247XG4gICAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgIH1cbiAgICAgIGlmICgobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uKSB8fCAobmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSkge1xuICAgICAgICByZXR1cm4gc3dpcGVyO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuJGVsXG4gICAgICAgIC5yZW1vdmVDbGFzcygoXCJcIiArIChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgY3VycmVudERpcmVjdGlvbiArIFwiIHdwOC1cIiArIGN1cnJlbnREaXJlY3Rpb24pKVxuICAgICAgICAuYWRkQ2xhc3MoKFwiXCIgKyAoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIG5ld0RpcmVjdGlvbikpO1xuXG4gICAgICBpZiAoKEJyb3dzZXIuaXNJRSB8fCBCcm93c2VyLmlzRWRnZSkgJiYgKFN1cHBvcnQucG9pbnRlckV2ZW50cyB8fCBTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykpIHtcbiAgICAgICAgc3dpcGVyLiRlbC5hZGRDbGFzcygoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBcIndwOC1cIiArIG5ld0RpcmVjdGlvbikpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9IG5ld0RpcmVjdGlvbjtcblxuICAgICAgc3dpcGVyLnNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZUluZGV4LCBzbGlkZUVsKSB7XG4gICAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICAgIGlmIChuZWVkVXBkYXRlKSB7IHN3aXBlci51cGRhdGUoKTsgfVxuXG4gICAgICByZXR1cm4gc3dpcGVyO1xuICAgIH07XG5cbiAgICBTd2lwZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiBpbml0ICgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgeyByZXR1cm47IH1cblxuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTtcblxuICAgICAgLy8gU2V0IGJyZWFrcG9pbnRcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBDbGFzc2VzXG4gICAgICBzd2lwZXIuYWRkQ2xhc3NlcygpO1xuXG4gICAgICAvLyBDcmVhdGUgbG9vcFxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgc2l6ZVxuICAgICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgICAgLy8gVXBkYXRlIHNsaWRlc1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBHcmFiIEN1cnNvclxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7XG4gICAgICAgIHN3aXBlci5wcmVsb2FkSW1hZ2VzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNsaWRlIFRvIEluaXRpYWwgU2xpZGVcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpO1xuICAgICAgfVxuXG4gICAgICAvLyBBdHRhY2ggZXZlbnRzXG4gICAgICBzd2lwZXIuYXR0YWNoRXZlbnRzKCk7XG5cbiAgICAgIC8vIEluaXQgRmxhZ1xuICAgICAgc3dpcGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgICAgLy8gRW1pdFxuICAgICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgICB9O1xuXG4gICAgU3dpcGVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoZGVsZXRlSW5zdGFuY2UsIGNsZWFuU3R5bGVzKSB7XG4gICAgICBpZiAoIGRlbGV0ZUluc3RhbmNlID09PSB2b2lkIDAgKSBkZWxldGVJbnN0YW5jZSA9IHRydWU7XG4gICAgICBpZiAoIGNsZWFuU3R5bGVzID09PSB2b2lkIDAgKSBjbGVhblN0eWxlcyA9IHRydWU7XG5cbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcblxuICAgICAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpO1xuXG4gICAgICAvLyBJbml0IEZsYWdcbiAgICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgICAvLyBEZXRhY2ggZXZlbnRzXG4gICAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICAgIC8vIERlc3Ryb3kgbG9vcFxuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGVhbnVwIHN0eWxlc1xuICAgICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICAgICRlbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICAkd3JhcHBlckVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICAgIHNsaWRlc1xuICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFtcbiAgICAgICAgICAgICAgcGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLFxuICAgICAgICAgICAgICBwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyxcbiAgICAgICAgICAgICAgcGFyYW1zLnNsaWRlTmV4dENsYXNzLFxuICAgICAgICAgICAgICBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MgXS5qb2luKCcgJykpXG4gICAgICAgICAgICAucmVtb3ZlQXR0cignc3R5bGUnKVxuICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JylcbiAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1jb2x1bW4nKVxuICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXJvdycpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXBlci5lbWl0KCdkZXN0cm95Jyk7XG5cbiAgICAgIC8vIERldGFjaCBlbWl0dGVyIGV2ZW50c1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgICAgc3dpcGVyLiRlbC5kYXRhKCdzd2lwZXInLCBudWxsKTtcbiAgICAgICAgVXRpbHMuZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5kZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgU3dpcGVyLmV4dGVuZERlZmF1bHRzID0gZnVuY3Rpb24gZXh0ZW5kRGVmYXVsdHMgKG5ld0RlZmF1bHRzKSB7XG4gICAgICBVdGlscy5leHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICAgIH07XG5cbiAgICBzdGF0aWNBY2Nlc3NvcnMuZXh0ZW5kZWREZWZhdWx0cy5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgICB9O1xuXG4gICAgc3RhdGljQWNjZXNzb3JzLmRlZmF1bHRzLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0cztcbiAgICB9O1xuXG4gICAgc3RhdGljQWNjZXNzb3JzLkNsYXNzLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBTd2lwZXJDbGFzcztcbiAgICB9O1xuXG4gICAgc3RhdGljQWNjZXNzb3JzLiQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICQ7XG4gICAgfTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTd2lwZXIsIHN0YXRpY0FjY2Vzc29ycyApO1xuXG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfShTd2lwZXJDbGFzcykpO1xuXG4gIHZhciBEZXZpY2UkMSA9IHtcbiAgICBuYW1lOiAnZGV2aWNlJyxcbiAgICBwcm90bzoge1xuICAgICAgZGV2aWNlOiBEZXZpY2UsXG4gICAgfSxcbiAgICBzdGF0aWM6IHtcbiAgICAgIGRldmljZTogRGV2aWNlLFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIFN1cHBvcnQkMSA9IHtcbiAgICBuYW1lOiAnc3VwcG9ydCcsXG4gICAgcHJvdG86IHtcbiAgICAgIHN1cHBvcnQ6IFN1cHBvcnQsXG4gICAgfSxcbiAgICBzdGF0aWM6IHtcbiAgICAgIHN1cHBvcnQ6IFN1cHBvcnQsXG4gICAgfSxcbiAgfTtcblxuICB2YXIgQnJvd3NlciQxID0ge1xuICAgIG5hbWU6ICdicm93c2VyJyxcbiAgICBwcm90bzoge1xuICAgICAgYnJvd3NlcjogQnJvd3NlcixcbiAgICB9LFxuICAgIHN0YXRpYzoge1xuICAgICAgYnJvd3NlcjogQnJvd3NlcixcbiAgICB9LFxuICB9O1xuXG4gIHZhciBSZXNpemUgPSB7XG4gICAgbmFtZTogJ3Jlc2l6ZScsXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgcmVzaXplOiB7XG4gICAgICAgICAgcmVzaXplSGFuZGxlcjogZnVuY3Rpb24gcmVzaXplSGFuZGxlcigpIHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVSZXNpemUnKTtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdyZXNpemUnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcjogZnVuY3Rpb24gb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKCkge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICAvLyBFbWl0IHJlc2l6ZVxuICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKTtcblxuICAgICAgICAvLyBFbWl0IG9yaWVudGF0aW9uY2hhbmdlXG4gICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHN3aXBlci5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7XG4gICAgICAgIHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHN3aXBlci5yZXNpemUub3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgT2JzZXJ2ZXIgPSB7XG4gICAgZnVuYzogd2luLk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luLldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIsXG4gICAgYXR0YWNoOiBmdW5jdGlvbiBhdHRhY2godGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIHZhciBPYnNlcnZlckZ1bmMgPSBPYnNlcnZlci5mdW5jO1xuICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYyhmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgICAvLyB0cmlnZ2VycyBhcmUgcmVkdW5kYW50IGFuZCBhcmUgdmVyeSBjb3N0bHlcbiAgICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh3aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgd2luLnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luLnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIHtcbiAgICAgICAgYXR0cmlidXRlczogdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5hdHRyaWJ1dGVzLFxuICAgICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YSxcbiAgICAgIH0pO1xuXG4gICAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFTdXBwb3J0Lm9ic2VydmVyIHx8ICFzd2lwZXIucGFyYW1zLm9ic2VydmVyKSB7IHJldHVybjsgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lclBhcmVudHMgPSBzd2lwZXIuJGVsLnBhcmVudHMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiRlbFswXSwgeyBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW4gfSk7XG5cbiAgICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChzd2lwZXIuJHdyYXBwZXJFbFswXSwgeyBhdHRyaWJ1dGVzOiBmYWxzZSB9KTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzID0gW107XG4gICAgfSxcbiAgfTtcblxuICB2YXIgT2JzZXJ2ZXIkMSA9IHtcbiAgICBuYW1lOiAnb2JzZXJ2ZXInLFxuICAgIHBhcmFtczoge1xuICAgICAgb2JzZXJ2ZXI6IGZhbHNlLFxuICAgICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlLFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgb2JzZXJ2ZXI6IHtcbiAgICAgICAgICBpbml0OiBPYnNlcnZlci5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBhdHRhY2g6IE9ic2VydmVyLmF0dGFjaC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgZGVzdHJveTogT2JzZXJ2ZXIuZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgb2JzZXJ2ZXJzOiBbXSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIub2JzZXJ2ZXIuaW5pdCgpO1xuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIub2JzZXJ2ZXIuZGVzdHJveSgpO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBWaXJ0dWFsID0ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGZvcmNlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciByZWYgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyIHNsaWRlc1BlclZpZXcgPSByZWYuc2xpZGVzUGVyVmlldztcbiAgICAgIHZhciBzbGlkZXNQZXJHcm91cCA9IHJlZi5zbGlkZXNQZXJHcm91cDtcbiAgICAgIHZhciBjZW50ZXJlZFNsaWRlcyA9IHJlZi5jZW50ZXJlZFNsaWRlcztcbiAgICAgIHZhciByZWYkMSA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICAgIHZhciBhZGRTbGlkZXNCZWZvcmUgPSByZWYkMS5hZGRTbGlkZXNCZWZvcmU7XG4gICAgICB2YXIgYWRkU2xpZGVzQWZ0ZXIgPSByZWYkMS5hZGRTbGlkZXNBZnRlcjtcbiAgICAgIHZhciByZWYkMiA9IHN3aXBlci52aXJ0dWFsO1xuICAgICAgdmFyIHByZXZpb3VzRnJvbSA9IHJlZiQyLmZyb207XG4gICAgICB2YXIgcHJldmlvdXNUbyA9IHJlZiQyLnRvO1xuICAgICAgdmFyIHNsaWRlcyA9IHJlZiQyLnNsaWRlcztcbiAgICAgIHZhciBwcmV2aW91c1NsaWRlc0dyaWQgPSByZWYkMi5zbGlkZXNHcmlkO1xuICAgICAgdmFyIHJlbmRlclNsaWRlID0gcmVmJDIucmVuZGVyU2xpZGU7XG4gICAgICB2YXIgcHJldmlvdXNPZmZzZXQgPSByZWYkMi5vZmZzZXQ7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuXG4gICAgICB2YXIgb2Zmc2V0UHJvcDtcbiAgICAgIGlmIChzd2lwZXIucnRsVHJhbnNsYXRlKSB7IG9mZnNldFByb3AgPSAncmlnaHQnOyB9XG4gICAgICBlbHNlIHsgb2Zmc2V0UHJvcCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnOyB9XG5cbiAgICAgIHZhciBzbGlkZXNBZnRlcjtcbiAgICAgIHZhciBzbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgc2xpZGVzQWZ0ZXIgPSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQmVmb3JlO1xuICAgICAgICBzbGlkZXNCZWZvcmUgPSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXNBZnRlciA9IHNsaWRlc1BlclZpZXcgKyAoc2xpZGVzUGVyR3JvdXAgLSAxKSArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICAgICAgc2xpZGVzQmVmb3JlID0gc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgIH1cbiAgICAgIHZhciBmcm9tID0gTWF0aC5tYXgoKGFjdGl2ZUluZGV4IHx8IDApIC0gc2xpZGVzQmVmb3JlLCAwKTtcbiAgICAgIHZhciB0byA9IE1hdGgubWluKChhY3RpdmVJbmRleCB8fCAwKSArIHNsaWRlc0FmdGVyLCBzbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgICB2YXIgb2Zmc2V0ID0gKHN3aXBlci5zbGlkZXNHcmlkW2Zyb21dIHx8IDApIC0gKHN3aXBlci5zbGlkZXNHcmlkWzBdIHx8IDApO1xuXG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnZpcnR1YWwsIHtcbiAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgc2xpZGVzR3JpZDogc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgICB9KTtcblxuICAgICAgZnVuY3Rpb24gb25SZW5kZXJlZCgpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgaWYgKHN3aXBlci5sYXp5ICYmIHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmV2aW91c0Zyb20gPT09IGZyb20gJiYgcHJldmlvdXNUbyA9PT0gdG8gJiYgIWZvcmNlKSB7XG4gICAgICAgIGlmIChzd2lwZXIuc2xpZGVzR3JpZCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkICYmIG9mZnNldCAhPT0gcHJldmlvdXNPZmZzZXQpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVzLmNzcyhvZmZzZXRQcm9wLCAob2Zmc2V0ICsgXCJweFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsLmNhbGwoc3dpcGVyLCB7XG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgICB0bzogdG8sXG4gICAgICAgICAgc2xpZGVzOiAoZnVuY3Rpb24gZ2V0U2xpZGVzKCkge1xuICAgICAgICAgICAgdmFyIHNsaWRlc1RvUmVuZGVyID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZnJvbTsgaSA8PSB0bzsgaSArPSAxKSB7XG4gICAgICAgICAgICAgIHNsaWRlc1RvUmVuZGVyLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNUb1JlbmRlcjtcbiAgICAgICAgICB9KCkpLFxuICAgICAgICB9KTtcbiAgICAgICAgb25SZW5kZXJlZCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcHJlcGVuZEluZGV4ZXMgPSBbXTtcbiAgICAgIHZhciBhcHBlbmRJbmRleGVzID0gW107XG4gICAgICBpZiAoZm9yY2UpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZCgoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSkpLnJlbW92ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHByZXZpb3VzRnJvbTsgaSA8PSBwcmV2aW91c1RvOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoaSA8IGZyb20gfHwgaSA+IHRvKSB7XG4gICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5maW5kKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgaSArIFwiXFxcIl1cIikpLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgc2xpZGVzLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICAgaWYgKGkkMSA+PSBmcm9tICYmIGkkMSA8PSB0bykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcHJldmlvdXNUbyA9PT0gJ3VuZGVmaW5lZCcgfHwgZm9yY2UpIHtcbiAgICAgICAgICAgIGFwcGVuZEluZGV4ZXMucHVzaChpJDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaSQxID4gcHJldmlvdXNUbykgeyBhcHBlbmRJbmRleGVzLnB1c2goaSQxKTsgfVxuICAgICAgICAgICAgaWYgKGkkMSA8IHByZXZpb3VzRnJvbSkgeyBwcmVwZW5kSW5kZXhlcy5wdXNoKGkkMSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGVuZEluZGV4ZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuYXBwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgICB9KTtcbiAgICAgIHByZXBlbmRJbmRleGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGIgLSBhOyB9KS5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5wcmVwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKCcuc3dpcGVyLXNsaWRlJykuY3NzKG9mZnNldFByb3AsIChvZmZzZXQgKyBcInB4XCIpKTtcbiAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICB9LFxuICAgIHJlbmRlclNsaWRlOiBmdW5jdGlvbiByZW5kZXJTbGlkZShzbGlkZSwgaW5kZXgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICAgIGlmIChwYXJhbXMuY2FjaGUgJiYgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgJHNsaWRlRWwgPSBwYXJhbXMucmVuZGVyU2xpZGVcbiAgICAgICAgPyAkKHBhcmFtcy5yZW5kZXJTbGlkZS5jYWxsKHN3aXBlciwgc2xpZGUsIGluZGV4KSlcbiAgICAgICAgOiAkKChcIjxkaXYgY2xhc3M9XFxcIlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgKyBcIlxcXCIgZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgaW5kZXggKyBcIlxcXCI+XCIgKyBzbGlkZSArIFwiPC9kaXY+XCIpKTtcbiAgICAgIGlmICghJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSkgeyAkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTsgfVxuICAgICAgaWYgKHBhcmFtcy5jYWNoZSkgeyBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF0gPSAkc2xpZGVFbDsgfVxuICAgICAgcmV0dXJuICRzbGlkZUVsO1xuICAgIH0sXG4gICAgYXBwZW5kU2xpZGU6IGZ1bmN0aW9uIGFwcGVuZFNsaWRlKHNsaWRlcykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlc1tpXSkgeyBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXNbaV0pOyB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5wdXNoKHNsaWRlcyk7XG4gICAgICB9XG4gICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgfSxcbiAgICBwcmVwZW5kU2xpZGU6IGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICAgICAgdmFyIG51bWJlck9mTmV3U2xpZGVzID0gMTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzW2ldKTsgfVxuICAgICAgICB9XG4gICAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgICBudW1iZXJPZk5ld1NsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXMpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICB2YXIgY2FjaGUgPSBzd2lwZXIudmlydHVhbC5jYWNoZTtcbiAgICAgICAgdmFyIG5ld0NhY2hlID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKGNhY2hlKS5mb3JFYWNoKGZ1bmN0aW9uIChjYWNoZWRJbmRleCkge1xuICAgICAgICAgIG5ld0NhY2hlW3BhcnNlSW50KGNhY2hlZEluZGV4LCAxMCkgKyBudW1iZXJPZk5ld1NsaWRlc10gPSBjYWNoZVtjYWNoZWRJbmRleF07XG4gICAgICAgIH0pO1xuICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IG5ld0NhY2hlO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDApO1xuICAgIH0sXG4gICAgcmVtb3ZlU2xpZGU6IGZ1bmN0aW9uIHJlbW92ZVNsaWRlKHNsaWRlc0luZGV4ZXMpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAndW5kZWZpbmVkJyB8fCBzbGlkZXNJbmRleGVzID09PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzSW5kZXhlcykpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHNsaWRlc0luZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXNbaV0sIDEpO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzW2ldXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNsaWRlc0luZGV4ZXNbaV0gPCBhY3RpdmVJbmRleCkgeyBhY3RpdmVJbmRleCAtPSAxOyB9XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlcywgMSk7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNsaWRlc0luZGV4ZXMgPCBhY3RpdmVJbmRleCkgeyBhY3RpdmVJbmRleCAtPSAxOyB9XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXgsIDApO1xuICAgIH0sXG4gICAgcmVtb3ZlQWxsU2xpZGVzOiBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IFtdO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IHt9O1xuICAgICAgfVxuICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgMCk7XG4gICAgfSxcbiAgfTtcblxuICB2YXIgVmlydHVhbCQxID0ge1xuICAgIG5hbWU6ICd2aXJ0dWFsJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIHZpcnR1YWw6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHNsaWRlczogW10sXG4gICAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgICByZW5kZXJTbGlkZTogbnVsbCxcbiAgICAgICAgcmVuZGVyRXh0ZXJuYWw6IG51bGwsXG4gICAgICAgIGFkZFNsaWRlc0JlZm9yZTogMCxcbiAgICAgICAgYWRkU2xpZGVzQWZ0ZXI6IDAsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgdmlydHVhbDoge1xuICAgICAgICAgIHVwZGF0ZTogVmlydHVhbC51cGRhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGFwcGVuZFNsaWRlOiBWaXJ0dWFsLmFwcGVuZFNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBwcmVwZW5kU2xpZGU6IFZpcnR1YWwucHJlcGVuZFNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICByZW1vdmVTbGlkZTogVmlydHVhbC5yZW1vdmVTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgcmVtb3ZlQWxsU2xpZGVzOiBWaXJ0dWFsLnJlbW92ZUFsbFNsaWRlcy5iaW5kKHN3aXBlciksXG4gICAgICAgICAgcmVuZGVyU2xpZGU6IFZpcnR1YWwucmVuZGVyU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIHNsaWRlczogc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnNsaWRlcyxcbiAgICAgICAgICBjYWNoZToge30sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaCgoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBcInZpcnR1YWxcIikpO1xuICAgICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuXG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUpIHtcbiAgICAgICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKCk7XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEtleWJvYXJkID0ge1xuICAgIGhhbmRsZTogZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIGUgPSBldmVudDtcbiAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIHsgZSA9IGUub3JpZ2luYWxFdmVudDsgfSAvLyBqcXVlcnkgZml4XG4gICAgICB2YXIga2MgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTtcbiAgICAgIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmICgoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIGtjID09PSAzOSkgfHwgKHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYga2MgPT09IDQwKSB8fCBrYyA9PT0gMzQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICgoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIGtjID09PSAzNykgfHwgKHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYga2MgPT09IDM4KSB8fCBrYyA9PT0gMzMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChkb2MuYWN0aXZlRWxlbWVudCAmJiBkb2MuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jLmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyB8fCBkb2MuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnKSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQub25seUluVmlld3BvcnQgJiYgKGtjID09PSAzMyB8fCBrYyA9PT0gMzQgfHwga2MgPT09IDM3IHx8IGtjID09PSAzOSB8fCBrYyA9PT0gMzggfHwga2MgPT09IDQwKSkge1xuICAgICAgICB2YXIgaW5WaWV3ID0gZmFsc2U7XG4gICAgICAgIC8vIENoZWNrIHRoYXQgc3dpcGVyIHNob3VsZCBiZSBpbnNpZGUgb2YgdmlzaWJsZSBhcmVhIG9mIHdpbmRvd1xuICAgICAgICBpZiAoc3dpcGVyLiRlbC5wYXJlbnRzKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpKSkubGVuZ3RoID4gMCAmJiBzd2lwZXIuJGVsLnBhcmVudHMoKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IHdpbi5pbm5lcldpZHRoO1xuICAgICAgICB2YXIgd2luZG93SGVpZ2h0ID0gd2luLmlubmVySGVpZ2h0O1xuICAgICAgICB2YXIgc3dpcGVyT2Zmc2V0ID0gc3dpcGVyLiRlbC5vZmZzZXQoKTtcbiAgICAgICAgaWYgKHJ0bCkgeyBzd2lwZXJPZmZzZXQubGVmdCAtPSBzd2lwZXIuJGVsWzBdLnNjcm9sbExlZnQ7IH1cbiAgICAgICAgdmFyIHN3aXBlckNvb3JkID0gW1xuICAgICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sXG4gICAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSxcbiAgICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXIuaGVpZ2h0XSxcbiAgICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzd2lwZXIud2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXIuaGVpZ2h0XSBdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgdmFyIHBvaW50ID0gc3dpcGVyQ29vcmRbaV07XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgcG9pbnRbMF0gPj0gMCAmJiBwb2ludFswXSA8PSB3aW5kb3dXaWR0aFxuICAgICAgICAgICAgJiYgcG9pbnRbMV0gPj0gMCAmJiBwb2ludFsxXSA8PSB3aW5kb3dIZWlnaHRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaW5WaWV3KSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgaWYgKGtjID09PSAzMyB8fCBrYyA9PT0gMzQgfHwga2MgPT09IDM3IHx8IGtjID09PSAzOSkge1xuICAgICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgICAgICAgIGVsc2UgeyBlLnJldHVyblZhbHVlID0gZmFsc2U7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKChrYyA9PT0gMzQgfHwga2MgPT09IDM5KSAmJiAhcnRsKSB8fCAoKGtjID09PSAzMyB8fCBrYyA9PT0gMzcpICYmIHJ0bCkpIHsgc3dpcGVyLnNsaWRlTmV4dCgpOyB9XG4gICAgICAgIGlmICgoKGtjID09PSAzMyB8fCBrYyA9PT0gMzcpICYmICFydGwpIHx8ICgoa2MgPT09IDM0IHx8IGtjID09PSAzOSkgJiYgcnRsKSkgeyBzd2lwZXIuc2xpZGVQcmV2KCk7IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChrYyA9PT0gMzMgfHwga2MgPT09IDM0IHx8IGtjID09PSAzOCB8fCBrYyA9PT0gNDApIHtcbiAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgICAgICBlbHNlIHsgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtjID09PSAzNCB8fCBrYyA9PT0gNDApIHsgc3dpcGVyLnNsaWRlTmV4dCgpOyB9XG4gICAgICAgIGlmIChrYyA9PT0gMzMgfHwga2MgPT09IDM4KSB7IHN3aXBlci5zbGlkZVByZXYoKTsgfVxuICAgICAgfVxuICAgICAgc3dpcGVyLmVtaXQoJ2tleVByZXNzJywga2MpO1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAkKGRvYykub24oJ2tleWRvd24nLCBzd2lwZXIua2V5Ym9hcmQuaGFuZGxlKTtcbiAgICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gdHJ1ZTtcbiAgICB9LFxuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAkKGRvYykub2ZmKCdrZXlkb3duJywgc3dpcGVyLmtleWJvYXJkLmhhbmRsZSk7XG4gICAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IGZhbHNlO1xuICAgIH0sXG4gIH07XG5cbiAgdmFyIEtleWJvYXJkJDEgPSB7XG4gICAgbmFtZTogJ2tleWJvYXJkJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGtleWJvYXJkOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBrZXlib2FyZDoge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIGVuYWJsZTogS2V5Ym9hcmQuZW5hYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBkaXNhYmxlOiBLZXlib2FyZC5kaXNhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBoYW5kbGU6IEtleWJvYXJkLmhhbmRsZS5iaW5kKHN3aXBlciksXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIua2V5Ym9hcmQuZGlzYWJsZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZCgpIHtcbiAgICB2YXIgZXZlbnROYW1lID0gJ29ud2hlZWwnO1xuICAgIHZhciBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2M7XG5cbiAgICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG5cbiAgICBpZiAoIWlzU3VwcG9ydGVkXG4gICAgICAmJiBkb2MuaW1wbGVtZW50YXRpb25cbiAgICAgICYmIGRvYy5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlXG4gICAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tZG9taW1wbGVtZW50YXRpb24taGFzZmVhdHVyZVxuICAgICAgJiYgZG9jLmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZVxuICAgICkge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgICAgaXNTdXBwb3J0ZWQgPSBkb2MuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICAgIH1cblxuICAgIHJldHVybiBpc1N1cHBvcnRlZDtcbiAgfVxuICB2YXIgTW91c2V3aGVlbCA9IHtcbiAgICBsYXN0U2Nyb2xsVGltZTogVXRpbHMubm93KCksXG4gICAgZXZlbnQ6IChmdW5jdGlvbiBnZXRFdmVudCgpIHtcbiAgICAgIGlmICh3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdmaXJlZm94JykgPiAtMSkgeyByZXR1cm4gJ0RPTU1vdXNlU2Nyb2xsJzsgfVxuICAgICAgcmV0dXJuIGlzRXZlbnRTdXBwb3J0ZWQoKSA/ICd3aGVlbCcgOiAnbW91c2V3aGVlbCc7XG4gICAgfSgpKSxcbiAgICBub3JtYWxpemU6IGZ1bmN0aW9uIG5vcm1hbGl6ZShlKSB7XG4gICAgICAvLyBSZWFzb25hYmxlIGRlZmF1bHRzXG4gICAgICB2YXIgUElYRUxfU1RFUCA9IDEwO1xuICAgICAgdmFyIExJTkVfSEVJR0hUID0gNDA7XG4gICAgICB2YXIgUEFHRV9IRUlHSFQgPSA4MDA7XG5cbiAgICAgIHZhciBzWCA9IDA7XG4gICAgICB2YXIgc1kgPSAwOyAvLyBzcGluWCwgc3BpbllcbiAgICAgIHZhciBwWCA9IDA7XG4gICAgICB2YXIgcFkgPSAwOyAvLyBwaXhlbFgsIHBpeGVsWVxuXG4gICAgICAvLyBMZWdhY3lcbiAgICAgIGlmICgnZGV0YWlsJyBpbiBlKSB7XG4gICAgICAgIHNZID0gZS5kZXRhaWw7XG4gICAgICB9XG4gICAgICBpZiAoJ3doZWVsRGVsdGEnIGluIGUpIHtcbiAgICAgICAgc1kgPSAtZS53aGVlbERlbHRhIC8gMTIwO1xuICAgICAgfVxuICAgICAgaWYgKCd3aGVlbERlbHRhWScgaW4gZSkge1xuICAgICAgICBzWSA9IC1lLndoZWVsRGVsdGFZIC8gMTIwO1xuICAgICAgfVxuICAgICAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZSkge1xuICAgICAgICBzWCA9IC1lLndoZWVsRGVsdGFYIC8gMTIwO1xuICAgICAgfVxuXG4gICAgICAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG4gICAgICBpZiAoJ2F4aXMnIGluIGUgJiYgZS5heGlzID09PSBlLkhPUklaT05UQUxfQVhJUykge1xuICAgICAgICBzWCA9IHNZO1xuICAgICAgICBzWSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgICAgcFkgPSBzWSAqIFBJWEVMX1NURVA7XG5cbiAgICAgIGlmICgnZGVsdGFZJyBpbiBlKSB7XG4gICAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgICB9XG4gICAgICBpZiAoJ2RlbHRhWCcgaW4gZSkge1xuICAgICAgICBwWCA9IGUuZGVsdGFYO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHBYIHx8IHBZKSAmJiBlLmRlbHRhTW9kZSkge1xuICAgICAgICBpZiAoZS5kZWx0YU1vZGUgPT09IDEpIHsgLy8gZGVsdGEgaW4gTElORSB1bml0c1xuICAgICAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgICAgIHBZICo9IExJTkVfSEVJR0hUO1xuICAgICAgICB9IGVsc2UgeyAvLyBkZWx0YSBpbiBQQUdFIHVuaXRzXG4gICAgICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmFsbC1iYWNrIGlmIHNwaW4gY2Fubm90IGJlIGRldGVybWluZWRcbiAgICAgIGlmIChwWCAmJiAhc1gpIHtcbiAgICAgICAgc1ggPSAocFggPCAxKSA/IC0xIDogMTtcbiAgICAgIH1cbiAgICAgIGlmIChwWSAmJiAhc1kpIHtcbiAgICAgICAgc1kgPSAocFkgPCAxKSA/IC0xIDogMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3Bpblg6IHNYLFxuICAgICAgICBzcGluWTogc1ksXG4gICAgICAgIHBpeGVsWDogcFgsXG4gICAgICAgIHBpeGVsWTogcFksXG4gICAgICB9O1xuICAgIH0sXG4gICAgaGFuZGxlTW91c2VFbnRlcjogZnVuY3Rpb24gaGFuZGxlTW91c2VFbnRlcigpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IHRydWU7XG4gICAgfSxcbiAgICBoYW5kbGVNb3VzZUxlYXZlOiBmdW5jdGlvbiBoYW5kbGVNb3VzZUxlYXZlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gZmFsc2U7XG4gICAgfSxcbiAgICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgICAgdmFyIGUgPSBldmVudDtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbDtcblxuICAgICAgaWYgKCFzd2lwZXIubW91c2VFbnRlcmVkICYmICFwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHsgcmV0dXJuIHRydWU7IH1cblxuICAgICAgaWYgKGUub3JpZ2luYWxFdmVudCkgeyBlID0gZS5vcmlnaW5hbEV2ZW50OyB9IC8vIGpxdWVyeSBmaXhcbiAgICAgIHZhciBkZWx0YSA9IDA7XG4gICAgICB2YXIgcnRsRmFjdG9yID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcblxuICAgICAgdmFyIGRhdGEgPSBNb3VzZXdoZWVsLm5vcm1hbGl6ZShlKTtcblxuICAgICAgaWYgKHBhcmFtcy5mb3JjZVRvQXhpcykge1xuICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSkgeyBkZWx0YSA9IGRhdGEucGl4ZWxYICogcnRsRmFjdG9yOyB9XG4gICAgICAgICAgZWxzZSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGF0YS5waXhlbFkpID4gTWF0aC5hYnMoZGF0YS5waXhlbFgpKSB7IGRlbHRhID0gZGF0YS5waXhlbFk7IH1cbiAgICAgICAgZWxzZSB7IHJldHVybiB0cnVlOyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWx0YSA9IE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSA/IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvciA6IC1kYXRhLnBpeGVsWTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlbHRhID09PSAwKSB7IHJldHVybiB0cnVlOyB9XG5cbiAgICAgIGlmIChwYXJhbXMuaW52ZXJ0KSB7IGRlbHRhID0gLWRlbHRhOyB9XG5cbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICBpZiAoVXRpbHMubm93KCkgLSBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA+IDYwKSB7XG4gICAgICAgICAgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgICAgICAgaWYgKCghc3dpcGVyLmlzRW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgICAgICAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5yZWxlYXNlT25FZGdlcykgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIGUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPSAobmV3IHdpbi5EYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZyZWVtb2RlIG9yIHNjcm9sbENvbnRhaW5lcjpcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBvc2l0aW9uID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpICsgKGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5KTtcbiAgICAgICAgdmFyIHdhc0JlZ2lubmluZyA9IHN3aXBlci5pc0JlZ2lubmluZztcbiAgICAgICAgdmFyIHdhc0VuZCA9IHN3aXBlci5pc0VuZDtcblxuICAgICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7IHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpOyB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHsgcG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7IH1cblxuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgICAgICBpZiAoKCF3YXNCZWdpbm5pbmcgJiYgc3dpcGVyLmlzQmVnaW5uaW5nKSB8fCAoIXdhc0VuZCAmJiBzd2lwZXIuaXNFbmQpKSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQpO1xuICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSBVdGlscy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgICB9LCAzMDApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVtaXQgZXZlbnRcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIGUpO1xuXG4gICAgICAgIC8vIFN0b3AgYXV0b3BsYXlcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uKSB7IHN3aXBlci5hdXRvcGxheS5zdG9wKCk7IH1cbiAgICAgICAgLy8gUmV0dXJuIHBhZ2Ugc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9uID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgIH1cblxuICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gICAgICBlbHNlIHsgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOyB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFNb3VzZXdoZWVsLmV2ZW50KSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICB2YXIgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkICE9PSAnY29udGFpbmVyJykge1xuICAgICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZWQpO1xuICAgICAgfVxuICAgICAgdGFyZ2V0Lm9uKCdtb3VzZWVudGVyJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlcik7XG4gICAgICB0YXJnZXQub24oJ21vdXNlbGVhdmUnLCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGVNb3VzZUxlYXZlKTtcbiAgICAgIHRhcmdldC5vbihNb3VzZXdoZWVsLmV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghTW91c2V3aGVlbC5ldmVudCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIGlmICghc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIHZhciB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZWQgIT09ICdjb250YWluZXInKSB7XG4gICAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCk7XG4gICAgICB9XG4gICAgICB0YXJnZXQub2ZmKE1vdXNld2hlZWwuZXZlbnQsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZSk7XG4gICAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICB9O1xuXG4gIHZhciBNb3VzZXdoZWVsJDEgPSB7XG4gICAgbmFtZTogJ21vdXNld2hlZWwnLFxuICAgIHBhcmFtczoge1xuICAgICAgbW91c2V3aGVlbDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgcmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuICAgICAgICBpbnZlcnQ6IGZhbHNlLFxuICAgICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICAgIHNlbnNpdGl2aXR5OiAxLFxuICAgICAgICBldmVudHNUYXJnZWQ6ICdjb250YWluZXInLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIG1vdXNld2hlZWw6IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBlbmFibGU6IE1vdXNld2hlZWwuZW5hYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBkaXNhYmxlOiBNb3VzZXdoZWVsLmRpc2FibGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGhhbmRsZTogTW91c2V3aGVlbC5oYW5kbGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGhhbmRsZU1vdXNlRW50ZXI6IE1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlci5iaW5kKHN3aXBlciksXG4gICAgICAgICAgaGFuZGxlTW91c2VMZWF2ZTogTW91c2V3aGVlbC5oYW5kbGVNb3VzZUxlYXZlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBsYXN0U2Nyb2xsVGltZTogVXRpbHMubm93KCksXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkKSB7IHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpOyB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSB7IHN3aXBlci5tb3VzZXdoZWVsLmRpc2FibGUoKTsgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBOYXZpZ2F0aW9uID0ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7IHJldHVybjsgfVxuICAgICAgdmFyIHJlZiA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgICAgdmFyICRuZXh0RWwgPSByZWYuJG5leHRFbDtcbiAgICAgIHZhciAkcHJldkVsID0gcmVmLiRwcmV2RWw7XG5cbiAgICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgICAgJHByZXZFbC5hZGRDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgJHByZXZFbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgICAkbmV4dEVsLmFkZENsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICAkbmV4dEVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvblByZXZDbGljazogZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHsgcmV0dXJuOyB9XG4gICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgfSxcbiAgICBvbk5leHRDbGljazogZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHsgcmV0dXJuOyB9XG4gICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgeyByZXR1cm47IH1cblxuICAgICAgdmFyICRuZXh0RWw7XG4gICAgICB2YXIgJHByZXZFbDtcbiAgICAgIGlmIChwYXJhbXMubmV4dEVsKSB7XG4gICAgICAgICRuZXh0RWwgPSAkKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50c1xuICAgICAgICAgICYmIHR5cGVvZiBwYXJhbXMubmV4dEVsID09PSAnc3RyaW5nJ1xuICAgICAgICAgICYmICRuZXh0RWwubGVuZ3RoID4gMVxuICAgICAgICAgICYmIHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKS5sZW5ndGggPT09IDFcbiAgICAgICAgKSB7XG4gICAgICAgICAgJG5leHRFbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5wcmV2RWwpIHtcbiAgICAgICAgJHByZXZFbCA9ICQocGFyYW1zLnByZXZFbCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzXG4gICAgICAgICAgJiYgdHlwZW9mIHBhcmFtcy5wcmV2RWwgPT09ICdzdHJpbmcnXG4gICAgICAgICAgJiYgJHByZXZFbC5sZW5ndGggPiAxXG4gICAgICAgICAgJiYgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpLmxlbmd0aCA9PT0gMVxuICAgICAgICApIHtcbiAgICAgICAgICAkcHJldkVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgICAkbmV4dEVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uTmV4dENsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgICAkcHJldkVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICAgIH1cblxuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgICAgICRuZXh0RWw6ICRuZXh0RWwsXG4gICAgICAgIG5leHRFbDogJG5leHRFbCAmJiAkbmV4dEVsWzBdLFxuICAgICAgICAkcHJldkVsOiAkcHJldkVsLFxuICAgICAgICBwcmV2RWw6ICRwcmV2RWwgJiYgJHByZXZFbFswXSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHJlZiA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgICAgdmFyICRuZXh0RWwgPSByZWYuJG5leHRFbDtcbiAgICAgIHZhciAkcHJldkVsID0gcmVmLiRwcmV2RWw7XG4gICAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCkge1xuICAgICAgICAkbmV4dEVsLm9mZignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgICAgICRuZXh0RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGgpIHtcbiAgICAgICAgJHByZXZFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spO1xuICAgICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIHZhciBOYXZpZ2F0aW9uJDEgPSB7XG4gICAgbmFtZTogJ25hdmlnYXRpb24nLFxuICAgIHBhcmFtczoge1xuICAgICAgbmF2aWdhdGlvbjoge1xuICAgICAgICBuZXh0RWw6IG51bGwsXG4gICAgICAgIHByZXZFbDogbnVsbCxcblxuICAgICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgICAgaGlkZGVuQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWhpZGRlbicsXG4gICAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaycsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgbmF2aWdhdGlvbjoge1xuICAgICAgICAgIGluaXQ6IE5hdmlnYXRpb24uaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgdXBkYXRlOiBOYXZpZ2F0aW9uLnVwZGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgZGVzdHJveTogTmF2aWdhdGlvbi5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBvbk5leHRDbGljazogTmF2aWdhdGlvbi5vbk5leHRDbGljay5iaW5kKHN3aXBlciksXG4gICAgICAgICAgb25QcmV2Q2xpY2s6IE5hdmlnYXRpb24ub25QcmV2Q2xpY2suYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgdG9FZGdlOiBmdW5jdGlvbiB0b0VkZ2UoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICBmcm9tRWRnZTogZnVuY3Rpb24gZnJvbUVkZ2UoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLm5hdmlnYXRpb24uZGVzdHJveSgpO1xuICAgICAgfSxcbiAgICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljayhlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgcmVmID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgICAgIHZhciAkbmV4dEVsID0gcmVmLiRuZXh0RWw7XG4gICAgICAgIHZhciAkcHJldkVsID0gcmVmLiRwcmV2RWw7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2tcbiAgICAgICAgICAmJiAhJChlLnRhcmdldCkuaXMoJHByZXZFbClcbiAgICAgICAgICAmJiAhJChlLnRhcmdldCkuaXMoJG5leHRFbClcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGlzSGlkZGVuO1xuICAgICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgICBpc0hpZGRlbiA9ICRuZXh0RWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgICAgIGlzSGlkZGVuID0gJHByZXZFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uU2hvdycsIHN3aXBlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uSGlkZScsIHN3aXBlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgICAkbmV4dEVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgICAkcHJldkVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIFBhZ2luYXRpb24gPSB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAvLyBSZW5kZXIgfHwgVXBkYXRlIFBhZ2luYXRpb24gYnVsbGV0cy9pdGVtc1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICAgIHZhciBjdXJyZW50O1xuICAgICAgdmFyIHRvdGFsID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgY3VycmVudCA9IE1hdGguY2VpbCgoc3dpcGVyLmFjdGl2ZUluZGV4IC0gc3dpcGVyLmxvb3BlZFNsaWRlcykgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgaWYgKGN1cnJlbnQgPiBzbGlkZXNMZW5ndGggLSAxIC0gKHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSkge1xuICAgICAgICAgIGN1cnJlbnQgLT0gKHNsaWRlc0xlbmd0aCAtIChzd2lwZXIubG9vcGVkU2xpZGVzICogMikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50ID4gdG90YWwgLSAxKSB7IGN1cnJlbnQgLT0gdG90YWw7IH1cbiAgICAgICAgaWYgKGN1cnJlbnQgPCAwICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvblR5cGUgIT09ICdidWxsZXRzJykgeyBjdXJyZW50ID0gdG90YWwgKyBjdXJyZW50OyB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICAgIH1cbiAgICAgIC8vIFR5cGVzXG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICAgIHZhciBmaXJzdEluZGV4O1xuICAgICAgICB2YXIgbGFzdEluZGV4O1xuICAgICAgICB2YXIgbWlkSW5kZXg7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplID0gYnVsbGV0cy5lcSgwKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnb3V0ZXJXaWR0aCcgOiAnb3V0ZXJIZWlnaHQnXSh0cnVlKTtcbiAgICAgICAgICAkZWwuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0JywgKChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplICogKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KSkgKyBcInB4XCIpKTtcbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ICs9IChjdXJyZW50IC0gc3dpcGVyLnByZXZpb3VzSW5kZXgpO1xuICAgICAgICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA+IChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZmlyc3RJbmRleCA9IGN1cnJlbnQgLSBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXg7XG4gICAgICAgICAgbGFzdEluZGV4ID0gZmlyc3RJbmRleCArIChNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKTtcbiAgICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgYnVsbGV0cy5yZW1vdmVDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIiBcIiArIChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbmV4dCBcIiArIChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbmV4dC1uZXh0IFwiICsgKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1wcmV2IFwiICsgKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1wcmV2LXByZXYgXCIgKyAocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW1haW5cIikpO1xuICAgICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBidWxsZXRzLmVhY2goZnVuY3Rpb24gKGluZGV4LCBidWxsZXQpIHtcbiAgICAgICAgICAgIHZhciAkYnVsbGV0ID0gJChidWxsZXQpO1xuICAgICAgICAgICAgdmFyIGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1tYWluXCIpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAkYnVsbGV0XG4gICAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItcHJldlwiKSlcbiAgICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1wcmV2LXByZXZcIikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgJGJ1bGxldFxuICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW5leHRcIikpXG4gICAgICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbmV4dC1uZXh0XCIpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciAkYnVsbGV0ID0gYnVsbGV0cy5lcShjdXJyZW50KTtcbiAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgdmFyICRmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEoZmlyc3RJbmRleCk7XG4gICAgICAgICAgICB2YXIgJGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGxhc3RJbmRleCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBidWxsZXRzLmVxKGkpLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW1haW5cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJGZpcnN0RGlzcGxheWVkQnVsbGV0XG4gICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLXByZXZcIikpXG4gICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLXByZXYtcHJldlwiKSk7XG4gICAgICAgICAgICAkbGFzdERpc3BsYXllZEJ1bGxldFxuICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1uZXh0XCIpKVxuICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1uZXh0LW5leHRcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgdmFyIGR5bmFtaWNCdWxsZXRzTGVuZ3RoID0gTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KTtcbiAgICAgICAgICB2YXIgYnVsbGV0c09mZnNldCA9ICgoKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCkgLSAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSkpIC8gMikgLSAobWlkSW5kZXggKiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplKTtcbiAgICAgICAgICB2YXIgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgICAgYnVsbGV0cy5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnLCAoYnVsbGV0c09mZnNldCArIFwicHhcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICAgJGVsLmZpbmQoKFwiLlwiICsgKHBhcmFtcy5jdXJyZW50Q2xhc3MpKSkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKSk7XG4gICAgICAgICRlbC5maW5kKChcIi5cIiArIChwYXJhbXMudG90YWxDbGFzcykpKS50ZXh0KHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgdmFyIHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzY2FsZSA9IChjdXJyZW50ICsgMSkgLyB0b3RhbDtcbiAgICAgICAgdmFyIHNjYWxlWCA9IDE7XG4gICAgICAgIHZhciBzY2FsZVkgPSAxO1xuICAgICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIHNjYWxlWCA9IHNjYWxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgICB9XG4gICAgICAgICRlbC5maW5kKChcIi5cIiArIChwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKSkudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoXCIgKyBzY2FsZVggKyBcIikgc2NhbGVZKFwiICsgc2NhbGVZICsgXCIpXCIpKS50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnY3VzdG9tJyAmJiBwYXJhbXMucmVuZGVyQ3VzdG9tKSB7XG4gICAgICAgICRlbC5odG1sKHBhcmFtcy5yZW5kZXJDdXN0b20oc3dpcGVyLCBjdXJyZW50ICsgMSwgdG90YWwpKTtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzd2lwZXIsICRlbFswXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsIHN3aXBlciwgJGVsWzBdKTtcbiAgICAgIH1cbiAgICAgICRlbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAvLyBSZW5kZXIgQ29udGFpbmVyXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgdmFyIHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuXG4gICAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgICAgdmFyIHBhZ2luYXRpb25IVE1MID0gJyc7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgICB2YXIgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBwYXJhbXMucmVuZGVyQnVsbGV0LmNhbGwoc3dpcGVyLCBpLCBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBcIjxcIiArIChwYXJhbXMuYnVsbGV0RWxlbWVudCkgKyBcIiBjbGFzcz1cXFwiXCIgKyAocGFyYW1zLmJ1bGxldENsYXNzKSArIFwiXFxcIj48L1wiICsgKHBhcmFtcy5idWxsZXRFbGVtZW50KSArIFwiPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgPSAkZWwuZmluZCgoXCIuXCIgKyAocGFyYW1zLmJ1bGxldENsYXNzKSkpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJGcmFjdGlvbi5jYWxsKHN3aXBlciwgcGFyYW1zLmN1cnJlbnRDbGFzcywgcGFyYW1zLnRvdGFsQ2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MID0gXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyAocGFyYW1zLmN1cnJlbnRDbGFzcykgKyBcIlxcXCI+PC9zcGFuPlwiXG4gICAgICAgICAgKyAnIC8gJ1xuICAgICAgICAgICsgXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyAocGFyYW1zLnRvdGFsQ2xhc3MpICsgXCJcXFwiPjwvc3Bhbj5cIjtcbiAgICAgICAgfVxuICAgICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhcikge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MID0gXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyAocGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKSArIFwiXFxcIj48L3NwYW4+XCI7XG4gICAgICAgIH1cbiAgICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN3aXBlci5wYWdpbmF0aW9uLiRlbFswXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKCFwYXJhbXMuZWwpIHsgcmV0dXJuOyB9XG5cbiAgICAgIHZhciAkZWwgPSAkKHBhcmFtcy5lbCk7XG4gICAgICBpZiAoJGVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cblxuICAgICAgaWYgKFxuICAgICAgICBzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzXG4gICAgICAgICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnXG4gICAgICAgICYmICRlbC5sZW5ndGggPiAxXG4gICAgICAgICYmIHN3aXBlci4kZWwuZmluZChwYXJhbXMuZWwpLmxlbmd0aCA9PT0gMVxuICAgICAgKSB7XG4gICAgICAgICRlbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMuZWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMuY2xpY2thYmxlQ2xhc3MpO1xuICAgICAgfVxuXG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG5cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAkZWwuYWRkQ2xhc3MoKFwiXCIgKyAocGFyYW1zLm1vZGlmaWVyQ2xhc3MpICsgKHBhcmFtcy50eXBlKSArIFwiLWR5bmFtaWNcIikpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA8IDEpIHtcbiAgICAgICAgICBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInICYmIHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgJGVsLm9uKCdjbGljaycsIChcIi5cIiArIChwYXJhbXMuYnVsbGV0Q2xhc3MpKSwgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHZhciBpbmRleCA9ICQodGhpcykuaW5kZXgoKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgeyBpbmRleCArPSBzd2lwZXIubG9vcGVkU2xpZGVzOyB9XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICAgICRlbDogJGVsLFxuICAgICAgICBlbDogJGVsWzBdLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG5cbiAgICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHsgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5yZW1vdmVDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpOyB9XG4gICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAkZWwub2ZmKCdjbGljaycsIChcIi5cIiArIChwYXJhbXMuYnVsbGV0Q2xhc3MpKSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICB2YXIgUGFnaW5hdGlvbiQxID0ge1xuICAgIG5hbWU6ICdwYWdpbmF0aW9uJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgZWw6IG51bGwsXG4gICAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgICByZW5kZXJGcmFjdGlvbjogbnVsbCxcbiAgICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgICAgdHlwZTogJ2J1bGxldHMnLCAvLyAnYnVsbGV0cycgb3IgJ3Byb2dyZXNzYmFyJyBvciAnZnJhY3Rpb24nIG9yICdjdXN0b20nXG4gICAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgICAgZHluYW1pY01haW5CdWxsZXRzOiAxLFxuICAgICAgICBmb3JtYXRGcmFjdGlvbkN1cnJlbnQ6IGZ1bmN0aW9uIChudW1iZXIpIHsgcmV0dXJuIG51bWJlcjsgfSxcbiAgICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogZnVuY3Rpb24gKG51bWJlcikgeyByZXR1cm4gbnVtYmVyOyB9LFxuICAgICAgICBidWxsZXRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldCcsXG4gICAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0LWFjdGl2ZScsXG4gICAgICAgIG1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi0nLCAvLyBORVdcbiAgICAgICAgY3VycmVudENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tY3VycmVudCcsXG4gICAgICAgIHRvdGFsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi10b3RhbCcsXG4gICAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24taGlkZGVuJyxcbiAgICAgICAgcHJvZ3Jlc3NiYXJGaWxsQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1maWxsJyxcbiAgICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItb3Bwb3NpdGUnLFxuICAgICAgICBjbGlja2FibGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZScsIC8vIE5FV1xuICAgICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1sb2NrJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgaW5pdDogUGFnaW5hdGlvbi5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICByZW5kZXI6IFBhZ2luYXRpb24ucmVuZGVyLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICB1cGRhdGU6IFBhZ2luYXRpb24udXBkYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBkZXN0cm95OiBQYWdpbmF0aW9uLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleDogMCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5pbml0KCk7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICBhY3RpdmVJbmRleENoYW5nZTogZnVuY3Rpb24gYWN0aXZlSW5kZXhDaGFuZ2UoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzbmFwSW5kZXhDaGFuZ2U6IGZ1bmN0aW9uIHNuYXBJbmRleENoYW5nZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzbGlkZXNMZW5ndGhDaGFuZ2U6IGZ1bmN0aW9uIHNsaWRlc0xlbmd0aENoYW5nZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlOiBmdW5jdGlvbiBzbmFwR3JpZExlbmd0aENoYW5nZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZGVzdHJveSgpO1xuICAgICAgfSxcbiAgICAgIGNsaWNrOiBmdW5jdGlvbiBjbGljayhlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsXG4gICAgICAgICAgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGVPbkNsaWNrXG4gICAgICAgICAgJiYgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA+IDBcbiAgICAgICAgICAmJiAhJChlLnRhcmdldCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKVxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgaXNIaWRkZW4gPSBzd2lwZXIucGFnaW5hdGlvbi4kZWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uU2hvdycsIHN3aXBlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uSGlkZScsIHN3aXBlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIFNjcm9sbGJhciA9IHtcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgeyByZXR1cm47IH1cbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgICB2YXIgZHJhZ1NpemUgPSBzY3JvbGxiYXIuZHJhZ1NpemU7XG4gICAgICB2YXIgdHJhY2tTaXplID0gc2Nyb2xsYmFyLnRyYWNrU2l6ZTtcbiAgICAgIHZhciAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWw7XG4gICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcblxuICAgICAgdmFyIG5ld1NpemUgPSBkcmFnU2l6ZTtcbiAgICAgIHZhciBuZXdQb3MgPSAodHJhY2tTaXplIC0gZHJhZ1NpemUpICogcHJvZ3Jlc3M7XG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG4gICAgICAgIGlmIChuZXdQb3MgPiAwKSB7XG4gICAgICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplIC0gbmV3UG9zO1xuICAgICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoLW5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgICAgbmV3U2l6ZSA9IHRyYWNrU2l6ZSArIG5ld1BvcztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdQb3MgPCAwKSB7XG4gICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSArIG5ld1BvcztcbiAgICAgICAgbmV3UG9zID0gMDtcbiAgICAgIH0gZWxzZSBpZiAobmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgICAgbmV3U2l6ZSA9IHRyYWNrU2l6ZSAtIG5ld1BvcztcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgaWYgKFN1cHBvcnQudHJhbnNmb3JtczNkKSB7XG4gICAgICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyBuZXdQb3MgKyBcInB4LCAwLCAwKVwiKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlWChcIiArIG5ld1BvcyArIFwicHgpXCIpKTtcbiAgICAgICAgfVxuICAgICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gbmV3U2l6ZSArIFwicHhcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChTdXBwb3J0LnRyYW5zZm9ybXMzZCkge1xuICAgICAgICAgICRkcmFnRWwudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyBuZXdQb3MgKyBcInB4LCAwKVwiKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlWShcIiArIG5ld1BvcyArIFwicHgpXCIpKTtcbiAgICAgICAgfVxuICAgICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9IG5ld1NpemUgKyBcInB4XCI7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIudGltZW91dCk7XG4gICAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7XG4gICAgICAgIH0sIDEwMDApO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSB7IHJldHVybjsgfVxuICAgICAgc3dpcGVyLnNjcm9sbGJhci4kZHJhZ0VsLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gICAgdXBkYXRlU2l6ZTogZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgeyByZXR1cm47IH1cblxuICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgICB2YXIgJGRyYWdFbCA9IHNjcm9sbGJhci4kZHJhZ0VsO1xuICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG5cbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSAnJztcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICB2YXIgdHJhY2tTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJGVsWzBdLm9mZnNldFdpZHRoIDogJGVsWzBdLm9mZnNldEhlaWdodDtcblxuICAgICAgdmFyIGRpdmlkZXIgPSBzd2lwZXIuc2l6ZSAvIHN3aXBlci52aXJ0dWFsU2l6ZTtcbiAgICAgIHZhciBtb3ZlRGl2aWRlciA9IGRpdmlkZXIgKiAodHJhY2tTaXplIC8gc3dpcGVyLnNpemUpO1xuICAgICAgdmFyIGRyYWdTaXplO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplID09PSAnYXV0bycpIHtcbiAgICAgICAgZHJhZ1NpemUgPSB0cmFja1NpemUgKiBkaXZpZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhZ1NpemUgPSBwYXJzZUludChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSwgMTApO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBkcmFnU2l6ZSArIFwicHhcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gZHJhZ1NpemUgKyBcInB4XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXZpZGVyID49IDEpIHtcbiAgICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmhpZGUpIHtcbiAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgfVxuICAgICAgVXRpbHMuZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgICB0cmFja1NpemU6IHRyYWNrU2l6ZSxcbiAgICAgICAgZGl2aWRlcjogZGl2aWRlcixcbiAgICAgICAgbW92ZURpdmlkZXI6IG1vdmVEaXZpZGVyLFxuICAgICAgICBkcmFnU2l6ZTogZHJhZ1NpemUsXG4gICAgICB9KTtcbiAgICAgIHNjcm9sbGJhci4kZWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpO1xuICAgIH0sXG4gICAgZ2V0UG9pbnRlclBvc2l0aW9uOiBmdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHJldHVybiAoKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScpID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCB8fCBlLmNsaWVudFgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICgoZS50eXBlID09PSAndG91Y2hzdGFydCcgfHwgZS50eXBlID09PSAndG91Y2htb3ZlJykgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZIHx8IGUuY2xpZW50WSk7XG4gICAgfSxcbiAgICBzZXREcmFnUG9zaXRpb246IGZ1bmN0aW9uIHNldERyYWdQb3NpdGlvbihlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgIHZhciBkcmFnU2l6ZSA9IHNjcm9sbGJhci5kcmFnU2l6ZTtcbiAgICAgIHZhciB0cmFja1NpemUgPSBzY3JvbGxiYXIudHJhY2tTaXplO1xuICAgICAgdmFyIGRyYWdTdGFydFBvcyA9IHNjcm9sbGJhci5kcmFnU3RhcnRQb3M7XG5cbiAgICAgIHZhciBwb3NpdGlvblJhdGlvO1xuICAgICAgcG9zaXRpb25SYXRpbyA9ICgoc2Nyb2xsYmFyLmdldFBvaW50ZXJQb3NpdGlvbihlKSkgLSAkZWwub2Zmc2V0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddXG4gICAgICAgIC0gKGRyYWdTdGFydFBvcyAhPT0gbnVsbCA/IGRyYWdTdGFydFBvcyA6IGRyYWdTaXplIC8gMikpIC8gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKTtcbiAgICAgIHBvc2l0aW9uUmF0aW8gPSBNYXRoLm1heChNYXRoLm1pbihwb3NpdGlvblJhdGlvLCAxKSwgMCk7XG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHBvc2l0aW9uUmF0aW8gPSAxIC0gcG9zaXRpb25SYXRpbztcbiAgICAgIH1cblxuICAgICAgdmFyIHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogcG9zaXRpb25SYXRpbyk7XG5cbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9LFxuICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiBvbkRyYWdTdGFydChlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgICAgdmFyICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbDtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuZHJhZ1N0YXJ0UG9zID0gKGUudGFyZ2V0ID09PSAkZHJhZ0VsWzBdIHx8IGUudGFyZ2V0ID09PSAkZHJhZ0VsKVxuICAgICAgICA/IHNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24oZSkgLSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ10gOiBudWxsO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKDEwMCk7XG4gICAgICAkZHJhZ0VsLnRyYW5zaXRpb24oMTAwKTtcbiAgICAgIHNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24oZSk7XG5cbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0KTtcblxuICAgICAgJGVsLnRyYW5zaXRpb24oMCk7XG4gICAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICAgJGVsLmNzcygnb3BhY2l0eScsIDEpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdTdGFydCcsIGUpO1xuICAgIH0sXG4gICAgb25EcmFnTW92ZTogZnVuY3Rpb24gb25EcmFnTW92ZShlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgICAgdmFyICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbDtcblxuICAgICAgaWYgKCFzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCkgeyByZXR1cm47IH1cbiAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgICAgZWxzZSB7IGUucmV0dXJuVmFsdWUgPSBmYWxzZTsgfVxuICAgICAgc2Nyb2xsYmFyLnNldERyYWdQb3NpdGlvbihlKTtcbiAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigwKTtcbiAgICAgICRlbC50cmFuc2l0aW9uKDApO1xuICAgICAgJGRyYWdFbC50cmFuc2l0aW9uKDApO1xuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdNb3ZlJywgZSk7XG4gICAgfSxcbiAgICBvbkRyYWdFbmQ6IGZ1bmN0aW9uIG9uRHJhZ0VuZChlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcblxuICAgICAgaWYgKCFzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCkgeyByZXR1cm47IH1cbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5zY3JvbGxiYXIuZHJhZ1RpbWVvdXQpO1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0ID0gVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAwKTtcbiAgICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnRW5kJywgZSk7XG4gICAgICBpZiAocGFyYW1zLnNuYXBPblJlbGVhc2UpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBlbmFibGVEcmFnZ2FibGU6IGZ1bmN0aW9uIGVuYWJsZURyYWdnYWJsZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCkgeyByZXR1cm47IH1cbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgdmFyIHRvdWNoRXZlbnRzVG91Y2ggPSBzd2lwZXIudG91Y2hFdmVudHNUb3VjaDtcbiAgICAgIHZhciB0b3VjaEV2ZW50c0Rlc2t0b3AgPSBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgIHZhciB0YXJnZXQgPSAkZWxbMF07XG4gICAgICB2YXIgYWN0aXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgICAgaWYgKCFTdXBwb3J0LnRvdWNoKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBkaXNhYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiBkaXNhYmxlRHJhZ2dhYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSB7IHJldHVybjsgfVxuICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgICB2YXIgdG91Y2hFdmVudHNUb3VjaCA9IHN3aXBlci50b3VjaEV2ZW50c1RvdWNoO1xuICAgICAgdmFyIHRvdWNoRXZlbnRzRGVza3RvcCA9IHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3A7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgICAgdmFyIHRhcmdldCA9ICRlbFswXTtcbiAgICAgIHZhciBhY3RpdmVMaXN0ZW5lciA9IFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiBmYWxzZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgICAgdmFyIHBhc3NpdmVMaXN0ZW5lciA9IFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICBpZiAoIVN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2gubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgIHZhciAkc3dpcGVyRWwgPSBzd2lwZXIuJGVsO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuXG4gICAgICB2YXIgJGVsID0gJChwYXJhbXMuZWwpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgJGVsLmxlbmd0aCA+IDEgJiYgJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgJGVsID0gJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICAgIH1cblxuICAgICAgdmFyICRkcmFnRWwgPSAkZWwuZmluZCgoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzKSkpO1xuICAgICAgaWYgKCRkcmFnRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICRkcmFnRWwgPSAkKChcIjxkaXYgY2xhc3M9XFxcIlwiICsgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcykgKyBcIlxcXCI+PC9kaXY+XCIpKTtcbiAgICAgICAgJGVsLmFwcGVuZCgkZHJhZ0VsKTtcbiAgICAgIH1cblxuICAgICAgVXRpbHMuZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgICAkZWw6ICRlbCxcbiAgICAgICAgZWw6ICRlbFswXSxcbiAgICAgICAgJGRyYWdFbDogJGRyYWdFbCxcbiAgICAgICAgZHJhZ0VsOiAkZHJhZ0VsWzBdLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwYXJhbXMuZHJhZ2dhYmxlKSB7XG4gICAgICAgIHNjcm9sbGJhci5lbmFibGVEcmFnZ2FibGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZSgpO1xuICAgIH0sXG4gIH07XG5cbiAgdmFyIFNjcm9sbGJhciQxID0ge1xuICAgIG5hbWU6ICdzY3JvbGxiYXInLFxuICAgIHBhcmFtczoge1xuICAgICAgc2Nyb2xsYmFyOiB7XG4gICAgICAgIGVsOiBudWxsLFxuICAgICAgICBkcmFnU2l6ZTogJ2F1dG8nLFxuICAgICAgICBoaWRlOiBmYWxzZSxcbiAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcbiAgICAgICAgc25hcE9uUmVsZWFzZTogdHJ1ZSxcbiAgICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1sb2NrJyxcbiAgICAgICAgZHJhZ0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1kcmFnJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBzY3JvbGxiYXI6IHtcbiAgICAgICAgICBpbml0OiBTY3JvbGxiYXIuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgZGVzdHJveTogU2Nyb2xsYmFyLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICAgIHVwZGF0ZVNpemU6IFNjcm9sbGJhci51cGRhdGVTaXplLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRUcmFuc2xhdGU6IFNjcm9sbGJhci5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIHNldFRyYW5zaXRpb246IFNjcm9sbGJhci5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBlbmFibGVEcmFnZ2FibGU6IFNjcm9sbGJhci5lbmFibGVEcmFnZ2FibGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGRpc2FibGVEcmFnZ2FibGU6IFNjcm9sbGJhci5kaXNhYmxlRHJhZ2dhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXREcmFnUG9zaXRpb246IFNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICAgIGdldFBvaW50ZXJQb3NpdGlvbjogU2Nyb2xsYmFyLmdldFBvaW50ZXJQb3NpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgICAgb25EcmFnU3RhcnQ6IFNjcm9sbGJhci5vbkRyYWdTdGFydC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgb25EcmFnTW92ZTogU2Nyb2xsYmFyLm9uRHJhZ01vdmUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIG9uRHJhZ0VuZDogU2Nyb2xsYmFyLm9uRHJhZ0VuZC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgaXNUb3VjaGVkOiBmYWxzZSxcbiAgICAgICAgICB0aW1lb3V0OiBudWxsLFxuICAgICAgICAgIGRyYWdUaW1lb3V0OiBudWxsLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIuaW5pdCgpO1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgICAgfSxcbiAgICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgICB9LFxuICAgICAgb2JzZXJ2ZXJVcGRhdGU6IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIuZGVzdHJveSgpO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBQYXJhbGxheCA9IHtcbiAgICBzZXRUcmFuc2Zvcm06IGZ1bmN0aW9uIHNldFRyYW5zZm9ybShlbCwgcHJvZ3Jlc3MpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG5cbiAgICAgIHZhciAkZWwgPSAkKGVsKTtcbiAgICAgIHZhciBydGxGYWN0b3IgPSBydGwgPyAtMSA6IDE7XG5cbiAgICAgIHZhciBwID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4JykgfHwgJzAnO1xuICAgICAgdmFyIHggPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteCcpO1xuICAgICAgdmFyIHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteScpO1xuICAgICAgdmFyIHNjYWxlID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlJyk7XG4gICAgICB2YXIgb3BhY2l0eSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7XG5cbiAgICAgIGlmICh4IHx8IHkpIHtcbiAgICAgICAgeCA9IHggfHwgJzAnO1xuICAgICAgICB5ID0geSB8fCAnMCc7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB4ID0gcDtcbiAgICAgICAgeSA9ICcwJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkgPSBwO1xuICAgICAgICB4ID0gJzAnO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHgpLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICAgIHggPSAocGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IpICsgXCIlXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4ID0gKHggKiBwcm9ncmVzcyAqIHJ0bEZhY3RvcikgKyBcInB4XCI7XG4gICAgICB9XG4gICAgICBpZiAoKHkpLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICAgIHkgPSAocGFyc2VJbnQoeSwgMTApICogcHJvZ3Jlc3MpICsgXCIlXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5ID0gKHkgKiBwcm9ncmVzcykgKyBcInB4XCI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKChvcGFjaXR5IC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSkpO1xuICAgICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBzY2FsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2NhbGUgPT09IG51bGwpIHtcbiAgICAgICAgJGVsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIDBweClcIikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTY2FsZSA9IHNjYWxlIC0gKChzY2FsZSAtIDEpICogKDEgLSBNYXRoLmFicyhwcm9ncmVzcykpKTtcbiAgICAgICAgJGVsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcIiwgXCIgKyB5ICsgXCIsIDBweCkgc2NhbGUoXCIgKyBjdXJyZW50U2NhbGUgKyBcIilcIikpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsO1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICB2YXIgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgICB2YXIgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7XG4gICAgICAkZWwuY2hpbGRyZW4oJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKVxuICAgICAgICAuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsKSB7XG4gICAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zZm9ybShlbCwgcHJvZ3Jlc3MpO1xuICAgICAgICB9KTtcbiAgICAgIHNsaWRlcy5lYWNoKGZ1bmN0aW9uIChzbGlkZUluZGV4LCBzbGlkZUVsKSB7XG4gICAgICAgIHZhciBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gKHByb2dyZXNzICogKHNuYXBHcmlkLmxlbmd0aCAtIDEpKTtcbiAgICAgICAgfVxuICAgICAgICBzbGlkZVByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVQcm9ncmVzcywgLTEpLCAxKTtcbiAgICAgICAgJChzbGlkZUVsKS5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJylcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNmb3JtKGVsLCBzbGlkZVByb2dyZXNzKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgaWYgKCBkdXJhdGlvbiA9PT0gdm9pZCAwICkgZHVyYXRpb24gPSB0aGlzLnBhcmFtcy5zcGVlZDtcblxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICAgICRlbC5maW5kKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJylcbiAgICAgICAgLmVhY2goZnVuY3Rpb24gKGluZGV4LCBwYXJhbGxheEVsKSB7XG4gICAgICAgICAgdmFyICRwYXJhbGxheEVsID0gJChwYXJhbGxheEVsKTtcbiAgICAgICAgICB2YXIgcGFyYWxsYXhEdXJhdGlvbiA9IHBhcnNlSW50KCRwYXJhbGxheEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LWR1cmF0aW9uJyksIDEwKSB8fCBkdXJhdGlvbjtcbiAgICAgICAgICBpZiAoZHVyYXRpb24gPT09IDApIHsgcGFyYWxsYXhEdXJhdGlvbiA9IDA7IH1cbiAgICAgICAgICAkcGFyYWxsYXhFbC50cmFuc2l0aW9uKHBhcmFsbGF4RHVyYXRpb24pO1xuICAgICAgICB9KTtcbiAgICB9LFxuICB9O1xuXG4gIHZhciBQYXJhbGxheCQxID0ge1xuICAgIG5hbWU6ICdwYXJhbGxheCcsXG4gICAgcGFyYW1zOiB7XG4gICAgICBwYXJhbGxheDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBwYXJhbGxheDoge1xuICAgICAgICAgIHNldFRyYW5zZm9ybTogUGFyYWxsYXguc2V0VHJhbnNmb3JtLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRUcmFuc2xhdGU6IFBhcmFsbGF4LnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0VHJhbnNpdGlvbjogUGFyYWxsYXguc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2xhdGUoKTtcbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgWm9vbSA9IHtcbiAgICAvLyBDYWxjIFNjYWxlIEZyb20gTXVsdGktdG91Y2hlc1xuICAgIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXM6IGZ1bmN0aW9uIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSB7IHJldHVybiAxOyB9XG4gICAgICB2YXIgeDEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgICB2YXIgeTEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICB2YXIgeDIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVg7XG4gICAgICB2YXIgeTIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVk7XG4gICAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKE1hdGgucG93KCAoeDIgLSB4MSksIDIgKSkgKyAoTWF0aC5wb3coICh5MiAtIHkxKSwgMiApKSk7XG4gICAgICByZXR1cm4gZGlzdGFuY2U7XG4gICAgfSxcbiAgICAvLyBFdmVudHNcbiAgICBvbkdlc3R1cmVTdGFydDogZnVuY3Rpb24gb25HZXN0dXJlU3RhcnQoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IGZhbHNlO1xuICAgICAgaWYgKCFTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaHN0YXJ0JyB8fCAoZS50eXBlID09PSAndG91Y2hzdGFydCcgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gdHJ1ZTtcbiAgICAgICAgZ2VzdHVyZS5zY2FsZVN0YXJ0ID0gWm9vbS5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgICAgfVxuICAgICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsIHx8ICFnZXN0dXJlLiRzbGlkZUVsLmxlbmd0aCkge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gJChlLnRhcmdldCkuY2xvc2VzdCgnLnN3aXBlci1zbGlkZScpO1xuICAgICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGggPT09IDApIHsgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTsgfVxuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzJyk7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoKFwiLlwiICsgKHBhcmFtcy5jb250YWluZXJDbGFzcykpKTtcbiAgICAgICAgZ2VzdHVyZS5tYXhSYXRpbyA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgICAgIGlmIChnZXN0dXJlLiRpbWFnZVdyYXBFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDApO1xuICAgICAgc3dpcGVyLnpvb20uaXNTY2FsaW5nID0gdHJ1ZTtcbiAgICB9LFxuICAgIG9uR2VzdHVyZUNoYW5nZTogZnVuY3Rpb24gb25HZXN0dXJlQ2hhbmdlKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICAgIGlmICghU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICBpZiAoZS50eXBlICE9PSAndG91Y2htb3ZlJyB8fCAoZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gdHJ1ZTtcbiAgICAgICAgZ2VzdHVyZS5zY2FsZU1vdmUgPSBab29tLmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSk7XG4gICAgICB9XG4gICAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICBpZiAoU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICB6b29tLnNjYWxlID0gZS5zY2FsZSAqIHpvb20uY3VycmVudFNjYWxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgem9vbS5zY2FsZSA9IChnZXN0dXJlLnNjYWxlTW92ZSAvIGdlc3R1cmUuc2NhbGVTdGFydCkgKiB6b29tLmN1cnJlbnRTY2FsZTtcbiAgICAgIH1cbiAgICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgICB6b29tLnNjYWxlID0gKGdlc3R1cmUubWF4UmF0aW8gLSAxKSArIChNYXRoLnBvdyggKCh6b29tLnNjYWxlIC0gZ2VzdHVyZS5tYXhSYXRpbykgKyAxKSwgMC41ICkpO1xuICAgICAgfVxuICAgICAgaWYgKHpvb20uc2NhbGUgPCBwYXJhbXMubWluUmF0aW8pIHtcbiAgICAgICAgem9vbS5zY2FsZSA9IChwYXJhbXMubWluUmF0aW8gKyAxKSAtIChNYXRoLnBvdyggKChwYXJhbXMubWluUmF0aW8gLSB6b29tLnNjYWxlKSArIDEpLCAwLjUgKSk7XG4gICAgICB9XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyAoem9vbS5zY2FsZSkgKyBcIilcIikpO1xuICAgIH0sXG4gICAgb25HZXN0dXJlRW5kOiBmdW5jdGlvbiBvbkdlc3R1cmVFbmQoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgaWYgKCFTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgIGlmICghem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgfHwgIXpvb20uZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hlbmQnIHx8IChlLnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCAyICYmICFEZXZpY2UuYW5kcm9pZCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgem9vbS5mYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICB6b29tLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oem9vbS5zY2FsZSwgZ2VzdHVyZS5tYXhSYXRpbyksIHBhcmFtcy5taW5SYXRpbyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCkudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZShcIiArICh6b29tLnNjYWxlKSArIFwiKVwiKSk7XG4gICAgICB6b29tLmN1cnJlbnRTY2FsZSA9IHpvb20uc2NhbGU7XG4gICAgICB6b29tLmlzU2NhbGluZyA9IGZhbHNlO1xuICAgICAgaWYgKHpvb20uc2NhbGUgPT09IDEpIHsgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDsgfVxuICAgIH0sXG4gICAgb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG4gICAgICB2YXIgaW1hZ2UgPSB6b29tLmltYWdlO1xuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgaWYgKGltYWdlLmlzVG91Y2hlZCkgeyByZXR1cm47IH1cbiAgICAgIGlmIChEZXZpY2UuYW5kcm9pZCkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgIGltYWdlLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgICBpbWFnZS50b3VjaGVzU3RhcnQueCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIGltYWdlLnRvdWNoZXNTdGFydC55ID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIH0sXG4gICAgb25Ub3VjaE1vdmU6IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgdmFyIGltYWdlID0gem9vbS5pbWFnZTtcbiAgICAgIHZhciB2ZWxvY2l0eSA9IHpvb20udmVsb2NpdHk7XG4gICAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWdlc3R1cmUuJHNsaWRlRWwpIHsgcmV0dXJuOyB9XG5cbiAgICAgIGlmICghaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgICBpbWFnZS53aWR0aCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICAgIGltYWdlLmhlaWdodCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBpbWFnZS5zdGFydFggPSBVdGlscy5nZXRUcmFuc2xhdGUoZ2VzdHVyZS4kaW1hZ2VXcmFwRWxbMF0sICd4JykgfHwgMDtcbiAgICAgICAgaW1hZ2Uuc3RhcnRZID0gVXRpbHMuZ2V0VHJhbnNsYXRlKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneScpIHx8IDA7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVXaWR0aCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigwKTtcbiAgICAgICAgaWYgKHN3aXBlci5ydGwpIHtcbiAgICAgICAgICBpbWFnZS5zdGFydFggPSAtaW1hZ2Uuc3RhcnRYO1xuICAgICAgICAgIGltYWdlLnN0YXJ0WSA9IC1pbWFnZS5zdGFydFk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcbiAgICAgIHZhciBzY2FsZWRXaWR0aCA9IGltYWdlLndpZHRoICogem9vbS5zY2FsZTtcbiAgICAgIHZhciBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiB6b29tLnNjYWxlO1xuXG4gICAgICBpZiAoc2NhbGVkV2lkdGggPCBnZXN0dXJlLnNsaWRlV2lkdGggJiYgc2NhbGVkSGVpZ2h0IDwgZ2VzdHVyZS5zbGlkZUhlaWdodCkgeyByZXR1cm47IH1cblxuICAgICAgaW1hZ2UubWluWCA9IE1hdGgubWluKCgoZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMikgLSAoc2NhbGVkV2lkdGggLyAyKSksIDApO1xuICAgICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgICAgaW1hZ2UubWluWSA9IE1hdGgubWluKCgoZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIpIC0gKHNjYWxlZEhlaWdodCAvIDIpKSwgMCk7XG4gICAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG5cbiAgICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcblxuICAgICAgaWYgKCFpbWFnZS5pc01vdmVkICYmICF6b29tLmlzU2NhbGluZykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc3dpcGVyLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICAgJiYgKFxuICAgICAgICAgICAgKE1hdGguZmxvb3IoaW1hZ2UubWluWCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LngpXG4gICAgICAgICAgICB8fCAoTWF0aC5mbG9vcihpbWFnZS5tYXhYKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPiBpbWFnZS50b3VjaGVzU3RhcnQueClcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBpZiAoXG4gICAgICAgICAgIXN3aXBlci5pc0hvcml6b250YWwoKVxuICAgICAgICAgICYmIChcbiAgICAgICAgICAgIChNYXRoLmZsb29yKGltYWdlLm1pblkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA8IGltYWdlLnRvdWNoZXNTdGFydC55KVxuICAgICAgICAgICAgfHwgKE1hdGguZmxvb3IoaW1hZ2UubWF4WSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGltYWdlLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgaW1hZ2UuY3VycmVudFggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIGltYWdlLnRvdWNoZXNTdGFydC54KSArIGltYWdlLnN0YXJ0WDtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSBpbWFnZS50b3VjaGVzU3RhcnQueSkgKyBpbWFnZS5zdGFydFk7XG5cbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WCA8IGltYWdlLm1pblgpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFggPSAoaW1hZ2UubWluWCArIDEpIC0gKE1hdGgucG93KCAoKGltYWdlLm1pblggLSBpbWFnZS5jdXJyZW50WCkgKyAxKSwgMC44ICkpO1xuICAgICAgfVxuICAgICAgaWYgKGltYWdlLmN1cnJlbnRYID4gaW1hZ2UubWF4WCkge1xuICAgICAgICBpbWFnZS5jdXJyZW50WCA9IChpbWFnZS5tYXhYIC0gMSkgKyAoTWF0aC5wb3coICgoaW1hZ2UuY3VycmVudFggLSBpbWFnZS5tYXhYKSArIDEpLCAwLjggKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WSA8IGltYWdlLm1pblkpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFkgPSAoaW1hZ2UubWluWSArIDEpIC0gKE1hdGgucG93KCAoKGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSkgKyAxKSwgMC44ICkpO1xuICAgICAgfVxuICAgICAgaWYgKGltYWdlLmN1cnJlbnRZID4gaW1hZ2UubWF4WSkge1xuICAgICAgICBpbWFnZS5jdXJyZW50WSA9IChpbWFnZS5tYXhZIC0gMSkgKyAoTWF0aC5wb3coICgoaW1hZ2UuY3VycmVudFkgLSBpbWFnZS5tYXhZKSArIDEpLCAwLjggKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZlbG9jaXR5XG4gICAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblgpIHsgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7IH1cbiAgICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgeyB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueTsgfVxuICAgICAgaWYgKCF2ZWxvY2l0eS5wcmV2VGltZSkgeyB2ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCk7IH1cbiAgICAgIHZlbG9jaXR5LnggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgICAgdmVsb2NpdHkueSA9IChpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgLyAoRGF0ZS5ub3coKSAtIHZlbG9jaXR5LnByZXZUaW1lKSAvIDI7XG4gICAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIDwgMikgeyB2ZWxvY2l0eS54ID0gMDsgfVxuICAgICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSA8IDIpIHsgdmVsb2NpdHkueSA9IDA7IH1cbiAgICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgICB2ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZChcIiArIChpbWFnZS5jdXJyZW50WCkgKyBcInB4LCBcIiArIChpbWFnZS5jdXJyZW50WSkgKyBcInB4LDApXCIpKTtcbiAgICB9LFxuICAgIG9uVG91Y2hFbmQ6IGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICAgIHZhciBpbWFnZSA9IHpvb20uaW1hZ2U7XG4gICAgICB2YXIgdmVsb2NpdHkgPSB6b29tLnZlbG9jaXR5O1xuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgICB2YXIgbW9tZW50dW1EdXJhdGlvblggPSAzMDA7XG4gICAgICB2YXIgbW9tZW50dW1EdXJhdGlvblkgPSAzMDA7XG4gICAgICB2YXIgbW9tZW50dW1EaXN0YW5jZVggPSB2ZWxvY2l0eS54ICogbW9tZW50dW1EdXJhdGlvblg7XG4gICAgICB2YXIgbmV3UG9zaXRpb25YID0gaW1hZ2UuY3VycmVudFggKyBtb21lbnR1bURpc3RhbmNlWDtcbiAgICAgIHZhciBtb21lbnR1bURpc3RhbmNlWSA9IHZlbG9jaXR5LnkgKiBtb21lbnR1bUR1cmF0aW9uWTtcbiAgICAgIHZhciBuZXdQb3NpdGlvblkgPSBpbWFnZS5jdXJyZW50WSArIG1vbWVudHVtRGlzdGFuY2VZO1xuXG4gICAgICAvLyBGaXggZHVyYXRpb25cbiAgICAgIGlmICh2ZWxvY2l0eS54ICE9PSAwKSB7IG1vbWVudHVtRHVyYXRpb25YID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWCAtIGltYWdlLmN1cnJlbnRYKSAvIHZlbG9jaXR5LngpOyB9XG4gICAgICBpZiAodmVsb2NpdHkueSAhPT0gMCkgeyBtb21lbnR1bUR1cmF0aW9uWSA9IE1hdGguYWJzKChuZXdQb3NpdGlvblkgLSBpbWFnZS5jdXJyZW50WSkgLyB2ZWxvY2l0eS55KTsgfVxuICAgICAgdmFyIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuXG4gICAgICBpbWFnZS5jdXJyZW50WCA9IG5ld1Bvc2l0aW9uWDtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZO1xuXG4gICAgICAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG4gICAgICB2YXIgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgICB2YXIgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcbiAgICAgIGltYWdlLm1pblggPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIpIC0gKHNjYWxlZFdpZHRoIC8gMikpLCAwKTtcbiAgICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyKSAtIChzY2FsZWRIZWlnaHQgLyAyKSksIDApO1xuICAgICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WCwgaW1hZ2UubWF4WCksIGltYWdlLm1pblgpO1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WSwgaW1hZ2UubWF4WSksIGltYWdlLm1pblkpO1xuXG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZChcIiArIChpbWFnZS5jdXJyZW50WCkgKyBcInB4LCBcIiArIChpbWFnZS5jdXJyZW50WSkgKyBcInB4LDApXCIpKTtcbiAgICB9LFxuICAgIG9uVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG4gICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbCAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCknKTtcblxuICAgICAgICB6b29tLnNjYWxlID0gMTtcbiAgICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuXG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gVG9nZ2xlIFpvb21cbiAgICB0b2dnbGU6IGZ1bmN0aW9uIHRvZ2dsZShlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG5cbiAgICAgIGlmICh6b29tLnNjYWxlICYmIHpvb20uc2NhbGUgIT09IDEpIHtcbiAgICAgICAgLy8gWm9vbSBPdXRcbiAgICAgICAgem9vbS5vdXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFpvb20gSW5cbiAgICAgICAgem9vbS5pbihlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluOiBmdW5jdGlvbiBpbiQxKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgdmFyIGltYWdlID0gem9vbS5pbWFnZTtcblxuICAgICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuY2xpY2tlZFNsaWRlID8gJChzd2lwZXIuY2xpY2tlZFNsaWRlKSA6IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcycpO1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KChcIi5cIiArIChwYXJhbXMuY29udGFpbmVyQ2xhc3MpKSk7XG4gICAgICB9XG4gICAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwuYWRkQ2xhc3MoKFwiXCIgKyAocGFyYW1zLnpvb21lZFNsaWRlQ2xhc3MpKSk7XG5cbiAgICAgIHZhciB0b3VjaFg7XG4gICAgICB2YXIgdG91Y2hZO1xuICAgICAgdmFyIG9mZnNldFg7XG4gICAgICB2YXIgb2Zmc2V0WTtcbiAgICAgIHZhciBkaWZmWDtcbiAgICAgIHZhciBkaWZmWTtcbiAgICAgIHZhciB0cmFuc2xhdGVYO1xuICAgICAgdmFyIHRyYW5zbGF0ZVk7XG4gICAgICB2YXIgaW1hZ2VXaWR0aDtcbiAgICAgIHZhciBpbWFnZUhlaWdodDtcbiAgICAgIHZhciBzY2FsZWRXaWR0aDtcbiAgICAgIHZhciBzY2FsZWRIZWlnaHQ7XG4gICAgICB2YXIgdHJhbnNsYXRlTWluWDtcbiAgICAgIHZhciB0cmFuc2xhdGVNaW5ZO1xuICAgICAgdmFyIHRyYW5zbGF0ZU1heFg7XG4gICAgICB2YXIgdHJhbnNsYXRlTWF4WTtcbiAgICAgIHZhciBzbGlkZVdpZHRoO1xuICAgICAgdmFyIHNsaWRlSGVpZ2h0O1xuXG4gICAgICBpZiAodHlwZW9mIGltYWdlLnRvdWNoZXNTdGFydC54ID09PSAndW5kZWZpbmVkJyAmJiBlKSB7XG4gICAgICAgIHRvdWNoWCA9IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgICB0b3VjaFkgPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvdWNoWCA9IGltYWdlLnRvdWNoZXNTdGFydC54O1xuICAgICAgICB0b3VjaFkgPSBpbWFnZS50b3VjaGVzU3RhcnQueTtcbiAgICAgIH1cblxuICAgICAgem9vbS5zY2FsZSA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgICB6b29tLmN1cnJlbnRTY2FsZSA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgICBpZiAoZSkge1xuICAgICAgICBzbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgb2Zmc2V0WCA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkubGVmdDtcbiAgICAgICAgb2Zmc2V0WSA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkudG9wO1xuICAgICAgICBkaWZmWCA9IChvZmZzZXRYICsgKHNsaWRlV2lkdGggLyAyKSkgLSB0b3VjaFg7XG4gICAgICAgIGRpZmZZID0gKG9mZnNldFkgKyAoc2xpZGVIZWlnaHQgLyAyKSkgLSB0b3VjaFk7XG5cbiAgICAgICAgaW1hZ2VXaWR0aCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICAgIGltYWdlSGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHNjYWxlZFdpZHRoID0gaW1hZ2VXaWR0aCAqIHpvb20uc2NhbGU7XG4gICAgICAgIHNjYWxlZEhlaWdodCA9IGltYWdlSGVpZ2h0ICogem9vbS5zY2FsZTtcblxuICAgICAgICB0cmFuc2xhdGVNaW5YID0gTWF0aC5taW4oKChzbGlkZVdpZHRoIC8gMikgLSAoc2NhbGVkV2lkdGggLyAyKSksIDApO1xuICAgICAgICB0cmFuc2xhdGVNaW5ZID0gTWF0aC5taW4oKChzbGlkZUhlaWdodCAvIDIpIC0gKHNjYWxlZEhlaWdodCAvIDIpKSwgMCk7XG4gICAgICAgIHRyYW5zbGF0ZU1heFggPSAtdHJhbnNsYXRlTWluWDtcbiAgICAgICAgdHJhbnNsYXRlTWF4WSA9IC10cmFuc2xhdGVNaW5ZO1xuXG4gICAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSBkaWZmWSAqIHpvb20uc2NhbGU7XG5cbiAgICAgICAgaWYgKHRyYW5zbGF0ZVggPCB0cmFuc2xhdGVNaW5YKSB7XG4gICAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1pblg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zbGF0ZVggPiB0cmFuc2xhdGVNYXhYKSB7XG4gICAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1heFg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnNsYXRlWSA8IHRyYW5zbGF0ZU1pblkpIHtcbiAgICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWluWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhbnNsYXRlWSA+IHRyYW5zbGF0ZU1heFkpIHtcbiAgICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWF4WTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRlWCA9IDA7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZChcIiArIHRyYW5zbGF0ZVggKyBcInB4LCBcIiArIHRyYW5zbGF0ZVkgKyBcInB4LDApXCIpKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyAoem9vbS5zY2FsZSkgKyBcIilcIikpO1xuICAgIH0sXG4gICAgb3V0OiBmdW5jdGlvbiBvdXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcblxuICAgICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuY2xpY2tlZFNsaWRlID8gJChzd2lwZXIuY2xpY2tlZFNsaWRlKSA6IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcycpO1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KChcIi5cIiArIChwYXJhbXMuY29udGFpbmVyQ2xhc3MpKSk7XG4gICAgICB9XG4gICAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgICAgIHpvb20uc2NhbGUgPSAxO1xuICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKScpO1xuICAgICAgZ2VzdHVyZS4kc2xpZGVFbC5yZW1vdmVDbGFzcygoXCJcIiArIChwYXJhbXMuem9vbWVkU2xpZGVDbGFzcykpKTtcbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICAvLyBBdHRhY2gvRGV0YWNoIEV2ZW50c1xuICAgIGVuYWJsZTogZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgaWYgKHpvb20uZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgIHpvb20uZW5hYmxlZCA9IHRydWU7XG5cbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcblxuICAgICAgLy8gU2NhbGUgaW1hZ2VcbiAgICAgIGlmIChTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKCdnZXN0dXJlc3RhcnQnLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKCdnZXN0dXJlY2hhbmdlJywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oJ2dlc3R1cmVlbmQnLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIC8vIE1vdmUgaW1hZ2VcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCAoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzKSksIHpvb20ub25Ub3VjaE1vdmUpO1xuICAgIH0sXG4gICAgZGlzYWJsZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIGlmICghem9vbS5lbmFibGVkKSB7IHJldHVybjsgfVxuXG4gICAgICBzd2lwZXIuem9vbS5lbmFibGVkID0gZmFsc2U7XG5cbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcblxuICAgICAgLy8gU2NhbGUgaW1hZ2VcbiAgICAgIGlmIChTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZignZ2VzdHVyZXN0YXJ0JywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoJ2dlc3R1cmVjaGFuZ2UnLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoJ2dlc3R1cmVlbmQnLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIC8vIE1vdmUgaW1hZ2VcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzcykpLCB6b29tLm9uVG91Y2hNb3ZlKTtcbiAgICB9LFxuICB9O1xuXG4gIHZhciBab29tJDEgPSB7XG4gICAgbmFtZTogJ3pvb20nLFxuICAgIHBhcmFtczoge1xuICAgICAgem9vbToge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgbWF4UmF0aW86IDMsXG4gICAgICAgIG1pblJhdGlvOiAxLFxuICAgICAgICB0b2dnbGU6IHRydWUsXG4gICAgICAgIGNvbnRhaW5lckNsYXNzOiAnc3dpcGVyLXpvb20tY29udGFpbmVyJyxcbiAgICAgICAgem9vbWVkU2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZS16b29tZWQnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgem9vbSA9IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICBjdXJyZW50U2NhbGU6IDEsXG4gICAgICAgIGlzU2NhbGluZzogZmFsc2UsXG4gICAgICAgIGdlc3R1cmU6IHtcbiAgICAgICAgICAkc2xpZGVFbDogdW5kZWZpbmVkLFxuICAgICAgICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAgICRpbWFnZUVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgJGltYWdlV3JhcEVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWF4UmF0aW86IDMsXG4gICAgICAgIH0sXG4gICAgICAgIGltYWdlOiB7XG4gICAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGN1cnJlbnRYOiB1bmRlZmluZWQsXG4gICAgICAgICAgY3VycmVudFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtaW5YOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWluWTogdW5kZWZpbmVkLFxuICAgICAgICAgIG1heFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtYXhZOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzdGFydFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzdGFydFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0b3VjaGVzU3RhcnQ6IHt9LFxuICAgICAgICAgIHRvdWNoZXNDdXJyZW50OiB7fSxcbiAgICAgICAgfSxcbiAgICAgICAgdmVsb2NpdHk6IHtcbiAgICAgICAgICB4OiB1bmRlZmluZWQsXG4gICAgICAgICAgeTogdW5kZWZpbmVkLFxuICAgICAgICAgIHByZXZQb3NpdGlvblg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBwcmV2UG9zaXRpb25ZOiB1bmRlZmluZWQsXG4gICAgICAgICAgcHJldlRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgICgnb25HZXN0dXJlU3RhcnQgb25HZXN0dXJlQ2hhbmdlIG9uR2VzdHVyZUVuZCBvblRvdWNoU3RhcnQgb25Ub3VjaE1vdmUgb25Ub3VjaEVuZCBvblRyYW5zaXRpb25FbmQgdG9nZ2xlIGVuYWJsZSBkaXNhYmxlIGluIG91dCcpLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgICAgICB6b29tW21ldGhvZE5hbWVdID0gWm9vbVttZXRob2ROYW1lXS5iaW5kKHN3aXBlcik7XG4gICAgICB9KTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgem9vbTogem9vbSxcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgc2NhbGUgPSAxO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN3aXBlci56b29tLCAnc2NhbGUnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBzY2FsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgICBpZiAoc2NhbGUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaW1hZ2VFbCA9IHN3aXBlci56b29tLmdlc3R1cmUuJGltYWdlRWwgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRpbWFnZUVsWzBdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIHNsaWRlRWwgPSBzd2lwZXIuem9vbS5nZXN0dXJlLiRzbGlkZUVsID8gc3dpcGVyLnpvb20uZ2VzdHVyZS4kc2xpZGVFbFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCd6b29tQ2hhbmdlJywgdmFsdWUsIGltYWdlRWwsIHNsaWRlRWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzY2FsZSA9IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci56b29tLmVuYWJsZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci56b29tLmRpc2FibGUoKTtcbiAgICAgIH0sXG4gICAgICB0b3VjaFN0YXJ0OiBmdW5jdGlvbiB0b3VjaFN0YXJ0KGUpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLnpvb20ub25Ub3VjaFN0YXJ0KGUpO1xuICAgICAgfSxcbiAgICAgIHRvdWNoRW5kOiBmdW5jdGlvbiB0b3VjaEVuZChlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci56b29tLm9uVG91Y2hFbmQoZSk7XG4gICAgICB9LFxuICAgICAgZG91YmxlVGFwOiBmdW5jdGlvbiBkb3VibGVUYXAoZSkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLnRvZ2dsZSkge1xuICAgICAgICAgIHN3aXBlci56b29tLnRvZ2dsZShlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci56b29tLm9uVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIExhenkgPSB7XG4gICAgbG9hZEluU2xpZGU6IGZ1bmN0aW9uIGxvYWRJblNsaWRlKGluZGV4LCBsb2FkSW5EdXBsaWNhdGUpIHtcbiAgICAgIGlmICggbG9hZEluRHVwbGljYXRlID09PSB2b2lkIDAgKSBsb2FkSW5EdXBsaWNhdGUgPSB0cnVlO1xuXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmxhenk7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm47IH1cbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAgICAgdmFyICRzbGlkZUVsID0gaXNWaXJ0dWFsXG4gICAgICAgID8gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIl1cIikpXG4gICAgICAgIDogc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG5cbiAgICAgIHZhciAkaW1hZ2VzID0gJHNsaWRlRWwuZmluZCgoXCIuXCIgKyAocGFyYW1zLmVsZW1lbnRDbGFzcykgKyBcIjpub3QoLlwiICsgKHBhcmFtcy5sb2FkZWRDbGFzcykgKyBcIik6bm90KC5cIiArIChwYXJhbXMubG9hZGluZ0NsYXNzKSArIFwiKVwiKSk7XG4gICAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3MocGFyYW1zLmVsZW1lbnRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykgJiYgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpKSB7XG4gICAgICAgICRpbWFnZXMgPSAkaW1hZ2VzLmFkZCgkc2xpZGVFbFswXSk7XG4gICAgICB9XG4gICAgICBpZiAoJGltYWdlcy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgICAgICRpbWFnZXMuZWFjaChmdW5jdGlvbiAoaW1hZ2VJbmRleCwgaW1hZ2VFbCkge1xuICAgICAgICB2YXIgJGltYWdlRWwgPSAkKGltYWdlRWwpO1xuICAgICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKTtcblxuICAgICAgICB2YXIgYmFja2dyb3VuZCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgICB2YXIgc3JjID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmMnKTtcbiAgICAgICAgdmFyIHNyY3NldCA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgIHZhciBzaXplcyA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc2l6ZXMnKTtcblxuICAgICAgICBzd2lwZXIubG9hZEltYWdlKCRpbWFnZUVsWzBdLCAoc3JjIHx8IGJhY2tncm91bmQpLCBzcmNzZXQsIHNpemVzLCBmYWxzZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3dpcGVyID09PSAndW5kZWZpbmVkJyB8fCBzd2lwZXIgPT09IG51bGwgfHwgIXN3aXBlciB8fCAoc3dpcGVyICYmICFzd2lwZXIucGFyYW1zKSB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIGlmIChiYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgICAkaW1hZ2VFbC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAoXCJ1cmwoXFxcIlwiICsgYmFja2dyb3VuZCArIFwiXFxcIilcIikpO1xuICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzcmNzZXQpIHtcbiAgICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3Jjc2V0Jywgc3Jjc2V0KTtcbiAgICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaXplcykge1xuICAgICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzaXplcycsIHNpemVzKTtcbiAgICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgICAkaW1hZ2VFbC5hdHRyKCdzcmMnLCBzcmMpO1xuICAgICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNyYycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgICRpbWFnZUVsLmFkZENsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykucmVtb3ZlQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcyk7XG4gICAgICAgICAgJHNsaWRlRWwuZmluZCgoXCIuXCIgKyAocGFyYW1zLnByZWxvYWRlckNsYXNzKSkpLnJlbW92ZSgpO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgbG9hZEluRHVwbGljYXRlKSB7XG4gICAgICAgICAgICB2YXIgc2xpZGVPcmlnaW5hbEluZGV4ID0gJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICAgIHZhciBvcmlnaW5hbFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHNsaWRlT3JpZ2luYWxJbmRleCArIFwiXFxcIl06bm90KC5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCIpXCIpKTtcbiAgICAgICAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUob3JpZ2luYWxTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgZHVwbGljYXRlZFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZU9yaWdpbmFsSW5kZXggKyBcIlxcXCJdXCIpKTtcbiAgICAgICAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoZHVwbGljYXRlZFNsaWRlLmluZGV4KCksIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2xhenlJbWFnZVJlYWR5JywgJHNsaWRlRWxbMF0sICRpbWFnZUVsWzBdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3dpcGVyLmVtaXQoJ2xhenlJbWFnZUxvYWQnLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBsb2FkOiBmdW5jdGlvbiBsb2FkKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyIHN3aXBlclBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXJQYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlclBhcmFtcy5sYXp5O1xuXG4gICAgICB2YXIgc2xpZGVzUGVyVmlldyA9IHN3aXBlclBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgICBzbGlkZXNQZXJWaWV3ID0gMDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2xpZGVFeGlzdChpbmRleCkge1xuICAgICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgICAgaWYgKCR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlclBhcmFtcy5zbGlkZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGluZGV4ICsgXCJcXFwiXVwiKSkubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2xpZGVzW2luZGV4XSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBzbGlkZUluZGV4KHNsaWRlRWwpIHtcbiAgICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICAgIHJldHVybiAkKHNsaWRlRWwpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQoc2xpZGVFbCkuaW5kZXgoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQpIHsgc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkID0gdHJ1ZTsgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlclBhcmFtcy5zbGlkZVZpc2libGVDbGFzcykpKS5lYWNoKGZ1bmN0aW9uIChlbEluZGV4LCBzbGlkZUVsKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gaXNWaXJ0dWFsID8gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIDogJChzbGlkZUVsKS5pbmRleCgpO1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBhY3RpdmVJbmRleDsgaSA8IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldzsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIHsgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSk7IH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5sb2FkUHJldk5leHQpIHtcbiAgICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPiAxIHx8IChwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ICYmIHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQgPiAxKSkge1xuICAgICAgICAgIHZhciBhbW91bnQgPSBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50O1xuICAgICAgICAgIHZhciBzcHYgPSBzbGlkZXNQZXJWaWV3O1xuICAgICAgICAgIHZhciBtYXhJbmRleCA9IE1hdGgubWluKGFjdGl2ZUluZGV4ICsgc3B2ICsgTWF0aC5tYXgoYW1vdW50LCBzcHYpLCBzbGlkZXMubGVuZ3RoKTtcbiAgICAgICAgICB2YXIgbWluSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCAtIE1hdGgubWF4KHNwdiwgYW1vdW50KSwgMCk7XG4gICAgICAgICAgLy8gTmV4dCBTbGlkZXNcbiAgICAgICAgICBmb3IgKHZhciBpJDEgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkkMSA8IG1heEluZGV4OyBpJDEgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSQxKSkgeyBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpJDEpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFByZXYgU2xpZGVzXG4gICAgICAgICAgZm9yICh2YXIgaSQyID0gbWluSW5kZXg7IGkkMiA8IGFjdGl2ZUluZGV4OyBpJDIgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSQyKSkgeyBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpJDIpOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBuZXh0U2xpZGUgPSAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChzd2lwZXJQYXJhbXMuc2xpZGVOZXh0Q2xhc3MpKSk7XG4gICAgICAgICAgaWYgKG5leHRTbGlkZS5sZW5ndGggPiAwKSB7IHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKHNsaWRlSW5kZXgobmV4dFNsaWRlKSk7IH1cblxuICAgICAgICAgIHZhciBwcmV2U2xpZGUgPSAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChzd2lwZXJQYXJhbXMuc2xpZGVQcmV2Q2xhc3MpKSk7XG4gICAgICAgICAgaWYgKHByZXZTbGlkZS5sZW5ndGggPiAwKSB7IHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKHNsaWRlSW5kZXgocHJldlNsaWRlKSk7IH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gIH07XG5cbiAgdmFyIExhenkkMSA9IHtcbiAgICBuYW1lOiAnbGF6eScsXG4gICAgcGFyYW1zOiB7XG4gICAgICBsYXp5OiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBsb2FkUHJldk5leHQ6IGZhbHNlLFxuICAgICAgICBsb2FkUHJldk5leHRBbW91bnQ6IDEsXG4gICAgICAgIGxvYWRPblRyYW5zaXRpb25TdGFydDogZmFsc2UsXG5cbiAgICAgICAgZWxlbWVudENsYXNzOiAnc3dpcGVyLWxhenknLFxuICAgICAgICBsb2FkaW5nQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkaW5nJyxcbiAgICAgICAgbG9hZGVkQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkZWQnLFxuICAgICAgICBwcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgbGF6eToge1xuICAgICAgICAgIGluaXRpYWxJbWFnZUxvYWRlZDogZmFsc2UsXG4gICAgICAgICAgbG9hZDogTGF6eS5sb2FkLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBsb2FkSW5TbGlkZTogTGF6eS5sb2FkSW5TbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgICAgIHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID09PSAwKSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2Nyb2xsOiBmdW5jdGlvbiBzY3JvbGwoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiAhc3dpcGVyLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2Nyb2xsYmFyRHJhZ01vdmU6IGZ1bmN0aW9uIHNjcm9sbGJhckRyYWdNb3ZlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNpdGlvblN0YXJ0OiBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCB8fCAoIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgJiYgIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkpIHtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0KSB7XG4gICAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgLyogZXNsaW50IG5vLWJpdHdpc2U6IFtcImVycm9yXCIsIHsgXCJhbGxvd1wiOiBbXCI+PlwiXSB9XSAqL1xuXG4gIHZhciBDb250cm9sbGVyID0ge1xuICAgIExpbmVhclNwbGluZTogZnVuY3Rpb24gTGluZWFyU3BsaW5lKHgsIHkpIHtcbiAgICAgIHZhciBiaW5hcnlTZWFyY2ggPSAoZnVuY3Rpb24gc2VhcmNoKCkge1xuICAgICAgICB2YXIgbWF4SW5kZXg7XG4gICAgICAgIHZhciBtaW5JbmRleDtcbiAgICAgICAgdmFyIGd1ZXNzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFycmF5LCB2YWwpIHtcbiAgICAgICAgICBtaW5JbmRleCA9IC0xO1xuICAgICAgICAgIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlIChtYXhJbmRleCAtIG1pbkluZGV4ID4gMSkge1xuICAgICAgICAgICAgZ3Vlc3MgPSBtYXhJbmRleCArIG1pbkluZGV4ID4+IDE7XG4gICAgICAgICAgICBpZiAoYXJyYXlbZ3Vlc3NdIDw9IHZhbCkge1xuICAgICAgICAgICAgICBtaW5JbmRleCA9IGd1ZXNzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF4SW5kZXggPSBndWVzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgICB9O1xuICAgICAgfSgpKTtcbiAgICAgIHRoaXMueCA9IHg7XG4gICAgICB0aGlzLnkgPSB5O1xuICAgICAgdGhpcy5sYXN0SW5kZXggPSB4Lmxlbmd0aCAtIDE7XG4gICAgICAvLyBHaXZlbiBhbiB4IHZhbHVlICh4MiksIHJldHVybiB0aGUgZXhwZWN0ZWQgeTIgdmFsdWU6XG4gICAgICAvLyAoeDEseTEpIGlzIHRoZSBrbm93biBwb2ludCBiZWZvcmUgZ2l2ZW4gdmFsdWUsXG4gICAgICAvLyAoeDMseTMpIGlzIHRoZSBrbm93biBwb2ludCBhZnRlciBnaXZlbiB2YWx1ZS5cbiAgICAgIHZhciBpMTtcbiAgICAgIHZhciBpMztcblxuICAgICAgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHgyKSB7XG4gICAgICAgIGlmICgheDIpIHsgcmV0dXJuIDA7IH1cblxuICAgICAgICAvLyBHZXQgdGhlIGluZGV4ZXMgb2YgeDEgYW5kIHgzICh0aGUgYXJyYXkgaW5kZXhlcyBiZWZvcmUgYW5kIGFmdGVyIGdpdmVuIHgyKTpcbiAgICAgICAgaTMgPSBiaW5hcnlTZWFyY2godGhpcy54LCB4Mik7XG4gICAgICAgIGkxID0gaTMgLSAxO1xuXG4gICAgICAgIC8vIFdlIGhhdmUgb3VyIGluZGV4ZXMgaTEgJiBpMywgc28gd2UgY2FuIGNhbGN1bGF0ZSBhbHJlYWR5OlxuICAgICAgICAvLyB5MiA6PSAoKHgy4oiSeDEpIMOXICh5M+KIknkxKSkgw7cgKHgz4oiSeDEpICsgeTFcbiAgICAgICAgcmV0dXJuICgoKHgyIC0gdGhpcy54W2kxXSkgKiAodGhpcy55W2kzXSAtIHRoaXMueVtpMV0pKSAvICh0aGlzLnhbaTNdIC0gdGhpcy54W2kxXSkpICsgdGhpcy55W2kxXTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIC8vIHh4eDogZm9yIG5vdyBpIHdpbGwganVzdCBzYXZlIG9uZSBzcGxpbmUgZnVuY3Rpb24gdG8gdG9cbiAgICBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGMpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gc3dpcGVyLnBhcmFtcy5sb29wXG4gICAgICAgICAgPyBuZXcgQ29udHJvbGxlci5MaW5lYXJTcGxpbmUoc3dpcGVyLnNsaWRlc0dyaWQsIGMuc2xpZGVzR3JpZClcbiAgICAgICAgICA6IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoc2V0VHJhbnNsYXRlJDEsIGJ5Q29udHJvbGxlcikge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgICB2YXIgbXVsdGlwbGllcjtcbiAgICAgIHZhciBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjKSB7XG4gICAgICAgIC8vIHRoaXMgd2lsbCBjcmVhdGUgYW4gSW50ZXJwb2xhdGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIHNuYXBHcmlkc1xuICAgICAgICAvLyB4IGlzIHRoZSBHcmlkIG9mIHRoZSBzY3JvbGxlZCBzY3JvbGxlciBhbmQgeSB3aWxsIGJlIHRoZSBjb250cm9sbGVkIHNjcm9sbGVyXG4gICAgICAgIC8vIGl0IG1ha2VzIHNlbnNlIHRvIGNyZWF0ZSB0aGlzIG9ubHkgb25jZSBhbmQgcmVjYWxsIGl0IGZvciB0aGUgaW50ZXJwb2xhdGlvblxuICAgICAgICAvLyB0aGUgZnVuY3Rpb24gZG9lcyBhIGxvdCBvZiB2YWx1ZSBjYWNoaW5nIGZvciBwZXJmb3JtYW5jZVxuICAgICAgICB2YXIgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24oYyk7XG4gICAgICAgICAgLy8gaSBhbSBub3Qgc3VyZSB3aHkgdGhlIHZhbHVlcyBoYXZlIHRvIGJlIG11bHRpcGxpY2F0ZWQgdGhpcyB3YXksIHRyaWVkIHRvIGludmVydCB0aGUgc25hcEdyaWRcbiAgICAgICAgICAvLyBidXQgaXQgZGlkIG5vdCB3b3JrIG91dFxuICAgICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAtc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lLmludGVycG9sYXRlKC10cmFuc2xhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb250cm9sbGVkVHJhbnNsYXRlIHx8IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgICBtdWx0aXBsaWVyID0gKGMubWF4VHJhbnNsYXRlKCkgLSBjLm1pblRyYW5zbGF0ZSgpKSAvIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAoKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyKSArIGMubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmludmVyc2UpIHtcbiAgICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gYy5tYXhUcmFuc2xhdGUoKSAtIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICAgIH1cbiAgICAgICAgYy51cGRhdGVQcm9ncmVzcyhjb250cm9sbGVkVHJhbnNsYXRlKTtcbiAgICAgICAgYy5zZXRUcmFuc2xhdGUoY29udHJvbGxlZFRyYW5zbGF0ZSwgc3dpcGVyKTtcbiAgICAgICAgYy51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBjLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgICB2YXIgaTtcbiAgICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGMpIHtcbiAgICAgICAgYy5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBzd2lwZXIpO1xuICAgICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICBjLnRyYW5zaXRpb25TdGFydCgpO1xuICAgICAgICAgIGlmIChjLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgICBVdGlscy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGMudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGMuJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghY29udHJvbGxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGlmIChjLnBhcmFtcy5sb29wICYmIHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ3NsaWRlJykge1xuICAgICAgICAgICAgICBjLmxvb3BGaXgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGNvbnRyb2xsZWQpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG4gIHZhciBDb250cm9sbGVyJDEgPSB7XG4gICAgbmFtZTogJ2NvbnRyb2xsZXInLFxuICAgIHBhcmFtczoge1xuICAgICAgY29udHJvbGxlcjoge1xuICAgICAgICBjb250cm9sOiB1bmRlZmluZWQsXG4gICAgICAgIGludmVyc2U6IGZhbHNlLFxuICAgICAgICBieTogJ3NsaWRlJywgLy8gb3IgJ2NvbnRhaW5lcidcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBjb250cm9sbGVyOiB7XG4gICAgICAgICAgY29udHJvbDogc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2wsXG4gICAgICAgICAgZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbjogQ29udHJvbGxlci5nZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRUcmFuc2xhdGU6IENvbnRyb2xsZXIuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uOiBDb250cm9sbGVyLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvYnNlcnZlclVwZGF0ZTogZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIGExMXkgPSB7XG4gICAgbWFrZUVsRm9jdXNhYmxlOiBmdW5jdGlvbiBtYWtlRWxGb2N1c2FibGUoJGVsKSB7XG4gICAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnMCcpO1xuICAgICAgcmV0dXJuICRlbDtcbiAgICB9LFxuICAgIGFkZEVsUm9sZTogZnVuY3Rpb24gYWRkRWxSb2xlKCRlbCwgcm9sZSkge1xuICAgICAgJGVsLmF0dHIoJ3JvbGUnLCByb2xlKTtcbiAgICAgIHJldHVybiAkZWw7XG4gICAgfSxcbiAgICBhZGRFbExhYmVsOiBmdW5jdGlvbiBhZGRFbExhYmVsKCRlbCwgbGFiZWwpIHtcbiAgICAgICRlbC5hdHRyKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgICAgcmV0dXJuICRlbDtcbiAgICB9LFxuICAgIGRpc2FibGVFbDogZnVuY3Rpb24gZGlzYWJsZUVsKCRlbCkge1xuICAgICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgIHJldHVybiAkZWw7XG4gICAgfSxcbiAgICBlbmFibGVFbDogZnVuY3Rpb24gZW5hYmxlRWwoJGVsKSB7XG4gICAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiAkZWw7XG4gICAgfSxcbiAgICBvbkVudGVyS2V5OiBmdW5jdGlvbiBvbkVudGVyS2V5KGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICAgIGlmIChlLmtleUNvZGUgIT09IDEzKSB7IHJldHVybjsgfVxuICAgICAgdmFyICR0YXJnZXRFbCA9ICQoZS50YXJnZXQpO1xuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwgJiYgJHRhcmdldEVsLmlzKHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpKSB7XG4gICAgICAgIGlmICghKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5sYXN0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCAmJiAkdGFyZ2V0RWwuaXMoc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkpIHtcbiAgICAgICAgaWYgKCEoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLmZpcnN0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgJHRhcmdldEVsLmlzKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSkpIHtcbiAgICAgICAgJHRhcmdldEVsWzBdLmNsaWNrKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeShtZXNzYWdlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBub3RpZmljYXRpb24gPSBzd2lwZXIuYTExeS5saXZlUmVnaW9uO1xuICAgICAgaWYgKG5vdGlmaWNhdGlvbi5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICBub3RpZmljYXRpb24uaHRtbCgnJyk7XG4gICAgICBub3RpZmljYXRpb24uaHRtbChtZXNzYWdlKTtcbiAgICB9LFxuICAgIHVwZGF0ZU5hdmlnYXRpb246IGZ1bmN0aW9uIHVwZGF0ZU5hdmlnYXRpb24oKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgeyByZXR1cm47IH1cbiAgICAgIHZhciByZWYgPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICAgIHZhciAkbmV4dEVsID0gcmVmLiRuZXh0RWw7XG4gICAgICB2YXIgJHByZXZFbCA9IHJlZi4kcHJldkVsO1xuXG4gICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgIHN3aXBlci5hMTF5LmRpc2FibGVFbCgkcHJldkVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5lbmFibGVFbCgkcHJldkVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJG5leHRFbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkuZW5hYmxlRWwoJG5leHRFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZVBhZ2luYXRpb246IGZ1bmN0aW9uIHVwZGF0ZVBhZ2luYXRpb24oKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZWFjaChmdW5jdGlvbiAoYnVsbGV0SW5kZXgsIGJ1bGxldEVsKSB7XG4gICAgICAgICAgdmFyICRidWxsZXRFbCA9ICQoYnVsbGV0RWwpO1xuICAgICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkYnVsbGV0RWwpO1xuICAgICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkYnVsbGV0RWwsICdidXR0b24nKTtcbiAgICAgICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRidWxsZXRFbCwgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL3t7aW5kZXh9fS8sICRidWxsZXRFbC5pbmRleCgpICsgMSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgc3dpcGVyLiRlbC5hcHBlbmQoc3dpcGVyLmExMXkubGl2ZVJlZ2lvbik7XG5cbiAgICAgIC8vIE5hdmlnYXRpb25cbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgICB2YXIgJG5leHRFbDtcbiAgICAgIHZhciAkcHJldkVsO1xuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpIHtcbiAgICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbCkge1xuICAgICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICAgIH1cbiAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRuZXh0RWwsICdidXR0b24nKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkbmV4dEVsLCBwYXJhbXMubmV4dFNsaWRlTWVzc2FnZSk7XG4gICAgICAgICRuZXh0RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgIH1cbiAgICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRwcmV2RWwsICdidXR0b24nKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkcHJldkVsLCBwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICAgICRwcmV2RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgIH1cblxuICAgICAgLy8gUGFnaW5hdGlvblxuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub24oJ2tleWRvd24nLCAoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSksIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5hMTF5LmxpdmVSZWdpb24gJiYgc3dpcGVyLmExMXkubGl2ZVJlZ2lvbi5sZW5ndGggPiAwKSB7IHN3aXBlci5hMTF5LmxpdmVSZWdpb24ucmVtb3ZlKCk7IH1cblxuICAgICAgdmFyICRuZXh0RWw7XG4gICAgICB2YXIgJHByZXZFbDtcbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSB7XG4gICAgICAgICRuZXh0RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHtcbiAgICAgICAgJHByZXZFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWw7XG4gICAgICB9XG4gICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAkbmV4dEVsLm9mZigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgICAgfVxuICAgICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgJHByZXZFbC5vZmYoJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgIH1cblxuICAgICAgLy8gUGFnaW5hdGlvblxuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub2ZmKCdrZXlkb3duJywgKFwiLlwiICsgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuICB2YXIgQTExeSA9IHtcbiAgICBuYW1lOiAnYTExeScsXG4gICAgcGFyYW1zOiB7XG4gICAgICBhMTF5OiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiAnc3dpcGVyLW5vdGlmaWNhdGlvbicsXG4gICAgICAgIHByZXZTbGlkZU1lc3NhZ2U6ICdQcmV2aW91cyBzbGlkZScsXG4gICAgICAgIG5leHRTbGlkZU1lc3NhZ2U6ICdOZXh0IHNsaWRlJyxcbiAgICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZScsXG4gICAgICAgIGxhc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBsYXN0IHNsaWRlJyxcbiAgICAgICAgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6ICdHbyB0byBzbGlkZSB7e2luZGV4fX0nLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGExMXk6IHtcbiAgICAgICAgICBsaXZlUmVnaW9uOiAkKChcIjxzcGFuIGNsYXNzPVxcXCJcIiArIChzd2lwZXIucGFyYW1zLmExMXkubm90aWZpY2F0aW9uQ2xhc3MpICsgXCJcXFwiIGFyaWEtbGl2ZT1cXFwiYXNzZXJ0aXZlXFxcIiBhcmlhLWF0b21pYz1cXFwidHJ1ZVxcXCI+PC9zcGFuPlwiKSksXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5rZXlzKGExMXkpLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgc3dpcGVyLmExMXlbbWV0aG9kTmFtZV0gPSBhMTF5W21ldGhvZE5hbWVdLmJpbmQoc3dpcGVyKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuYTExeS5pbml0KCk7XG4gICAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICAgIH0sXG4gICAgICB0b0VkZ2U6IGZ1bmN0aW9uIHRvRWRnZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICAgIH0sXG4gICAgICBmcm9tRWRnZTogZnVuY3Rpb24gZnJvbUVkZ2UoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgICB9LFxuICAgICAgcGFnaW5hdGlvblVwZGF0ZTogZnVuY3Rpb24gcGFnaW5hdGlvblVwZGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmExMXkuZGVzdHJveSgpO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBIaXN0b3J5ID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5KSB7IHJldHVybjsgfVxuICAgICAgaWYgKCF3aW4uaGlzdG9yeSB8fCAhd2luLmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICAgIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBoaXN0b3J5ID0gc3dpcGVyLmhpc3Rvcnk7XG4gICAgICBoaXN0b3J5LmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIGhpc3RvcnkucGF0aHMgPSBIaXN0b3J5LmdldFBhdGhWYWx1ZXMoKTtcbiAgICAgIGlmICghaGlzdG9yeS5wYXRocy5rZXkgJiYgIWhpc3RvcnkucGF0aHMudmFsdWUpIHsgcmV0dXJuOyB9XG4gICAgICBoaXN0b3J5LnNjcm9sbFRvU2xpZGUoMCwgaGlzdG9yeS5wYXRocy52YWx1ZSwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHN3aXBlci5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldEhpc3RvcnlQb3BTdGF0ZTogZnVuY3Rpb24gc2V0SGlzdG9yeVBvcFN0YXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuaGlzdG9yeS5wYXRocyA9IEhpc3RvcnkuZ2V0UGF0aFZhbHVlcygpO1xuICAgICAgc3dpcGVyLmhpc3Rvcnkuc2Nyb2xsVG9TbGlkZShzd2lwZXIucGFyYW1zLnNwZWVkLCBzd2lwZXIuaGlzdG9yeS5wYXRocy52YWx1ZSwgZmFsc2UpO1xuICAgIH0sXG4gICAgZ2V0UGF0aFZhbHVlczogZnVuY3Rpb24gZ2V0UGF0aFZhbHVlcygpIHtcbiAgICAgIHZhciBwYXRoQXJyYXkgPSB3aW4ubG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIoZnVuY3Rpb24gKHBhcnQpIHsgcmV0dXJuIHBhcnQgIT09ICcnOyB9KTtcbiAgICAgIHZhciB0b3RhbCA9IHBhdGhBcnJheS5sZW5ndGg7XG4gICAgICB2YXIga2V5ID0gcGF0aEFycmF5W3RvdGFsIC0gMl07XG4gICAgICB2YXIgdmFsdWUgPSBwYXRoQXJyYXlbdG90YWwgLSAxXTtcbiAgICAgIHJldHVybiB7IGtleToga2V5LCB2YWx1ZTogdmFsdWUgfTtcbiAgICB9LFxuICAgIHNldEhpc3Rvcnk6IGZ1bmN0aW9uIHNldEhpc3Rvcnkoa2V5LCBpbmRleCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuICAgICAgdmFyIHZhbHVlID0gSGlzdG9yeS5zbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTtcbiAgICAgIGlmICghd2luLmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgdmFsdWUgPSBrZXkgKyBcIi9cIiArIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IHdpbi5oaXN0b3J5LnN0YXRlO1xuICAgICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgIHdpbi5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IHZhbHVlOiB2YWx1ZSB9LCBudWxsLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW4uaGlzdG9yeS5wdXNoU3RhdGUoeyB2YWx1ZTogdmFsdWUgfSwgbnVsbCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2x1Z2lmeTogZnVuY3Rpb24gc2x1Z2lmeSh0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dC50b1N0cmluZygpXG4gICAgICAgIC5yZXBsYWNlKC9cXHMrL2csICctJylcbiAgICAgICAgLnJlcGxhY2UoL1teXFx3LV0rL2csICcnKVxuICAgICAgICAucmVwbGFjZSgvLS0rL2csICctJylcbiAgICAgICAgLnJlcGxhY2UoL14tKy8sICcnKVxuICAgICAgICAucmVwbGFjZSgvLSskLywgJycpO1xuICAgIH0sXG4gICAgc2Nyb2xsVG9TbGlkZTogZnVuY3Rpb24gc2Nyb2xsVG9TbGlkZShzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB2YXIgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICAgIHZhciBzbGlkZUhpc3RvcnkgPSBIaXN0b3J5LnNsdWdpZnkoc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5JykpO1xuICAgICAgICAgIGlmIChzbGlkZUhpc3RvcnkgPT09IHZhbHVlICYmICFzbGlkZS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBzbGlkZS5pbmRleCgpO1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICB2YXIgSGlzdG9yeSQxID0ge1xuICAgIG5hbWU6ICdoaXN0b3J5JyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICAgIGtleTogJ3NsaWRlcycsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgaGlzdG9yeToge1xuICAgICAgICAgIGluaXQ6IEhpc3RvcnkuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0SGlzdG9yeTogSGlzdG9yeS5zZXRIaXN0b3J5LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRIaXN0b3J5UG9wU3RhdGU6IEhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzY3JvbGxUb1NsaWRlOiBIaXN0b3J5LnNjcm9sbFRvU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGRlc3Ryb3k6IEhpc3RvcnkuZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmhpc3RvcnkuaW5pdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5oaXN0b3J5LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgSGFzaE5hdmlnYXRpb24gPSB7XG4gICAgb25IYXNoQ2FuZ2U6IGZ1bmN0aW9uIG9uSGFzaENhbmdlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgbmV3SGFzaCA9IGRvYy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICB2YXIgYWN0aXZlU2xpZGVIYXNoID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpO1xuICAgICAgaWYgKG5ld0hhc2ggIT09IGFjdGl2ZVNsaWRlSGFzaCkge1xuICAgICAgICB2YXIgbmV3SW5kZXggPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSArIFwiW2RhdGEtaGFzaD1cXFwiXCIgKyBuZXdIYXNoICsgXCJcXFwiXVwiKSkuaW5kZXgoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldEhhc2g6IGZ1bmN0aW9uIHNldEhhc2goKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5yZXBsYWNlU3RhdGUgJiYgd2luLmhpc3RvcnkgJiYgd2luLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgIHdpbi5oaXN0b3J5LnJlcGxhY2VTdGF0ZShudWxsLCBudWxsLCAoKFwiI1wiICsgKHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLWhhc2gnKSkpIHx8ICcnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIHZhciBoYXNoID0gc2xpZGUuYXR0cignZGF0YS1oYXNoJykgfHwgc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5Jyk7XG4gICAgICAgIGRvYy5sb2NhdGlvbi5oYXNoID0gaGFzaCB8fCAnJztcbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkIHx8IChzd2lwZXIucGFyYW1zLmhpc3RvcnkgJiYgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpKSB7IHJldHVybjsgfVxuICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIHZhciBoYXNoID0gZG9jLmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICAgIGlmIChoYXNoKSB7XG4gICAgICAgIHZhciBzcGVlZCA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgdmFyIHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgICAgICB2YXIgc2xpZGVIYXNoID0gc2xpZGUuYXR0cignZGF0YS1oYXNoJykgfHwgc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5Jyk7XG4gICAgICAgICAgaWYgKHNsaWRlSGFzaCA9PT0gaGFzaCAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgICAkKHdpbikub24oJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgICAkKHdpbikub2ZmKCdoYXNoY2hhbmdlJywgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLm9uSGFzaENhbmdlKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuICB2YXIgSGFzaE5hdmlnYXRpb24kMSA9IHtcbiAgICBuYW1lOiAnaGFzaC1uYXZpZ2F0aW9uJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGhhc2hOYXZpZ2F0aW9uOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAgICB3YXRjaFN0YXRlOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAgICAgICBpbml0OiBIYXNoTmF2aWdhdGlvbi5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBkZXN0cm95OiBIYXNoTmF2aWdhdGlvbi5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRIYXNoOiBIYXNoTmF2aWdhdGlvbi5zZXRIYXNoLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBvbkhhc2hDYW5nZTogSGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UuYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uc2V0SGFzaCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgLyogZXNsaW50IG5vLXVuZGVyc2NvcmUtZGFuZ2xlOiBcIm9mZlwiICovXG5cbiAgdmFyIEF1dG9wbGF5ID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB2YXIgZGVsYXkgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgICAgaWYgKCRhY3RpdmVTbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLWF1dG9wbGF5JykpIHtcbiAgICAgICAgZGVsYXkgPSAkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpIHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICB9XG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpO1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPSBVdGlscy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnJldmVyc2VEaXJlY3Rpb24pIHtcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlUHJldihzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlUHJldihzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlTmV4dChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbygwLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgc3RvcDogZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlO1xuICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RvcCcpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBwYXVzZTogZnVuY3Rpb24gcGF1c2Uoc3BlZWQpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgeyByZXR1cm47IH1cbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7IHJldHVybjsgfVxuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS50aW1lb3V0KSB7IGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7IH1cbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSB0cnVlO1xuICAgICAgaWYgKHNwZWVkID09PSAwIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LndhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICB2YXIgQXV0b3BsYXkkMSA9IHtcbiAgICBuYW1lOiAnYXV0b3BsYXknLFxuICAgIHBhcmFtczoge1xuICAgICAgYXV0b3BsYXk6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGRlbGF5OiAzMDAwLFxuICAgICAgICB3YWl0Rm9yVHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgICAgZGlzYWJsZU9uSW50ZXJhY3Rpb246IHRydWUsXG4gICAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICAgIHJldmVyc2VEaXJlY3Rpb246IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGF1dG9wbGF5OiB7XG4gICAgICAgICAgcnVubmluZzogZmFsc2UsXG4gICAgICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgICAgICBydW46IEF1dG9wbGF5LnJ1bi5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc3RhcnQ6IEF1dG9wbGF5LnN0YXJ0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzdG9wOiBBdXRvcGxheS5zdG9wLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBwYXVzZTogQXV0b3BsYXkucGF1c2UuYmluZChzd2lwZXIpLFxuICAgICAgICAgIG9uVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci4kd3JhcHBlckVsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmVmb3JlVHJhbnNpdGlvblN0YXJ0OiBmdW5jdGlvbiBiZWZvcmVUcmFuc2l0aW9uU3RhcnQoc3BlZWQsIGludGVybmFsKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICBpZiAoaW50ZXJuYWwgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZShzcGVlZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2xpZGVyRmlyc3RNb3ZlOiBmdW5jdGlvbiBzbGlkZXJGaXJzdE1vdmUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgRmFkZSA9IHtcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgIHZhciB0eCA9IC1vZmZzZXQ7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7IHR4IC09IHN3aXBlci50cmFuc2xhdGU7IH1cbiAgICAgICAgdmFyIHR5ID0gMDtcbiAgICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICB0eSA9IHR4O1xuICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2xpZGVPcGFjaXR5ID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZVxuICAgICAgICAgID8gTWF0aC5tYXgoMSAtIE1hdGguYWJzKCRzbGlkZUVsWzBdLnByb2dyZXNzKSwgMClcbiAgICAgICAgICA6IDEgKyBNYXRoLm1pbihNYXRoLm1heCgkc2xpZGVFbFswXS5wcm9ncmVzcywgLTEpLCAwKTtcbiAgICAgICAgJHNsaWRlRWxcbiAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IHNsaWRlT3BhY2l0eSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB0eCArIFwicHgsIFwiICsgdHkgKyBcInB4LCAwcHgpXCIpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgc2xpZGVzLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICB2YXIgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgICAgc2xpZGVzLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIGV2ZW50VHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgdmFyIHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCddO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgJHdyYXBwZXJFbC50cmlnZ2VyKHRyaWdnZXJFdmVudHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICB2YXIgRWZmZWN0RmFkZSA9IHtcbiAgICBuYW1lOiAnZWZmZWN0LWZhZGUnLFxuICAgIHBhcmFtczoge1xuICAgICAgZmFkZUVmZmVjdDoge1xuICAgICAgICBjcm9zc0ZhZGU6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgICAgICBzZXRUcmFuc2xhdGU6IEZhZGUuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uOiBGYWRlLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwiZmFkZVwiKSk7XG4gICAgICAgIHZhciBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBDdWJlID0ge1xuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgICAgIHZhciBzd2lwZXJXaWR0aCA9IHN3aXBlci53aWR0aDtcbiAgICAgIHZhciBzd2lwZXJIZWlnaHQgPSBzd2lwZXIuaGVpZ2h0O1xuICAgICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgICB2YXIgc3dpcGVyU2l6ZSA9IHN3aXBlci5zaXplO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdDtcbiAgICAgIHZhciBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgICB2YXIgd3JhcHBlclJvdGF0ZSA9IDA7XG4gICAgICB2YXIgJGN1YmVTaGFkb3dFbDtcbiAgICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJHdyYXBwZXJFbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgICAgaWYgKCRjdWJlU2hhZG93RWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1jdWJlLXNoYWRvd1wiPjwvZGl2PicpO1xuICAgICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgICRjdWJlU2hhZG93RWwuY3NzKHsgaGVpZ2h0OiAoc3dpcGVyV2lkdGggKyBcInB4XCIpIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICRlbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICAgIHZhciBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBwYXJzZUludCgkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNsaWRlQW5nbGUgPSBzbGlkZUluZGV4ICogOTA7XG4gICAgICAgIHZhciByb3VuZCA9IE1hdGguZmxvb3Ioc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICBzbGlkZUFuZ2xlID0gLXNsaWRlQW5nbGU7XG4gICAgICAgICAgcm91bmQgPSBNYXRoLmZsb29yKC1zbGlkZUFuZ2xlIC8gMzYwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigkc2xpZGVFbFswXS5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgICAgdmFyIHR4ID0gMDtcbiAgICAgICAgdmFyIHR5ID0gMDtcbiAgICAgICAgdmFyIHR6ID0gMDtcbiAgICAgICAgaWYgKHNsaWRlSW5kZXggJSA0ID09PSAwKSB7XG4gICAgICAgICAgdHggPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgICB0eiA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAxKSAlIDQgPT09IDApIHtcbiAgICAgICAgICB0eCA9IDA7XG4gICAgICAgICAgdHogPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICAgIHR4ID0gc3dpcGVyU2l6ZSArIChyb3VuZCAqIDQgKiBzd2lwZXJTaXplKTtcbiAgICAgICAgICB0eiA9IHN3aXBlclNpemU7XG4gICAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgICB0eCA9IC1zd2lwZXJTaXplO1xuICAgICAgICAgIHR6ID0gKDMgKiBzd2lwZXJTaXplKSArIChzd2lwZXJTaXplICogNCAqIHJvdW5kKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgdHggPSAtdHg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgIHR5ID0gdHg7XG4gICAgICAgICAgdHggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IFwicm90YXRlWChcIiArIChpc0hvcml6b250YWwgPyAwIDogLXNsaWRlQW5nbGUpICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyAoaXNIb3Jpem9udGFsID8gc2xpZGVBbmdsZSA6IDApICsgXCJkZWcpIHRyYW5zbGF0ZTNkKFwiICsgdHggKyBcInB4LCBcIiArIHR5ICsgXCJweCwgXCIgKyB0eiArIFwicHgpXCI7XG4gICAgICAgIGlmIChwcm9ncmVzcyA8PSAxICYmIHByb2dyZXNzID4gLTEpIHtcbiAgICAgICAgICB3cmFwcGVyUm90YXRlID0gKHNsaWRlSW5kZXggKiA5MCkgKyAocHJvZ3Jlc3MgKiA5MCk7XG4gICAgICAgICAgaWYgKHJ0bCkgeyB3cmFwcGVyUm90YXRlID0gKC1zbGlkZUluZGV4ICogOTApIC0gKHByb2dyZXNzICogOTApOyB9XG4gICAgICAgIH1cbiAgICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgICB2YXIgc2hhZG93QmVmb3JlID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgICAgdmFyIHNoYWRvd0FmdGVyID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoaXNIb3Jpem9udGFsID8gJ2xlZnQnIDogJ3RvcCcpICsgXCJcXFwiPjwvZGl2PlwiKSk7XG4gICAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoaXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nKSArIFwiXFxcIj48L2Rpdj5cIikpO1xuICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHsgc2hhZG93QmVmb3JlWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApOyB9XG4gICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgeyBzaGFkb3dBZnRlclswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocHJvZ3Jlc3MsIDApOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgICAgJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbic6IChcIjUwJSA1MCUgLVwiICsgKHN3aXBlclNpemUgLyAyKSArIFwicHhcIiksXG4gICAgICAgICctbW96LXRyYW5zZm9ybS1vcmlnaW4nOiAoXCI1MCUgNTAlIC1cIiArIChzd2lwZXJTaXplIC8gMikgKyBcInB4XCIpLFxuICAgICAgICAnLW1zLXRyYW5zZm9ybS1vcmlnaW4nOiAoXCI1MCUgNTAlIC1cIiArIChzd2lwZXJTaXplIC8gMikgKyBcInB4XCIpLFxuICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6IChcIjUwJSA1MCUgLVwiICsgKHN3aXBlclNpemUgLyAyKSArIFwicHhcIiksXG4gICAgICB9KTtcblxuICAgICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKDBweCwgXCIgKyAoKHN3aXBlcldpZHRoIC8gMikgKyBwYXJhbXMuc2hhZG93T2Zmc2V0KSArIFwicHgsIFwiICsgKC1zd2lwZXJXaWR0aCAvIDIpICsgXCJweCkgcm90YXRlWCg5MGRlZykgcm90YXRlWigwZGVnKSBzY2FsZShcIiArIChwYXJhbXMuc2hhZG93U2NhbGUpICsgXCIpXCIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc2hhZG93QW5nbGUgPSBNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAtIChNYXRoLmZsb29yKE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC8gOTApICogOTApO1xuICAgICAgICAgIHZhciBtdWx0aXBsaWVyID0gMS41IC0gKFxuICAgICAgICAgICAgKE1hdGguc2luKChzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJKSAvIDM2MCkgLyAyKVxuICAgICAgICAgICAgKyAoTWF0aC5jb3MoKHNoYWRvd0FuZ2xlICogMiAqIE1hdGguUEkpIC8gMzYwKSAvIDIpXG4gICAgICAgICAgKTtcbiAgICAgICAgICB2YXIgc2NhbGUxID0gcGFyYW1zLnNoYWRvd1NjYWxlO1xuICAgICAgICAgIHZhciBzY2FsZTIgPSBwYXJhbXMuc2hhZG93U2NhbGUgLyBtdWx0aXBsaWVyO1xuICAgICAgICAgIHZhciBvZmZzZXQgPSBwYXJhbXMuc2hhZG93T2Zmc2V0O1xuICAgICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKChcInNjYWxlM2QoXCIgKyBzY2FsZTEgKyBcIiwgMSwgXCIgKyBzY2FsZTIgKyBcIikgdHJhbnNsYXRlM2QoMHB4LCBcIiArICgoc3dpcGVySGVpZ2h0IC8gMikgKyBvZmZzZXQpICsgXCJweCwgXCIgKyAoLXN3aXBlckhlaWdodCAvIDIgLyBzY2FsZTIpICsgXCJweCkgcm90YXRlWCgtOTBkZWcpXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHpGYWN0b3IgPSAoQnJvd3Nlci5pc1NhZmFyaSB8fCBCcm93c2VyLmlzVWlXZWJWaWV3KSA/ICgtc3dpcGVyU2l6ZSAvIDIpIDogMDtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwcHgsMCxcIiArIHpGYWN0b3IgKyBcInB4KSByb3RhdGVYKFwiICsgKHN3aXBlci5pc0hvcml6b250YWwoKSA/IDAgOiB3cmFwcGVyUm90YXRlKSArIFwiZGVnKSByb3RhdGVZKFwiICsgKHN3aXBlci5pc0hvcml6b250YWwoKSA/IC13cmFwcGVyUm90YXRlIDogMCkgKyBcImRlZylcIikpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgc2xpZGVzXG4gICAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JylcbiAgICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdC5zaGFkb3cgJiYgIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEVmZmVjdEN1YmUgPSB7XG4gICAgbmFtZTogJ2VmZmVjdC1jdWJlJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGN1YmVFZmZlY3Q6IHtcbiAgICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgICBzaGFkb3c6IHRydWUsXG4gICAgICAgIHNoYWRvd09mZnNldDogMjAsXG4gICAgICAgIHNoYWRvd1NjYWxlOiAwLjk0LFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGN1YmVFZmZlY3Q6IHtcbiAgICAgICAgICBzZXRUcmFuc2xhdGU6IEN1YmUuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uOiBDdWJlLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2N1YmUnKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwiY3ViZVwiKSk7XG4gICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goKChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCIzZFwiKSk7XG4gICAgICAgIHZhciBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICByZXNpc3RhbmNlUmF0aW86IDAsXG4gICAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2N1YmUnKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuY3ViZUVmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEZsaXAgPSB7XG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICAgIHZhciBwcm9ncmVzcyA9ICRzbGlkZUVsWzBdLnByb2dyZXNzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24pIHtcbiAgICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgICAgdmFyIHJvdGF0ZSA9IC0xODAgKiBwcm9ncmVzcztcbiAgICAgICAgdmFyIHJvdGF0ZVkgPSByb3RhdGU7XG4gICAgICAgIHZhciByb3RhdGVYID0gMDtcbiAgICAgICAgdmFyIHR4ID0gLW9mZnNldDtcbiAgICAgICAgdmFyIHR5ID0gMDtcbiAgICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICB0eSA9IHR4O1xuICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgICByb3RhdGVYID0gLXJvdGF0ZVk7XG4gICAgICAgICAgcm90YXRlWSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAocnRsKSB7XG4gICAgICAgICAgcm90YXRlWSA9IC1yb3RhdGVZO1xuICAgICAgICB9XG5cbiAgICAgICAgJHNsaWRlRWxbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQocHJvZ3Jlc3MpKSArIHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICAgIHZhciBzaGFkb3dCZWZvcmUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgICB2YXIgc2hhZG93QWZ0ZXIgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNoYWRvd0JlZm9yZSA9ICQoKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJykgKyBcIlxcXCI+PC9kaXY+XCIpKTtcbiAgICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dCZWZvcmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzaGFkb3dBZnRlciA9ICQoKFwiPGRpdiBjbGFzcz1cXFwic3dpcGVyLXNsaWRlLXNoYWRvdy1cIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAncmlnaHQnIDogJ2JvdHRvbScpICsgXCJcXFwiPjwvZGl2PlwiKSk7XG4gICAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCkgeyBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7IH1cbiAgICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoKSB7IHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7IH1cbiAgICAgICAgfVxuICAgICAgICAkc2xpZGVFbFxuICAgICAgICAgIC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB0eCArIFwicHgsIFwiICsgdHkgKyBcInB4LCAwcHgpIHJvdGF0ZVgoXCIgKyByb3RhdGVYICsgXCJkZWcpIHJvdGF0ZVkoXCIgKyByb3RhdGVZICsgXCJkZWcpXCIpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgc2xpZGVzXG4gICAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JylcbiAgICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICB2YXIgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHNsaWRlcy5lcShhY3RpdmVJbmRleCkudHJhbnNpdGlvbkVuZChmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgLy8gaWYgKCEkKHRoaXMpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHZhciB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEVmZmVjdEZsaXAgPSB7XG4gICAgbmFtZTogJ2VmZmVjdC1mbGlwJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGZsaXBFZmZlY3Q6IHtcbiAgICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgICBsaW1pdFJvdGF0aW9uOiB0cnVlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGZsaXBFZmZlY3Q6IHtcbiAgICAgICAgICBzZXRUcmFuc2xhdGU6IEZsaXAuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uOiBGbGlwLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwiZmxpcFwiKSk7XG4gICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goKChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCIzZFwiKSk7XG4gICAgICAgIHZhciBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmZsaXBFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5mbGlwRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBDb3ZlcmZsb3cgPSB7XG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzd2lwZXJXaWR0aCA9IHN3aXBlci53aWR0aDtcbiAgICAgIHZhciBzd2lwZXJIZWlnaHQgPSBzd2lwZXIuaGVpZ2h0O1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyIHNsaWRlc1NpemVzR3JpZCA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWQ7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jb3ZlcmZsb3dFZmZlY3Q7XG4gICAgICB2YXIgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICB2YXIgY2VudGVyID0gaXNIb3Jpem9udGFsID8gLXRyYW5zZm9ybSArIChzd2lwZXJXaWR0aCAvIDIpIDogLXRyYW5zZm9ybSArIChzd2lwZXJIZWlnaHQgLyAyKTtcbiAgICAgIHZhciByb3RhdGUgPSBpc0hvcml6b250YWwgPyBwYXJhbXMucm90YXRlIDogLXBhcmFtcy5yb3RhdGU7XG4gICAgICB2YXIgdHJhbnNsYXRlID0gcGFyYW1zLmRlcHRoO1xuICAgICAgLy8gRWFjaCBzbGlkZSBvZmZzZXQgZnJvbSBjZW50ZXJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgICB2YXIgc2xpZGVTaXplID0gc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgICB2YXIgc2xpZGVPZmZzZXQgPSAkc2xpZGVFbFswXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgICAgdmFyIG9mZnNldE11bHRpcGxpZXIgPSAoKGNlbnRlciAtIHNsaWRlT2Zmc2V0IC0gKHNsaWRlU2l6ZSAvIDIpKSAvIHNsaWRlU2l6ZSkgKiBwYXJhbXMubW9kaWZpZXI7XG5cbiAgICAgICAgdmFyIHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgICAgdmFyIHJvdGF0ZVggPSBpc0hvcml6b250YWwgPyAwIDogcm90YXRlICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgICAgLy8gdmFyIHJvdGF0ZVogPSAwXG4gICAgICAgIHZhciB0cmFuc2xhdGVaID0gLXRyYW5zbGF0ZSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xuXG4gICAgICAgIHZhciB0cmFuc2xhdGVZID0gaXNIb3Jpem9udGFsID8gMCA6IHBhcmFtcy5zdHJldGNoICogKG9mZnNldE11bHRpcGxpZXIpO1xuICAgICAgICB2YXIgdHJhbnNsYXRlWCA9IGlzSG9yaXpvbnRhbCA/IHBhcmFtcy5zdHJldGNoICogKG9mZnNldE11bHRpcGxpZXIpIDogMDtcblxuICAgICAgICAvLyBGaXggZm9yIHVsdHJhIHNtYWxsIHZhbHVlc1xuICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWCkgPCAwLjAwMSkgeyB0cmFuc2xhdGVYID0gMDsgfVxuICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWSkgPCAwLjAwMSkgeyB0cmFuc2xhdGVZID0gMDsgfVxuICAgICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWikgPCAwLjAwMSkgeyB0cmFuc2xhdGVaID0gMDsgfVxuICAgICAgICBpZiAoTWF0aC5hYnMocm90YXRlWSkgPCAwLjAwMSkgeyByb3RhdGVZID0gMDsgfVxuICAgICAgICBpZiAoTWF0aC5hYnMocm90YXRlWCkgPCAwLjAwMSkgeyByb3RhdGVYID0gMDsgfVxuXG4gICAgICAgIHZhciBzbGlkZVRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyB0cmFuc2xhdGVYICsgXCJweCxcIiArIHRyYW5zbGF0ZVkgKyBcInB4LFwiICsgdHJhbnNsYXRlWiArIFwicHgpICByb3RhdGVYKFwiICsgcm90YXRlWCArIFwiZGVnKSByb3RhdGVZKFwiICsgcm90YXRlWSArIFwiZGVnKVwiO1xuXG4gICAgICAgICRzbGlkZUVsLnRyYW5zZm9ybShzbGlkZVRyYW5zZm9ybSk7XG4gICAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKG9mZnNldE11bHRpcGxpZXIpKSArIDE7XG4gICAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgICB2YXIgJHNoYWRvd0JlZm9yZUVsID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgICAgdmFyICRzaGFkb3dBZnRlckVsID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAkc2hhZG93QmVmb3JlRWwgPSAkKChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoaXNIb3Jpem9udGFsID8gJ2xlZnQnIDogJ3RvcCcpICsgXCJcXFwiPjwvZGl2PlwiKSk7XG4gICAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoJHNoYWRvd0JlZm9yZUVsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgJHNoYWRvd0FmdGVyRWwgPSAkKChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoaXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nKSArIFwiXFxcIj48L2Rpdj5cIikpO1xuICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKCRzaGFkb3dBZnRlckVsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRzaGFkb3dCZWZvcmVFbC5sZW5ndGgpIHsgJHNoYWRvd0JlZm9yZUVsWzBdLnN0eWxlLm9wYWNpdHkgPSBvZmZzZXRNdWx0aXBsaWVyID4gMCA/IG9mZnNldE11bHRpcGxpZXIgOiAwOyB9XG4gICAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCkgeyAkc2hhZG93QWZ0ZXJFbFswXS5zdHlsZS5vcGFjaXR5ID0gKC1vZmZzZXRNdWx0aXBsaWVyKSA+IDAgPyAtb2Zmc2V0TXVsdGlwbGllciA6IDA7IH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBTZXQgY29ycmVjdCBwZXJzcGVjdGl2ZSBmb3IgSUUxMFxuICAgICAgaWYgKFN1cHBvcnQucG9pbnRlckV2ZW50cyB8fCBTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykge1xuICAgICAgICB2YXIgd3MgPSAkd3JhcHBlckVsWzBdLnN0eWxlO1xuICAgICAgICB3cy5wZXJzcGVjdGl2ZU9yaWdpbiA9IGNlbnRlciArIFwicHggNTAlXCI7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zbGlkZXNcbiAgICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgICAudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfTtcblxuICB2YXIgRWZmZWN0Q292ZXJmbG93ID0ge1xuICAgIG5hbWU6ICdlZmZlY3QtY292ZXJmbG93JyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgICByb3RhdGU6IDUwLFxuICAgICAgICBzdHJldGNoOiAwLFxuICAgICAgICBkZXB0aDogMTAwLFxuICAgICAgICBtb2RpZmllcjogMSxcbiAgICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgICAgIHNldFRyYW5zbGF0ZTogQ292ZXJmbG93LnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0VHJhbnNpdGlvbjogQ292ZXJmbG93LnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaCgoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBcImNvdmVyZmxvd1wiKSk7XG4gICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goKChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCIzZFwiKSk7XG5cbiAgICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBUaHVtYnMgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHJlZiA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgdGh1bWJzUGFyYW1zID0gcmVmLnRodW1icztcbiAgICAgIHZhciBTd2lwZXJDbGFzcyA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcbiAgICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHtcbiAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSB0aHVtYnNQYXJhbXMuc3dpcGVyO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnRodW1icy5zd2lwZXIub3JpZ2luYWxQYXJhbXMsIHtcbiAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci50aHVtYnMuc3dpcGVyLnBhcmFtcywge1xuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChVdGlscy5pc09iamVjdCh0aHVtYnNQYXJhbXMuc3dpcGVyKSkge1xuICAgICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IG5ldyBTd2lwZXJDbGFzcyhVdGlscy5leHRlbmQoe30sIHRodW1ic1BhcmFtcy5zd2lwZXIsIHtcbiAgICAgICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IHRydWUsXG4gICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgICAgICAgfSkpO1xuICAgICAgICBzd2lwZXIudGh1bWJzLnN3aXBlckNyZWF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIuJGVsLmFkZENsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnRodW1ic0NvbnRhaW5lckNsYXNzKTtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLm9uKCd0YXAnLCBzd2lwZXIudGh1bWJzLm9uVGh1bWJDbGljayk7XG4gICAgfSxcbiAgICBvblRodW1iQ2xpY2s6IGZ1bmN0aW9uIG9uVGh1bWJDbGljaygpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgY2xpY2tlZEluZGV4ID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgICAgIHZhciBjbGlja2VkU2xpZGUgPSB0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlO1xuICAgICAgaWYgKGNsaWNrZWRTbGlkZSAmJiAkKGNsaWNrZWRTbGlkZSkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzKSkgeyByZXR1cm47IH1cbiAgICAgIGlmICh0eXBlb2YgY2xpY2tlZEluZGV4ID09PSAndW5kZWZpbmVkJyB8fCBjbGlja2VkSW5kZXggPT09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgc2xpZGVUb0luZGV4O1xuICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzbGlkZVRvSW5kZXggPSBwYXJzZUludCgkKHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9IGNsaWNrZWRJbmRleDtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgICAgaWYgKHN3aXBlci5zbGlkZXMuZXEoY3VycmVudEluZGV4KS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgICAgICAgIGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldkluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLnByZXZBbGwoKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHNsaWRlVG9JbmRleCArIFwiXFxcIl1cIikpLmVxKDApLmluZGV4KCk7XG4gICAgICAgIHZhciBuZXh0SW5kZXggPSBzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkubmV4dEFsbCgoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc2xpZGVUb0luZGV4ICsgXCJcXFwiXVwiKSkuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcmV2SW5kZXggPT09ICd1bmRlZmluZWQnKSB7IHNsaWRlVG9JbmRleCA9IG5leHRJbmRleDsgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbmV4dEluZGV4ID09PSAndW5kZWZpbmVkJykgeyBzbGlkZVRvSW5kZXggPSBwcmV2SW5kZXg7IH1cbiAgICAgICAgZWxzZSBpZiAobmV4dEluZGV4IC0gY3VycmVudEluZGV4IDwgY3VycmVudEluZGV4IC0gcHJldkluZGV4KSB7IHNsaWRlVG9JbmRleCA9IG5leHRJbmRleDsgfVxuICAgICAgICBlbHNlIHsgc2xpZGVUb0luZGV4ID0gcHJldkluZGV4OyB9XG4gICAgICB9XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoaW5pdGlhbCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICBpZiAoIXRodW1ic1N3aXBlcikgeyByZXR1cm47IH1cblxuICAgICAgdmFyIHNsaWRlc1BlclZpZXcgPSB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJ1xuICAgICAgICA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpXG4gICAgICAgIDogdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuXG4gICAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCAhPT0gdGh1bWJzU3dpcGVyLnJlYWxJbmRleCkge1xuICAgICAgICB2YXIgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICB2YXIgbmV3VGh1bWJzSW5kZXg7XG4gICAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLmhhc0NsYXNzKHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICAgIHRodW1ic1N3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIHRodW1ic1N3aXBlci5fY2xpZW50TGVmdCA9IHRodW1ic1N3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgICAgICAgICBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEZpbmQgYWN0dWFsIHRodW1icyBpbmRleCB0byBzbGlkZSB0b1xuICAgICAgICAgIHZhciBwcmV2VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRUaHVtYnNJbmRleCkucHJldkFsbCgoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKHN3aXBlci5yZWFsSW5kZXgpICsgXCJcXFwiXVwiKSkuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgICB2YXIgbmV4dFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLm5leHRBbGwoKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIChzd2lwZXIucmVhbEluZGV4KSArIFwiXFxcIl1cIikpLmVxKDApLmluZGV4KCk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBwcmV2VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSB7IG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4OyB9XG4gICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG5leHRUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHsgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7IH1cbiAgICAgICAgICBlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPT09IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgeyBuZXdUaHVtYnNJbmRleCA9IGN1cnJlbnRUaHVtYnNJbmRleDsgfVxuICAgICAgICAgIGVsc2UgaWYgKG5leHRUaHVtYnNJbmRleCAtIGN1cnJlbnRUaHVtYnNJbmRleCA8IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgeyBuZXdUaHVtYnNJbmRleCA9IG5leHRUaHVtYnNJbmRleDsgfVxuICAgICAgICAgIGVsc2UgeyBuZXdUaHVtYnNJbmRleCA9IHByZXZUaHVtYnNJbmRleDsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzICYmIHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5pbmRleE9mKG5ld1RodW1ic0luZGV4KSA8IDApIHtcbiAgICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgICAgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4KSB7XG4gICAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggLSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4ICsgTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggLSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlVG8obmV3VGh1bWJzSW5kZXgsIGluaXRpYWwgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBY3RpdmF0ZSB0aHVtYnNcbiAgICAgIHZhciB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICAgIHZhciB0aHVtYkFjdGl2ZUNsYXNzID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzO1xuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0aHVtYnNUb0FjdGl2YXRlID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgfVxuXG4gICAgICB0aHVtYnNTd2lwZXIuc2xpZGVzLnJlbW92ZUNsYXNzKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCB8fCB0aHVtYnNTd2lwZXIucGFyYW1zLnZpcnR1YWwpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbigoXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKHN3aXBlci5yZWFsSW5kZXggKyBpKSArIFwiXFxcIl1cIikpLmFkZENsYXNzKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCB0aHVtYnNUb0FjdGl2YXRlOyBpJDEgKz0gMSkge1xuICAgICAgICAgIHRodW1ic1N3aXBlci5zbGlkZXMuZXEoc3dpcGVyLnJlYWxJbmRleCArIGkkMSkuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICB9O1xuICB2YXIgVGh1bWJzJDEgPSB7XG4gICAgbmFtZTogJ3RodW1icycsXG4gICAgcGFyYW1zOiB7XG4gICAgICB0aHVtYnM6IHtcbiAgICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgICBzbGlkZVRodW1iQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdGh1bWItYWN0aXZlJyxcbiAgICAgICAgdGh1bWJzQ29udGFpbmVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLXRodW1icycsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgdGh1bWJzOiB7XG4gICAgICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgICAgIGluaXQ6IFRodW1icy5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICB1cGRhdGU6IFRodW1icy51cGRhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIG9uVGh1bWJDbGljazogVGh1bWJzLm9uVGh1bWJDbGljay5iaW5kKHN3aXBlciksXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBiZWZvcmVJbml0OiBmdW5jdGlvbiBiZWZvcmVJbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHJlZiA9IHN3aXBlci5wYXJhbXM7XG4gICAgICAgIHZhciB0aHVtYnMgPSByZWYudGh1bWJzO1xuICAgICAgICBpZiAoIXRodW1icyB8fCAhdGh1bWJzLnN3aXBlcikgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLnRodW1icy5pbml0KCk7XG4gICAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKHRydWUpO1xuICAgICAgfSxcbiAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZUNoYW5nZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHJlc2l6ZTogZnVuY3Rpb24gcmVzaXplKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICBvYnNlcnZlclVwZGF0ZTogZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRodW1ic1N3aXBlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH0sXG4gICAgICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgICAgICBpZiAoIXRodW1ic1N3aXBlcikgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKHN3aXBlci50aHVtYnMuc3dpcGVyQ3JlYXRlZCAmJiB0aHVtYnNTd2lwZXIpIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgLy8gU3dpcGVyIENsYXNzXG5cbiAgdmFyIGNvbXBvbmVudHMgPSBbXG4gICAgRGV2aWNlJDEsXG4gICAgU3VwcG9ydCQxLFxuICAgIEJyb3dzZXIkMSxcbiAgICBSZXNpemUsXG4gICAgT2JzZXJ2ZXIkMSxcbiAgICBWaXJ0dWFsJDEsXG4gICAgS2V5Ym9hcmQkMSxcbiAgICBNb3VzZXdoZWVsJDEsXG4gICAgTmF2aWdhdGlvbiQxLFxuICAgIFBhZ2luYXRpb24kMSxcbiAgICBTY3JvbGxiYXIkMSxcbiAgICBQYXJhbGxheCQxLFxuICAgIFpvb20kMSxcbiAgICBMYXp5JDEsXG4gICAgQ29udHJvbGxlciQxLFxuICAgIEExMXksXG4gICAgSGlzdG9yeSQxLFxuICAgIEhhc2hOYXZpZ2F0aW9uJDEsXG4gICAgQXV0b3BsYXkkMSxcbiAgICBFZmZlY3RGYWRlLFxuICAgIEVmZmVjdEN1YmUsXG4gICAgRWZmZWN0RmxpcCxcbiAgICBFZmZlY3RDb3ZlcmZsb3csXG4gICAgVGh1bWJzJDFcbiAgXTtcblxuICBpZiAodHlwZW9mIFN3aXBlci51c2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgU3dpcGVyLnVzZSA9IFN3aXBlci5DbGFzcy51c2U7XG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUgPSBTd2lwZXIuQ2xhc3MuaW5zdGFsbE1vZHVsZTtcbiAgfVxuXG4gIFN3aXBlci51c2UoY29tcG9uZW50cyk7XG5cbiAgcmV0dXJuIFN3aXBlcjtcblxufSkpO1xuIl19
